{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"An attempt to share knowledge with the world. You never know, maybe something here, in a dark and dusty corner of the web might be something interesting. Welcome! Valvers Raspberry Pi Tutorials Learn how to program bare metal C programs for the Raspberry Pi V6 Opel Manta I built a V6 Opel Manta aimed at stage rallies. You can read all about it Denford Orac CNC Lathe I bought one of these and upgraded the electronics/control Previous Next Raspberry Pi \u00b6 There are several Raspberry Pi resources here at valvers.com which may be of interest. If you've got suggestions for more, feel free to get in touch on GitHub/ Brian Sidebotham Bare Metal Tutorials \u00b6 Part 1 - Getting Started with Raspberry Pi and bare metal cross-compiling. Blinking an LED. Part 2 Part 3 Part 4 Part 5 V6 Manta \u00b6 I have a stage rally V6 Opel Manta which is in need of some love.","title":"Home"},{"location":"#raspberry-pi","text":"There are several Raspberry Pi resources here at valvers.com which may be of interest. If you've got suggestions for more, feel free to get in touch on GitHub/ Brian Sidebotham","title":"Raspberry Pi"},{"location":"#bare-metal-tutorials","text":"Part 1 - Getting Started with Raspberry Pi and bare metal cross-compiling. Blinking an LED. Part 2 Part 3 Part 4 Part 5","title":"Bare Metal Tutorials"},{"location":"#v6-manta","text":"I have a stage rally V6 Opel Manta which is in need of some love.","title":"V6 Manta"},{"location":"denford-orac/","text":"Denford Orac Lathe With some money that my Grandma and Grandad left me, I bought a Denford Orac CNC lathe. It's an ex-school machine that was mainly used to turn engineering platics. It's turned out to be brilliant - I love it. After it working under it's own steam for a while I started converting it and upgrading the motor drivers, etc. to run more modern CNC control software. Resources \u00b6 Some useful resources for the Denford Orac CNC Lathe: Denford themselves keep a set of scanned resources available on their forums . Here's a copy of the electrical diagrams I use . Name Link Electrical Diagrams /dl/denford-orac/orac-mk3-electrical-drawings-small.pdf Operation Manual /dl/denford-orac/orac-progamming-operating-and-maintenance.pdf Brochure /dl/denford-orac/orac-brochures-and-illustrated-parts-list.pdf Fitting a backplate instructions /dl/denford-orac/fitting-a-backplate.pdf 2013 \u00b6 New Motor Fitted 2012 \u00b6 Rebuild of an Orac Tested the drill head above the lathe Removing Electrical Cabinet Drill spindle is apart More quill dismantling Drill Head disassembly Motor doesn't fit! 750W Motor Sourced Gathering some information Uprated spindle motor 2009 \u00b6 My Denford Orac Resources \u00b6 Here are some links to reources for the Denford Orac Lathe: Description Link Fitting a Lathe Backplate fitting-a-backplate.pdf","title":"Index"},{"location":"denford-orac/#resources","text":"Some useful resources for the Denford Orac CNC Lathe: Denford themselves keep a set of scanned resources available on their forums . Here's a copy of the electrical diagrams I use . Name Link Electrical Diagrams /dl/denford-orac/orac-mk3-electrical-drawings-small.pdf Operation Manual /dl/denford-orac/orac-progamming-operating-and-maintenance.pdf Brochure /dl/denford-orac/orac-brochures-and-illustrated-parts-list.pdf Fitting a backplate instructions /dl/denford-orac/fitting-a-backplate.pdf","title":"Resources"},{"location":"denford-orac/#2013","text":"New Motor Fitted","title":"2013"},{"location":"denford-orac/#2012","text":"Rebuild of an Orac Tested the drill head above the lathe Removing Electrical Cabinet Drill spindle is apart More quill dismantling Drill Head disassembly Motor doesn't fit! 750W Motor Sourced Gathering some information Uprated spindle motor","title":"2012"},{"location":"denford-orac/#2009","text":"My Denford Orac","title":"2009"},{"location":"denford-orac/#resources_1","text":"Here are some links to reources for the Denford Orac Lathe: Description Link Fitting a Lathe Backplate fitting-a-backplate.pdf","title":"Resources"},{"location":"denford-orac/2009-04-06-my-denford-orac/","text":"denford-orac 2009-04-06 - My Denford Orac \u00b6 This is the Denford Orac I picked up, exactly as I picked it up! :D ...and this is the first CNC programmed part it made under its own steam from some free-cutting steel:","title":"2009 04 06 my denford orac"},{"location":"denford-orac/2009-04-06-my-denford-orac/#2009-04-06-my-denford-orac","text":"This is the Denford Orac I picked up, exactly as I picked it up! :D ...and this is the first CNC programmed part it made under its own steam from some free-cutting steel:","title":"2009-04-06 - My Denford Orac"},{"location":"denford-orac/2012-02-17-uprated-spindle-motor/","text":"denford-orac 2012-02-17 - Uprated spindle motor \u00b6 I keep meaning to upgrade the spindle motor on the Orac. It is a face mount effort, so I keep meaning to find out the PCD of the motor mount to find a direct (or as near as I can get) replacement. The standard motor is only 0.37kW which is a bit weak for the machine. It could do with some more torque. So the face mounting options available are: 71 frame is 4 holes M6 on a 85mm PCD 80 frame is 4 holes M6 on a 100mm PCD 90 frame is 4 holes M8 on a 115mm PCD 100 frame is 4 holes M8 on a 130mm PCD 112 frame is 4 holes M8 on a 130mm PCD ...and I'll probably need a new pulley for it (unless it happens to have the same size). Machine mart do a fairly decent range of pulleys: https://www.machinemart.co.uk/shop/range/guid/38ED3488-DAAD-4081-A62A-16554351AF21 The original Orac motor is a 71 frame motor.","title":"2012 02 17 uprated spindle motor"},{"location":"denford-orac/2012-02-17-uprated-spindle-motor/#2012-02-17-uprated-spindle-motor","text":"I keep meaning to upgrade the spindle motor on the Orac. It is a face mount effort, so I keep meaning to find out the PCD of the motor mount to find a direct (or as near as I can get) replacement. The standard motor is only 0.37kW which is a bit weak for the machine. It could do with some more torque. So the face mounting options available are: 71 frame is 4 holes M6 on a 85mm PCD 80 frame is 4 holes M6 on a 100mm PCD 90 frame is 4 holes M8 on a 115mm PCD 100 frame is 4 holes M8 on a 130mm PCD 112 frame is 4 holes M8 on a 130mm PCD ...and I'll probably need a new pulley for it (unless it happens to have the same size). Machine mart do a fairly decent range of pulleys: https://www.machinemart.co.uk/shop/range/guid/38ED3488-DAAD-4081-A62A-16554351AF21 The original Orac motor is a 71 frame motor.","title":"2012-02-17 - Uprated spindle motor"},{"location":"denford-orac/2012-03-22-gathering-some-information/","text":"denford-orac 2012-03-22 - Gathering some information \u00b6 After some investigating, I found a company that offers the correct 71-frame, Face mounted three-phase motor, which will be a direct replacement for the one on the Denford Orac. As I mentioned in a previous post, the original motor is only 370W, this direct replacement is 550W, so about a 50% increase. I could modify the Orac and go further, but there is only so much rigidity in the lathe anyway, so much more will only serve to show weaknesses elsewhere anyway. So, I can just get on and order one of them when I want to replace the motor. The next thing is that the three-jaw automatic centring chuck is okay, but it doesn't allow fine adjustment of centring because it's not independent and it cannot do objects that are not round or hex such as bearing blocks because there are only three jaws. I need to replace this chuck with a 4-jaw independent chuck. But first, I need to make a backplate for a new chuck to mount on. I've gathered some photos of the current Orac chuck, so that we can see how it's mounted: I also found a really useful PDF which describes how to make your own backplate on a mill. It includes some useful tips on how to drill the bolt/stud holes for mounting the chuck to the backplate. This'll come in useful I think: Fitting a Lathe Backplate","title":"2012 03 22 gathering some information"},{"location":"denford-orac/2012-03-22-gathering-some-information/#2012-03-22-gathering-some-information","text":"After some investigating, I found a company that offers the correct 71-frame, Face mounted three-phase motor, which will be a direct replacement for the one on the Denford Orac. As I mentioned in a previous post, the original motor is only 370W, this direct replacement is 550W, so about a 50% increase. I could modify the Orac and go further, but there is only so much rigidity in the lathe anyway, so much more will only serve to show weaknesses elsewhere anyway. So, I can just get on and order one of them when I want to replace the motor. The next thing is that the three-jaw automatic centring chuck is okay, but it doesn't allow fine adjustment of centring because it's not independent and it cannot do objects that are not round or hex such as bearing blocks because there are only three jaws. I need to replace this chuck with a 4-jaw independent chuck. But first, I need to make a backplate for a new chuck to mount on. I've gathered some photos of the current Orac chuck, so that we can see how it's mounted: I also found a really useful PDF which describes how to make your own backplate on a mill. It includes some useful tips on how to drill the bolt/stud holes for mounting the chuck to the backplate. This'll come in useful I think: Fitting a Lathe Backplate","title":"2012-03-22 - Gathering some information"},{"location":"denford-orac/2012-09-27-750w-motor-sourced/","text":"denford-orac 2012-09-27 - 750W Motor Sourced \u00b6 I was busy searching around for a motor to use (mainly looking to see if I could get the previously identified one any cheaper!) and I came across a 750W 2-pole 3-phase motor in a 71 Face-mount frame from The Inverter Drive Supermarket . So I quickly placed an order as the motor is also cheaper at only \u00a360+delivery+vat=\u00a382. Although, perhaps the plans have changed a bit now for this motor anyway. I'm looking at converting a old bench-mount pillar drill to a z-axis which will attach to the lathe to give me a cheap, small capacity mill setup. This'll be very useful in making parts to make a better z-axis conversion. But for now, this will prove a quick way to be able to mill some aluminium, and get at least some CNC milling capacity. It'll give me more capacity compared to using the Denford Spindle and having to put a 90-degree x-y table on the cross-slide to get milling capabilities with the lathe. EDIT: Annoyingly, you can get this (equivalent) motor cheaper here ! Typically, you can't find one at all, and then all of a sudden they're in abundance!","title":"2012 09 27 750w motor sourced"},{"location":"denford-orac/2012-09-27-750w-motor-sourced/#2012-09-27-750w-motor-sourced","text":"I was busy searching around for a motor to use (mainly looking to see if I could get the previously identified one any cheaper!) and I came across a 750W 2-pole 3-phase motor in a 71 Face-mount frame from The Inverter Drive Supermarket . So I quickly placed an order as the motor is also cheaper at only \u00a360+delivery+vat=\u00a382. Although, perhaps the plans have changed a bit now for this motor anyway. I'm looking at converting a old bench-mount pillar drill to a z-axis which will attach to the lathe to give me a cheap, small capacity mill setup. This'll be very useful in making parts to make a better z-axis conversion. But for now, this will prove a quick way to be able to mill some aluminium, and get at least some CNC milling capacity. It'll give me more capacity compared to using the Denford Spindle and having to put a 90-degree x-y table on the cross-slide to get milling capabilities with the lathe. EDIT: Annoyingly, you can get this (equivalent) motor cheaper here ! Typically, you can't find one at all, and then all of a sudden they're in abundance!","title":"2012-09-27 - 750W Motor Sourced"},{"location":"denford-orac/2012-10-01-motor-doesnt-fit/","text":"denford-orac 2012-10-01 - Motor doesn't fit! \u00b6 Apparently standards mean that the same motor frame doesn't necessarily fit in place of another motor with the same frame! Typical bureaucratic paper shufflers! Anyway, the problem is that the old motor doesn't have a registration, and the new motor does (as the standard says it should - see dimension N). So I didn't bother fitting the motor to the lathe. I was going to remove the registration on the new motor and fit it, but as I've got plans that need another spindle motor anyway I decided to just re-fit the old one (Yes, I'd taken the old motor off before I realised the difference!) and save this motor for the mill spindle that I'll add the Denford. I am thinking of loosing the whole structure below the lathe bed anyway so that I can make a rigid connection between the mill head and the lathe bed. The lathe bed is only connected to the lower structure (wiring cabinet) by a couple of bolts anyway.","title":"2012 10 01 motor doesnt fit"},{"location":"denford-orac/2012-10-01-motor-doesnt-fit/#2012-10-01-motor-doesnt-fit","text":"Apparently standards mean that the same motor frame doesn't necessarily fit in place of another motor with the same frame! Typical bureaucratic paper shufflers! Anyway, the problem is that the old motor doesn't have a registration, and the new motor does (as the standard says it should - see dimension N). So I didn't bother fitting the motor to the lathe. I was going to remove the registration on the new motor and fit it, but as I've got plans that need another spindle motor anyway I decided to just re-fit the old one (Yes, I'd taken the old motor off before I realised the difference!) and save this motor for the mill spindle that I'll add the Denford. I am thinking of loosing the whole structure below the lathe bed anyway so that I can make a rigid connection between the mill head and the lathe bed. The lathe bed is only connected to the lower structure (wiring cabinet) by a couple of bolts anyway.","title":"2012-10-01 - Motor doesn't fit!"},{"location":"denford-orac/2012-10-10-drill-head-disassembly/","text":"denford-orac 2012-10-10 - Drill Head disassembly \u00b6 After getting hold of a motor for the pillar drill that my dad gave me after the original motor gave up, I decided to think a bit differently about it. Although the spindle (quill) isn't support well for a mill head, it would certainly at least give me some CNC milling capability mounted atop the Orac if I motorised the quill. So I started by pulling the spindle apart to see how easy this would be to do. In actual fact, I think it'll be very easy and so that is now the plan. I have the motor for the spindle already then, and I don't want to take too long or spend too much money converting this to a milling setup as it is not going to be a great milling system due to the quill having some play. However, I'll learn something and I'll end up with some basic milling capabilities at the end of the day which may well help me make a dedicated mill spindle in the future. So having dismantled the quill, I stuck the quill gear (less the handles!) into the lathe to machine it down in order to fit a timing pulley on so that a motor can be used with it.","title":"2012 10 10 drill head disassembly"},{"location":"denford-orac/2012-10-10-drill-head-disassembly/#2012-10-10-drill-head-disassembly","text":"After getting hold of a motor for the pillar drill that my dad gave me after the original motor gave up, I decided to think a bit differently about it. Although the spindle (quill) isn't support well for a mill head, it would certainly at least give me some CNC milling capability mounted atop the Orac if I motorised the quill. So I started by pulling the spindle apart to see how easy this would be to do. In actual fact, I think it'll be very easy and so that is now the plan. I have the motor for the spindle already then, and I don't want to take too long or spend too much money converting this to a milling setup as it is not going to be a great milling system due to the quill having some play. However, I'll learn something and I'll end up with some basic milling capabilities at the end of the day which may well help me make a dedicated mill spindle in the future. So having dismantled the quill, I stuck the quill gear (less the handles!) into the lathe to machine it down in order to fit a timing pulley on so that a motor can be used with it.","title":"2012-10-10 - Drill Head disassembly"},{"location":"denford-orac/2012-10-13-more-quill-dismantling/","text":"denford-orac 2012-10-13 - More quill dismantling \u00b6 I took the quill apart further to find out what needs doing. The original Jacobs drill chuck taper is not ideal as I cannot easily convert this to a collet spindle. An ER16 collet spindle is available with a 16mm shank; This is ideal for the bottom bearing as the shaft is 16mm, but it will be hard to sleeve or connect onto the original spindle. The spindle simply has a ball bearing top and bottom with a few circlips. It's certainly nothing fancy - with a bit of jiggery-pokery I should be able to get an ER16 collet system on there. Of course, the first thing to do is to try it with the drill chuck on. We'll see if that can at least cope with the loadings of milling. It'll only get better with a good collet system.","title":"2012 10 13 more quill dismantling"},{"location":"denford-orac/2012-10-13-more-quill-dismantling/#2012-10-13-more-quill-dismantling","text":"I took the quill apart further to find out what needs doing. The original Jacobs drill chuck taper is not ideal as I cannot easily convert this to a collet spindle. An ER16 collet spindle is available with a 16mm shank; This is ideal for the bottom bearing as the shaft is 16mm, but it will be hard to sleeve or connect onto the original spindle. The spindle simply has a ball bearing top and bottom with a few circlips. It's certainly nothing fancy - with a bit of jiggery-pokery I should be able to get an ER16 collet system on there. Of course, the first thing to do is to try it with the drill chuck on. We'll see if that can at least cope with the loadings of milling. It'll only get better with a good collet system.","title":"2012-10-13 - More quill dismantling"},{"location":"denford-orac/2012-10-17-drill-spindle-is-apart/","text":"denford-orac 2012-10-17 - Drill spindle is apart \u00b6 I finished taking the spindle apart by pressing the support bearings and drive spigot out of the stepped pulley and removing this from the drill head. The bearings at the top are a little worn, but then they've probably been in there since the drill was made and so Lee is grabbing me some new ones of those. They should be here in a few days. I also ordered an ER16 collet set and 12mm straight shaft collet holder which will be the milling chuck. The 12mm straight shaft can be fit into the end of the spindle. BTW, this drill head has a double bearing top and bottom! Very posh! At least it should be able to cope with the side loadings of milling easily. I suspect much easier than the Denford Orac will cope anyway. The only concern will be the quill which obviously just slides up and down in the casting. Although it is a very good fit, in mill head terms this is going to make it poor for high torque cuts. So speed and light cuts is the way we'll have to do. That suits the Denford Orac's lathe bed anyway. This is meant to be a quick project to get some CNC milling capability anyway. From there I can always use this milling set-up to make a much better high speed milling spindle. I also thought, as I turned on the lathe and it blew a fuse that I should probably get on and sort the electronics out once and for all. TBH I don't need the electrical cabinet on the bottom of the lathe at all, so that might as well go and instead I can just bolt it straight to the table that the mill head will be attached too aswell. That should aid the rigidity of the setup too.","title":"2012 10 17 drill spindle is apart"},{"location":"denford-orac/2012-10-17-drill-spindle-is-apart/#2012-10-17-drill-spindle-is-apart","text":"I finished taking the spindle apart by pressing the support bearings and drive spigot out of the stepped pulley and removing this from the drill head. The bearings at the top are a little worn, but then they've probably been in there since the drill was made and so Lee is grabbing me some new ones of those. They should be here in a few days. I also ordered an ER16 collet set and 12mm straight shaft collet holder which will be the milling chuck. The 12mm straight shaft can be fit into the end of the spindle. BTW, this drill head has a double bearing top and bottom! Very posh! At least it should be able to cope with the side loadings of milling easily. I suspect much easier than the Denford Orac will cope anyway. The only concern will be the quill which obviously just slides up and down in the casting. Although it is a very good fit, in mill head terms this is going to make it poor for high torque cuts. So speed and light cuts is the way we'll have to do. That suits the Denford Orac's lathe bed anyway. This is meant to be a quick project to get some CNC milling capability anyway. From there I can always use this milling set-up to make a much better high speed milling spindle. I also thought, as I turned on the lathe and it blew a fuse that I should probably get on and sort the electronics out once and for all. TBH I don't need the electrical cabinet on the bottom of the lathe at all, so that might as well go and instead I can just bolt it straight to the table that the mill head will be attached too aswell. That should aid the rigidity of the setup too.","title":"2012-10-17 - Drill spindle is apart"},{"location":"denford-orac/2012-10-29-removing-electrical-cabinet/","text":"denford-orac 2012-10-29 - Removing Electrical Cabinet \u00b6 The ER16 collet set arrived, but I didn't get much chance to do anything with it at the weekend: I also got a lathe steady which fits pretty well, but will need a spacer block under it. So I'll have to make something for it to fit on when the lathe is up and running again. Mike at work also had some poly-v pulleys around which he was going to use on another project but never did, so I've put them up the garage in case that is something that'd be useful. I'm not sure whether the belt width is going to be up to the job or not. But it not, I can always go single-V. It'd be nice to run step pulleys though to get different speed ranges at maximum motor torque. I started taking the electrical cabinet off of the bottom of the lathe. I'll remove it altogether and sit the electronics in the bench instead. I'll also be able to make the electronics coolant-proof this way too. There was plenty of cutting fluid in the electrical cabinet when I opened it up to see what blew a fuse recently! The lathe itself is entirely independent of the electrical cabinet and is only attached by a few screws and bolts. A bit of awkward fiddling and the lathe is free of its original mountings and I'll be able to mount it directly to the trolley which will hold the lathe and drill/mill head. Until next time... :)","title":"2012 10 29 removing electrical cabinet"},{"location":"denford-orac/2012-10-29-removing-electrical-cabinet/#2012-10-29-removing-electrical-cabinet","text":"The ER16 collet set arrived, but I didn't get much chance to do anything with it at the weekend: I also got a lathe steady which fits pretty well, but will need a spacer block under it. So I'll have to make something for it to fit on when the lathe is up and running again. Mike at work also had some poly-v pulleys around which he was going to use on another project but never did, so I've put them up the garage in case that is something that'd be useful. I'm not sure whether the belt width is going to be up to the job or not. But it not, I can always go single-V. It'd be nice to run step pulleys though to get different speed ranges at maximum motor torque. I started taking the electrical cabinet off of the bottom of the lathe. I'll remove it altogether and sit the electronics in the bench instead. I'll also be able to make the electronics coolant-proof this way too. There was plenty of cutting fluid in the electrical cabinet when I opened it up to see what blew a fuse recently! The lathe itself is entirely independent of the electrical cabinet and is only attached by a few screws and bolts. A bit of awkward fiddling and the lathe is free of its original mountings and I'll be able to mount it directly to the trolley which will hold the lathe and drill/mill head. Until next time... :)","title":"2012-10-29 - Removing Electrical Cabinet"},{"location":"denford-orac/2012-10-31-tested-the-drill-head-above-the-lathe/","text":"denford-orac 2012-10-31 - Tested the drill head above the lathe \u00b6 I managed to do some on the Denford Orac last night by ditching the electrical cabinet and associated gubbins and tested the mill head over the lathe bed. The result is not too bad, although it would be nicer for the drill head spindle centre to be closer to the centre of the cross-slide bed. At the moment the drill spindle centre is very close to the centre of the bed, but this means that most milling operations would be performed off the end of the cross slide bed. Ideally, the drill spindle would be in the centre of the cross slide bed, which is pretty much in-line with the front vee. I took the chuck off so that I could measure up the spindle nose. There is an MT3 taper in the nose, along with a 3 bolt 60mm PCD mounting face which has an external taper register. The taper appears to measure 40mm to 41mm. I didn't manage to measure the angle of taper on the tapered register. The bolts used by the 3 bolt 60mm PCD face are M8. So next up is to get the lathe working again so that I can modify the drill's spindle. Then rebuild the spindle with new bearings and modify the quill lever to be operated by a stepper motor instead. Once that's all done it should be a working milling/lathe combo! :D","title":"2012 10 31 tested the drill head above the lathe"},{"location":"denford-orac/2012-10-31-tested-the-drill-head-above-the-lathe/#2012-10-31-tested-the-drill-head-above-the-lathe","text":"I managed to do some on the Denford Orac last night by ditching the electrical cabinet and associated gubbins and tested the mill head over the lathe bed. The result is not too bad, although it would be nicer for the drill head spindle centre to be closer to the centre of the cross-slide bed. At the moment the drill spindle centre is very close to the centre of the bed, but this means that most milling operations would be performed off the end of the cross slide bed. Ideally, the drill spindle would be in the centre of the cross slide bed, which is pretty much in-line with the front vee. I took the chuck off so that I could measure up the spindle nose. There is an MT3 taper in the nose, along with a 3 bolt 60mm PCD mounting face which has an external taper register. The taper appears to measure 40mm to 41mm. I didn't manage to measure the angle of taper on the tapered register. The bolts used by the 3 bolt 60mm PCD face are M8. So next up is to get the lathe working again so that I can modify the drill's spindle. Then rebuild the spindle with new bearings and modify the quill lever to be operated by a stepper motor instead. Once that's all done it should be a working milling/lathe combo! :D","title":"2012-10-31 - Tested the drill head above the lathe"},{"location":"denford-orac/2012-11-02-rebuild-of-an-orac/","text":"denford-orac 2012-11-02 - Rebuild of an Orac \u00b6 Notice I say an, not my! I forgot I grabbed these photos off of another site from someone who completely rebuild their Orac. They are a great set of photos to have as a reference of how everything fits together.","title":"2012 11 02 rebuild of an orac"},{"location":"denford-orac/2012-11-02-rebuild-of-an-orac/#2012-11-02-rebuild-of-an-orac","text":"Notice I say an, not my! I forgot I grabbed these photos off of another site from someone who completely rebuild their Orac. They are a great set of photos to have as a reference of how everything fits together.","title":"2012-11-02 - Rebuild of an Orac"},{"location":"denford-orac/2013-03-13-new-motor-fitted/","text":"denford-orac 2013-03-13 - New Motor Fitted \u00b6 I got around to fitting the new motor on to the Denford Orac last night. I had to remove the register on the motor so that it would fit properly, but once that was done, the pulley fit straight on the shaft and the motor bolted straight up the standard motor mounting position. The shaft is not as long as the shaft on the old motor, but the amount of key way that is engaged is larger, so everything should be fine. Now just need to do some wiring up again. I also ordered a transformer to make a decent linear power supply for the stepper motor drivers. I ordered a 1000VA 2x42V toroidal transformer from Airlink Transformers .","title":"2013 03 13 new motor fitted"},{"location":"denford-orac/2013-03-13-new-motor-fitted/#2013-03-13-new-motor-fitted","text":"I got around to fitting the new motor on to the Denford Orac last night. I had to remove the register on the motor so that it would fit properly, but once that was done, the pulley fit straight on the shaft and the motor bolted straight up the standard motor mounting position. The shaft is not as long as the shaft on the old motor, but the amount of key way that is engaged is larger, so everything should be fine. Now just need to do some wiring up again. I also ordered a transformer to make a decent linear power supply for the stepper motor drivers. I ordered a 1000VA 2x42V toroidal transformer from Airlink Transformers .","title":"2013-03-13 - New Motor Fitted"},{"location":"denford-orac/2020-06-28-denford-orac-machinekit-controller/","text":"Denford Orac Machinekit Controller \u00b6 Finally getting around to setting up a new controller for the Denford Orac. The only original electronics left are the stepper motors and the spindle index opto detectors for spindle indexing. The Controller \u00b6 I built a controller in a 3U 19\" rack enclosure. I left the VFD for spindle speed control outside of the enclosure because it's sizeable and I'd like to more easily swap out the VFD at a later date if necessary. Configuring Machinekit \u00b6 It's like you need a PhD in order to understand how to configure the HAL and INI files of Machinekit (which is just a Beaglebone Black fork of LinuxCNC). We really need an easy-to-configure CNC controller that isn't this complete nightmare to configure. However, until then, Machinekit it is and I'm running it from the eMMC instead of from an SD Card. For the Denford Orac axis, I have the following: Z axis - 5mm pitch lead screw with a 1:1.75 pulley ratio X axis - 2.5mm pitch lead screw with a 1:1.25 pulley ratio The stepper drivers I've configured to have 800 steps per revolution (for a 1.8deg motor). The denford orac stepper motors are 1.8 deg. All of this is required for setting up the Machinekit scale INI file settings. Thje The scale is set as: Z axis - ( 800 / 5 ) * 1.75 = 280 X axis - ( 800 / 2.5 ) * 1.25 = 400 Spindle \u00b6 The spindle is driven by a VFD which has a 0-10V analogue input. The spindle also provides index and position (not absolute) pulses to the controller so the lathe can do canned cycles like thread cutting in closed loop.","title":"Denford Orac Machinekit Controller"},{"location":"denford-orac/2020-06-28-denford-orac-machinekit-controller/#denford-orac-machinekit-controller","text":"Finally getting around to setting up a new controller for the Denford Orac. The only original electronics left are the stepper motors and the spindle index opto detectors for spindle indexing.","title":"Denford Orac Machinekit Controller"},{"location":"denford-orac/2020-06-28-denford-orac-machinekit-controller/#the-controller","text":"I built a controller in a 3U 19\" rack enclosure. I left the VFD for spindle speed control outside of the enclosure because it's sizeable and I'd like to more easily swap out the VFD at a later date if necessary.","title":"The Controller"},{"location":"denford-orac/2020-06-28-denford-orac-machinekit-controller/#configuring-machinekit","text":"It's like you need a PhD in order to understand how to configure the HAL and INI files of Machinekit (which is just a Beaglebone Black fork of LinuxCNC). We really need an easy-to-configure CNC controller that isn't this complete nightmare to configure. However, until then, Machinekit it is and I'm running it from the eMMC instead of from an SD Card. For the Denford Orac axis, I have the following: Z axis - 5mm pitch lead screw with a 1:1.75 pulley ratio X axis - 2.5mm pitch lead screw with a 1:1.25 pulley ratio The stepper drivers I've configured to have 800 steps per revolution (for a 1.8deg motor). The denford orac stepper motors are 1.8 deg. All of this is required for setting up the Machinekit scale INI file settings. Thje The scale is set as: Z axis - ( 800 / 5 ) * 1.75 = 280 X axis - ( 800 / 2.5 ) * 1.25 = 400","title":"Configuring Machinekit"},{"location":"denford-orac/2020-06-28-denford-orac-machinekit-controller/#spindle","text":"The spindle is driven by a VFD which has a 0-10V analogue input. The spindle also provides index and position (not absolute) pulses to the controller so the lathe can do canned cycles like thread cutting in closed loop.","title":"Spindle"},{"location":"devops/","text":"","title":"Index"},{"location":"devops/artifactory-ldaps-self-signed-cert/","text":"Artifactory LDAPS Self Signed Cert \u00b6 Artifactory OSS is a great tool for homing your own repositories. It's great for pushing and retrieving build artifacts from projects. But, when it came to connecting for a FreeIPA LDAP server using LDAPS it gave me the usual headache that Java things do. Trust Store \u00b6 Java is bundled with OSS Artitfactory. You can find the location of the trust store easily enough: $ find / -iname 'cacerts' 2 >/dev/null /opt/jfrog/artifactory/app/third-party/java/lib/security/cacerts Find the Java compiler in the same way: $ find / -iname 'javac' 2 >/dev/null /opt/jfrog/artifactory/app/third-party/java/bin/javac Write the following to SSLPoke.java : import javax.net.ssl.SSLSocket ; import javax.net.ssl.SSLSocketFactory ; import java.io.* ; /** Establish a SSL connection to a host and port, writes a byte and * prints the response. See * http://confluence.atlassian.com/display/JIRA/Connecting+to+SSL+services */ public class SSLPoke { public static void main ( String [] args ) { if ( args . length != 2 ) { System . out . println ( \"Usage: \" + SSLPoke . class . getName () + \" <host> <port>\" ); System . exit ( 1 ); } try { SSLSocketFactory sslsocketfactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault (); SSLSocket sslsocket = ( SSLSocket ) sslsocketfactory . createSocket ( args [ 0 ] , Integer . parseInt ( args [ 1 ] )); InputStream in = sslsocket . getInputStream (); OutputStream out = sslsocket . getOutputStream (); // Write a test byte to get a reaction :) out . write ( 1 ); while ( in . available () > 0 ) { System . out . print ( in . read ()); } System . out . println ( \"Successfully connected\" ); } catch ( Exception exception ) { exception . printStackTrace (); } } } Compile the java to an executable: $ /opt/jfrog/artifactory/app/third-party/java/bin/javac SSLPoke.java Run the tool in order to show if there is an issue with SSL certificates: $ /opt/jfrog/artifactory/app/third-party/java/bin/java SSLPoke server.com 443 For LDAPS we use port 636, and boom: $ /opt/jfrog/artifactory/app/third-party/java/bin/java SSLPoke server.com 636 javax.net.ssl.SSLHandshakeException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target at java.base/sun.security.ssl.Alert.createSSLException ( Alert.java:131 ) at java.base/sun.security.ssl.TransportContext.fatal ( TransportContext.java:326 ) at java.base/sun.security.ssl.TransportContext.fatal ( TransportContext.java:269 ) at java.base/sun.security.ssl.TransportContext.fatal ( TransportContext.java:264 ) at java.base/sun.security.ssl.CertificateMessage $T12CertificateConsumer .checkServerCerts ( CertificateMessage.java:645 ) at java.base/sun.security.ssl.CertificateMessage $T12CertificateConsumer .onCertificate ( CertificateMessage.java:464 ) at java.base/sun.security.ssl.CertificateMessage $T12CertificateConsumer .consume ( CertificateMessage.java:360 ) at java.base/sun.security.ssl.SSLHandshake.consume ( SSLHandshake.java:392 ) at java.base/sun.security.ssl.HandshakeContext.dispatch ( HandshakeContext.java:444 ) at java.base/sun.security.ssl.HandshakeContext.dispatch ( HandshakeContext.java:422 ) at java.base/sun.security.ssl.TransportContext.dispatch ( TransportContext.java:183 ) at java.base/sun.security.ssl.SSLTransport.decode ( SSLTransport.java:164 ) at java.base/sun.security.ssl.SSLSocketImpl.decode ( SSLSocketImpl.java:1144 ) at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord ( SSLSocketImpl.java:1055 ) at java.base/sun.security.ssl.SSLSocketImpl.startHandshake ( SSLSocketImpl.java:395 ) at java.base/sun.security.ssl.SSLSocketImpl.ensureNegotiated ( SSLSocketImpl.java:709 ) at java.base/sun.security.ssl.SSLSocketImpl $AppOutputStream .write ( SSLSocketImpl.java:962 ) at java.base/sun.security.ssl.SSLSocketImpl $AppOutputStream .write ( SSLSocketImpl.java:934 ) at SSLPoke.main ( SSLPoke.java:23 ) Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target at java.base/sun.security.validator.PKIXValidator.doBuild ( PKIXValidator.java:439 ) at java.base/sun.security.validator.PKIXValidator.engineValidate ( PKIXValidator.java:306 ) at java.base/sun.security.validator.Validator.validate ( Validator.java:264 ) at java.base/sun.security.ssl.X509TrustManagerImpl.validate ( X509TrustManagerImpl.java:313 ) at java.base/sun.security.ssl.X509TrustManagerImpl.checkTrusted ( X509TrustManagerImpl.java:222 ) at java.base/sun.security.ssl.X509TrustManagerImpl.checkServerTrusted ( X509TrustManagerImpl.java:129 ) at java.base/sun.security.ssl.CertificateMessage $T12CertificateConsumer .checkServerCerts ( CertificateMessage.java:629 ) ... 14 more Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target at java.base/sun.security.provider.certpath.SunCertPathBuilder.build ( SunCertPathBuilder.java:141 ) at java.base/sun.security.provider.certpath.SunCertPathBuilder.engineBuild ( SunCertPathBuilder.java:126 ) at java.base/java.security.cert.CertPathBuilder.build ( CertPathBuilder.java:297 ) at java.base/sun.security.validator.PKIXValidator.doBuild ( PKIXValidator.java:434 ) ... 20 more So, we need to import the server's root certificate into the trust store. FreeIPA enrolled hosts have the ca at /etc/ipa/ca.crt . Import the IPA Root CA into the trust store used by artifactory: $ /opt/jfrog/artifactory/app/third-party/java/bin/keytool -importcert \\ -cacerts \\ -trustcacerts \\ -noprompt \\ -storepass changeit \\ -alias ipaca \\ -file /etc/ipa/ca.crt Certificate was added to keystore Now, Poke SSL again: $ /opt/jfrog/artifactory/app/third-party/java/bin/java SSLPoke server.com 636 Successfully connected et. voila.","title":"Artifactory LDAPS Self Signed Cert"},{"location":"devops/artifactory-ldaps-self-signed-cert/#artifactory-ldaps-self-signed-cert","text":"Artifactory OSS is a great tool for homing your own repositories. It's great for pushing and retrieving build artifacts from projects. But, when it came to connecting for a FreeIPA LDAP server using LDAPS it gave me the usual headache that Java things do.","title":"Artifactory LDAPS Self Signed Cert"},{"location":"devops/artifactory-ldaps-self-signed-cert/#trust-store","text":"Java is bundled with OSS Artitfactory. You can find the location of the trust store easily enough: $ find / -iname 'cacerts' 2 >/dev/null /opt/jfrog/artifactory/app/third-party/java/lib/security/cacerts Find the Java compiler in the same way: $ find / -iname 'javac' 2 >/dev/null /opt/jfrog/artifactory/app/third-party/java/bin/javac Write the following to SSLPoke.java : import javax.net.ssl.SSLSocket ; import javax.net.ssl.SSLSocketFactory ; import java.io.* ; /** Establish a SSL connection to a host and port, writes a byte and * prints the response. See * http://confluence.atlassian.com/display/JIRA/Connecting+to+SSL+services */ public class SSLPoke { public static void main ( String [] args ) { if ( args . length != 2 ) { System . out . println ( \"Usage: \" + SSLPoke . class . getName () + \" <host> <port>\" ); System . exit ( 1 ); } try { SSLSocketFactory sslsocketfactory = ( SSLSocketFactory ) SSLSocketFactory . getDefault (); SSLSocket sslsocket = ( SSLSocket ) sslsocketfactory . createSocket ( args [ 0 ] , Integer . parseInt ( args [ 1 ] )); InputStream in = sslsocket . getInputStream (); OutputStream out = sslsocket . getOutputStream (); // Write a test byte to get a reaction :) out . write ( 1 ); while ( in . available () > 0 ) { System . out . print ( in . read ()); } System . out . println ( \"Successfully connected\" ); } catch ( Exception exception ) { exception . printStackTrace (); } } } Compile the java to an executable: $ /opt/jfrog/artifactory/app/third-party/java/bin/javac SSLPoke.java Run the tool in order to show if there is an issue with SSL certificates: $ /opt/jfrog/artifactory/app/third-party/java/bin/java SSLPoke server.com 443 For LDAPS we use port 636, and boom: $ /opt/jfrog/artifactory/app/third-party/java/bin/java SSLPoke server.com 636 javax.net.ssl.SSLHandshakeException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target at java.base/sun.security.ssl.Alert.createSSLException ( Alert.java:131 ) at java.base/sun.security.ssl.TransportContext.fatal ( TransportContext.java:326 ) at java.base/sun.security.ssl.TransportContext.fatal ( TransportContext.java:269 ) at java.base/sun.security.ssl.TransportContext.fatal ( TransportContext.java:264 ) at java.base/sun.security.ssl.CertificateMessage $T12CertificateConsumer .checkServerCerts ( CertificateMessage.java:645 ) at java.base/sun.security.ssl.CertificateMessage $T12CertificateConsumer .onCertificate ( CertificateMessage.java:464 ) at java.base/sun.security.ssl.CertificateMessage $T12CertificateConsumer .consume ( CertificateMessage.java:360 ) at java.base/sun.security.ssl.SSLHandshake.consume ( SSLHandshake.java:392 ) at java.base/sun.security.ssl.HandshakeContext.dispatch ( HandshakeContext.java:444 ) at java.base/sun.security.ssl.HandshakeContext.dispatch ( HandshakeContext.java:422 ) at java.base/sun.security.ssl.TransportContext.dispatch ( TransportContext.java:183 ) at java.base/sun.security.ssl.SSLTransport.decode ( SSLTransport.java:164 ) at java.base/sun.security.ssl.SSLSocketImpl.decode ( SSLSocketImpl.java:1144 ) at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord ( SSLSocketImpl.java:1055 ) at java.base/sun.security.ssl.SSLSocketImpl.startHandshake ( SSLSocketImpl.java:395 ) at java.base/sun.security.ssl.SSLSocketImpl.ensureNegotiated ( SSLSocketImpl.java:709 ) at java.base/sun.security.ssl.SSLSocketImpl $AppOutputStream .write ( SSLSocketImpl.java:962 ) at java.base/sun.security.ssl.SSLSocketImpl $AppOutputStream .write ( SSLSocketImpl.java:934 ) at SSLPoke.main ( SSLPoke.java:23 ) Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target at java.base/sun.security.validator.PKIXValidator.doBuild ( PKIXValidator.java:439 ) at java.base/sun.security.validator.PKIXValidator.engineValidate ( PKIXValidator.java:306 ) at java.base/sun.security.validator.Validator.validate ( Validator.java:264 ) at java.base/sun.security.ssl.X509TrustManagerImpl.validate ( X509TrustManagerImpl.java:313 ) at java.base/sun.security.ssl.X509TrustManagerImpl.checkTrusted ( X509TrustManagerImpl.java:222 ) at java.base/sun.security.ssl.X509TrustManagerImpl.checkServerTrusted ( X509TrustManagerImpl.java:129 ) at java.base/sun.security.ssl.CertificateMessage $T12CertificateConsumer .checkServerCerts ( CertificateMessage.java:629 ) ... 14 more Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target at java.base/sun.security.provider.certpath.SunCertPathBuilder.build ( SunCertPathBuilder.java:141 ) at java.base/sun.security.provider.certpath.SunCertPathBuilder.engineBuild ( SunCertPathBuilder.java:126 ) at java.base/java.security.cert.CertPathBuilder.build ( CertPathBuilder.java:297 ) at java.base/sun.security.validator.PKIXValidator.doBuild ( PKIXValidator.java:434 ) ... 20 more So, we need to import the server's root certificate into the trust store. FreeIPA enrolled hosts have the ca at /etc/ipa/ca.crt . Import the IPA Root CA into the trust store used by artifactory: $ /opt/jfrog/artifactory/app/third-party/java/bin/keytool -importcert \\ -cacerts \\ -trustcacerts \\ -noprompt \\ -storepass changeit \\ -alias ipaca \\ -file /etc/ipa/ca.crt Certificate was added to keystore Now, Poke SSL again: $ /opt/jfrog/artifactory/app/third-party/java/bin/java SSLPoke server.com 636 Successfully connected et. voila.","title":"Trust Store"},{"location":"devops/haproxy-as-a-sidecar-proxy/","text":"HAProxy as a Sidecar proxy \u00b6 Some buzzwords for you, Sidecar Proxy, Service Mesh, Service Discovery, etc. The modern way of stiching and scaling highly available services together. Sidecar Proxy \u00b6 In this example, we'll use a few standard VMs to setup a sidecar proxy on a web server which will load balancer incoming connections to the application server layer. Service discovery is something that needs to be done seperately. i.e. how many application servers are present and are they healthy or not? This is something that needs code written. HA Proxy Forward Proxy \u00b6 The more usual approach to proxying is to use Squid as a forward proxy. It does that job well. But, we would have a single proxy and balancing that proxy is the first thing we'd need to do. Let's assume therefore that we have a couple of Squid forward proxies set up. These boxes have internet access and the server we're installing a HA Proxy Sidecar proxy on does not have internet access. We want the balancing of forward proxying to happen on the local server so we don't have to put a VIP/Load Balancer in front of the forward proxies. ** DIAGRAM HERE ** On two VMs, we install Squid and use the following outbound proxy configuration: Let's not cover setting up Squid as a forward proxy. Make sure the proxies are working correctly: curl -x http://proxy.int.bjs:3128 https://helloacm.com/api/random/?n = 128 \"SZdbdVXsUDARJbWuZFdCOvrXZQlWAvAgvZLGkMPtlCFfTqYOeRoHKEyRkgyZzmwPOLDPASqRYuCRVQVIOBjpCfsyBzWGFnLZliukaeaOvMEAtvDJdLqiZBizRZfmfRTP\" Here, Squid is using the CONNECT method to proxy a TLS session from server to server. Squid itself does not terminate SSL. It merely proxies the connection. In order to sidecar this, we can install and configure haproxy on the local VM Configuration for using squid as a forward proxy through the local sidecar: TODO: Insert this here. Test it with something like: curl -x http://127.0.0.1:5000 https://helloacm.com/api/random/?n=128 If you see log entries in journalctl for haproxy along the lines of: Jul 21 21:40:25 localhost.localdomain haproxy[894760]: [WARNING] 202/214025 (894760) : Server forward_internet_proxies/proxy1 is DOWN, reason: Layer4 connection problem, info: \"General socket error (Permission denied)\", check duration: 0m Then check your selinux settings. A quick fix can be setsebool haproxy_connect_any on We can test to see that the ACL is working by using cURL: [bjs@localhost haproxy]$ curl -Lv -x http://127.0.0.1:5000 http://ns.int.bjs/admin/ 2>&1 | grep int\\.bjs > GET http://ns.int.bjs/admin/ HTTP/1.1 > Host: ns.int.bjs <code>ns1.int.bjs</code> [bjs@localhost haproxy]$ man curl [bjs@localhost haproxy]$ curl -Lv -x http://127.0.0.1:5000 http://ns.int.bjs/admin/ 2>&1 | grep int\\.bjs > GET http://ns.int.bjs/admin/ HTTP/1.1 > Host: ns.int.bjs <code>ns2.int.bjs</code> NOTE: ns.int.bjs does not need to be a valid DNS entry. But, it should exist as a SAN entry in the TLS certificate on each of the load-balanced servers Complete configuration to load balance a HTTP endpoint using localhost proxying: #--------------------------------------------------------------------- # Example configuration for a possible web application. See the # full configuration options online. # # https://www.haproxy.org/download/1.8/doc/configuration.txt # #--------------------------------------------------------------------- #--------------------------------------------------------------------- # Global settings #--------------------------------------------------------------------- global # to have these messages end up in /var/log/haproxy.log you will # need to: # # 1) configure syslog to accept network log events. This is done # by adding the '-r' option to the SYSLOGD_OPTIONS in # /etc/sysconfig/syslog # # 2) configure local2 events to go to the /var/log/haproxy.log # file. A line like the following can be added to # /etc/sysconfig/syslog # # local2.* /var/log/haproxy.log # log 127.0.0.1 local2 chroot /var/lib/haproxy pidfile /var/run/haproxy.pid maxconn 4000 user haproxy group haproxy daemon # turn on stats unix socket stats socket /var/lib/haproxy/stats # utilize system-wide crypto-policies ssl-default-bind-ciphers PROFILE=SYSTEM ssl-default-server-ciphers PROFILE=SYSTEM #--------------------------------------------------------------------- # common defaults that all the 'listen' and 'backend' sections will # use if not designated in their block #--------------------------------------------------------------------- defaults mode tcp log global option httplog option dontlognull option http-server-close option forwardfor except 127.0.0.0/8 option redispatch retries 3 timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout http-keep-alive 10s timeout check 10s maxconn 3000 #--------------------------------------------------------------------- # main frontend which proxys to the backends #--------------------------------------------------------------------- frontend main bind 127.0.0.1:5000 acl host_pihole hdr(host) -i ns.int.bjs use_backend pihole if host_pihole default_backend forward_internet_proxies #--------------------------------------------------------------------- # static backend for serving up images, stylesheets and such #--------------------------------------------------------------------- backend pihole mode http balance roundrobin server pihole1 ns1.int.bjs:80 check server pihole2 ns2.int.bjs:80 check #--------------------------------------------------------------------- # round robin balancing between the various backends #--------------------------------------------------------------------- backend forward_internet_proxies balance roundrobin mode tcp server proxy1 192.168.1.220:3128 check server proxy2 192.168.1.220:3128 check TLS Termination \u00b6 Here cometh' the problem. TLS termination is something of a pain in the butt. We have some options, but we're looking to maintain trust between the service and it's user. We can choose to terminate encryption at HAProxy, or else we can choose to pass-through encrypted traffic (essentially using haproxy as a router for tcp data) to the end service. For both of these frontends, we can have a backend that can load balance connections and check the health of the services in order to mark those services as up or down. Re-trying of connections is down to the backend for example. If the backend fails to connect, haproxy can try another server in the backend group to see if it can connect. Frontends and Backends \u00b6 For global daemon maxconn 256 defaults mode http timeout connect 5000ms timeout client 50000ms timeout server 50000ms frontend http-in bind *:80 default_backend servers backend servers server server1 127.0.0.1:8000 maxconn 32","title":"HAProxy as a Sidecar proxy"},{"location":"devops/haproxy-as-a-sidecar-proxy/#haproxy-as-a-sidecar-proxy","text":"Some buzzwords for you, Sidecar Proxy, Service Mesh, Service Discovery, etc. The modern way of stiching and scaling highly available services together.","title":"HAProxy as a Sidecar proxy"},{"location":"devops/haproxy-as-a-sidecar-proxy/#sidecar-proxy","text":"In this example, we'll use a few standard VMs to setup a sidecar proxy on a web server which will load balancer incoming connections to the application server layer. Service discovery is something that needs to be done seperately. i.e. how many application servers are present and are they healthy or not? This is something that needs code written.","title":"Sidecar Proxy"},{"location":"devops/haproxy-as-a-sidecar-proxy/#ha-proxy-forward-proxy","text":"The more usual approach to proxying is to use Squid as a forward proxy. It does that job well. But, we would have a single proxy and balancing that proxy is the first thing we'd need to do. Let's assume therefore that we have a couple of Squid forward proxies set up. These boxes have internet access and the server we're installing a HA Proxy Sidecar proxy on does not have internet access. We want the balancing of forward proxying to happen on the local server so we don't have to put a VIP/Load Balancer in front of the forward proxies. ** DIAGRAM HERE ** On two VMs, we install Squid and use the following outbound proxy configuration: Let's not cover setting up Squid as a forward proxy. Make sure the proxies are working correctly: curl -x http://proxy.int.bjs:3128 https://helloacm.com/api/random/?n = 128 \"SZdbdVXsUDARJbWuZFdCOvrXZQlWAvAgvZLGkMPtlCFfTqYOeRoHKEyRkgyZzmwPOLDPASqRYuCRVQVIOBjpCfsyBzWGFnLZliukaeaOvMEAtvDJdLqiZBizRZfmfRTP\" Here, Squid is using the CONNECT method to proxy a TLS session from server to server. Squid itself does not terminate SSL. It merely proxies the connection. In order to sidecar this, we can install and configure haproxy on the local VM Configuration for using squid as a forward proxy through the local sidecar: TODO: Insert this here. Test it with something like: curl -x http://127.0.0.1:5000 https://helloacm.com/api/random/?n=128 If you see log entries in journalctl for haproxy along the lines of: Jul 21 21:40:25 localhost.localdomain haproxy[894760]: [WARNING] 202/214025 (894760) : Server forward_internet_proxies/proxy1 is DOWN, reason: Layer4 connection problem, info: \"General socket error (Permission denied)\", check duration: 0m Then check your selinux settings. A quick fix can be setsebool haproxy_connect_any on We can test to see that the ACL is working by using cURL: [bjs@localhost haproxy]$ curl -Lv -x http://127.0.0.1:5000 http://ns.int.bjs/admin/ 2>&1 | grep int\\.bjs > GET http://ns.int.bjs/admin/ HTTP/1.1 > Host: ns.int.bjs <code>ns1.int.bjs</code> [bjs@localhost haproxy]$ man curl [bjs@localhost haproxy]$ curl -Lv -x http://127.0.0.1:5000 http://ns.int.bjs/admin/ 2>&1 | grep int\\.bjs > GET http://ns.int.bjs/admin/ HTTP/1.1 > Host: ns.int.bjs <code>ns2.int.bjs</code> NOTE: ns.int.bjs does not need to be a valid DNS entry. But, it should exist as a SAN entry in the TLS certificate on each of the load-balanced servers Complete configuration to load balance a HTTP endpoint using localhost proxying: #--------------------------------------------------------------------- # Example configuration for a possible web application. See the # full configuration options online. # # https://www.haproxy.org/download/1.8/doc/configuration.txt # #--------------------------------------------------------------------- #--------------------------------------------------------------------- # Global settings #--------------------------------------------------------------------- global # to have these messages end up in /var/log/haproxy.log you will # need to: # # 1) configure syslog to accept network log events. This is done # by adding the '-r' option to the SYSLOGD_OPTIONS in # /etc/sysconfig/syslog # # 2) configure local2 events to go to the /var/log/haproxy.log # file. A line like the following can be added to # /etc/sysconfig/syslog # # local2.* /var/log/haproxy.log # log 127.0.0.1 local2 chroot /var/lib/haproxy pidfile /var/run/haproxy.pid maxconn 4000 user haproxy group haproxy daemon # turn on stats unix socket stats socket /var/lib/haproxy/stats # utilize system-wide crypto-policies ssl-default-bind-ciphers PROFILE=SYSTEM ssl-default-server-ciphers PROFILE=SYSTEM #--------------------------------------------------------------------- # common defaults that all the 'listen' and 'backend' sections will # use if not designated in their block #--------------------------------------------------------------------- defaults mode tcp log global option httplog option dontlognull option http-server-close option forwardfor except 127.0.0.0/8 option redispatch retries 3 timeout http-request 10s timeout queue 1m timeout connect 10s timeout client 1m timeout server 1m timeout http-keep-alive 10s timeout check 10s maxconn 3000 #--------------------------------------------------------------------- # main frontend which proxys to the backends #--------------------------------------------------------------------- frontend main bind 127.0.0.1:5000 acl host_pihole hdr(host) -i ns.int.bjs use_backend pihole if host_pihole default_backend forward_internet_proxies #--------------------------------------------------------------------- # static backend for serving up images, stylesheets and such #--------------------------------------------------------------------- backend pihole mode http balance roundrobin server pihole1 ns1.int.bjs:80 check server pihole2 ns2.int.bjs:80 check #--------------------------------------------------------------------- # round robin balancing between the various backends #--------------------------------------------------------------------- backend forward_internet_proxies balance roundrobin mode tcp server proxy1 192.168.1.220:3128 check server proxy2 192.168.1.220:3128 check","title":"HA Proxy Forward Proxy"},{"location":"devops/haproxy-as-a-sidecar-proxy/#tls-termination","text":"Here cometh' the problem. TLS termination is something of a pain in the butt. We have some options, but we're looking to maintain trust between the service and it's user. We can choose to terminate encryption at HAProxy, or else we can choose to pass-through encrypted traffic (essentially using haproxy as a router for tcp data) to the end service. For both of these frontends, we can have a backend that can load balance connections and check the health of the services in order to mark those services as up or down. Re-trying of connections is down to the backend for example. If the backend fails to connect, haproxy can try another server in the backend group to see if it can connect.","title":"TLS Termination"},{"location":"devops/haproxy-as-a-sidecar-proxy/#frontends-and-backends","text":"For global daemon maxconn 256 defaults mode http timeout connect 5000ms timeout client 50000ms timeout server 50000ms frontend http-in bind *:80 default_backend servers backend servers server server1 127.0.0.1:8000 maxconn 32","title":"Frontends and Backends"},{"location":"engineering/","text":"Various articles about Engineering Bolt Dimensions (Unified and Metric) Making a Cyr Wheel at home Car Build Resources \u00b6 Some downloads useful when building cars and things... Engine Builds \u00b6 Description Type Link WRC Cossie Build Manual PDF WRC Cossie Build Manual Group A Cossie Build Manual PDF Group A Cossie Build Manual Group N Cossie Build Manual PDF Group N Cossie Build Manual Duratec Engine Build Manual PDF Duratec Engine Build Manual Gearbox Manuals \u00b6 Description Type Link T5 Rebuild Manual PDF T5 Rebuild Manual Type 9 Rebuild Manual PDF Type 9 Rebuild Manual","title":"Index"},{"location":"engineering/#car-build-resources","text":"Some downloads useful when building cars and things...","title":"Car Build Resources"},{"location":"engineering/#engine-builds","text":"Description Type Link WRC Cossie Build Manual PDF WRC Cossie Build Manual Group A Cossie Build Manual PDF Group A Cossie Build Manual Group N Cossie Build Manual PDF Group N Cossie Build Manual Duratec Engine Build Manual PDF Duratec Engine Build Manual","title":"Engine Builds"},{"location":"engineering/#gearbox-manuals","text":"Description Type Link T5 Rebuild Manual PDF T5 Rebuild Manual Type 9 Rebuild Manual PDF Type 9 Rebuild Manual","title":"Gearbox Manuals"},{"location":"engineering/an-and-jic-fittings/","text":"AN and JIC Fittings \u00b6 The wikipedia article on JIC fittings is somewhat lacking (as of September 2011 anyway), as is the wikipedia article on AN (Army-Navy) fittings . So this page provides as much information as I can find on the AN / JIC / SAE37\u2032 hydraulic fitting system. Why so many names? \u00b6 Originally, everybody had their own system for hydraulic couplings, a lot were similar, but not compatible with each other causing confusion and a parts nightmare. So finally the military got involved and created the AN (Army-Navy) connector standard. The AN standard defines tight tolerances and defines every type of fitting (and adaptor) available. Then JIC (The Joint Industry Council) came along and use the AN standard as a basis for their own standard. They essentially just ratified the parts to reduce the part count. The tolerances allowed are more lenient for JIC fittings too, compared to AN fittings. The terms AN and JIC are used interchangeably in aftermarket automotive hydraulic systems. Mainly the system is used for fuel and oil systems. Occasionally it is also used for coolant systems, but it is pretty rare. What we\u2019re after in reality are AN fittings, because they offer the best dimensional tolerances, and sealing surface finishes. Not all fittings that look the same, are the same! In Motorsport \u00b6 Generally the fittings in motorsport are compatible with the AN / JIC standards, but rarely do you see anyone claiming they sell AN or JIC fittings, in fact they normally say that they sell \u201cre-usable fittings\u201d Aeroquip are one of the biggest suppliers of these type of fittings to the motorsport industry. They are sold by quite a few people. Think Automotive in London sell the majority of the Aeroquip range. The construction of an Aeroquip fitting is shown in the dissected photo below: Sizes \u00b6 AN sizes are shown as a size number prefixed with a hyphen, so a -10 fitting would be called a \u201cDash 10\u2033 AN fitting. The number represents the OD (Outside Diameter) of the tube the fitting was designed to fit in the old AN specifications. The number represents the OD as multiples of 1/16\u201d. Therefore, a -10 fitting was originally designed to fit an solid tube with an OD of 10 * 1/16\u2033 = \u215d\u2033 (~16mm). Conical Seat Angle \u00b6 The standard JIC and AN conical seat angle is 37\u00b0. There is another standard JIC-45 which uses 45\u00b0 conical seats, so be careful and make sure all the conical seats in your system are compatible. Threads \u00b6 The JIC/AN threads are a UNJF profile. The UNJF profile is a modified UNF profile. UNJ specifies a minimum and maximum root radius for the thread to increase strength. If you are wanting to make a JIC/AN fitting on your lathe, you can normally do so using standard 60\u00b0 thread cutting tools. Dimensions \u00b6 If you are thinking of making your own JIC/AN fittings, you can use the dimensions in the diagram below. The original source of the dimensions can be downloaded here FITTING SIZE HOSE O.D. A B C D E F J -2 \u215b\u2033 (3.18mm) 0.062 0.177 0.245 0.083 0.563 0.250 0.448 -3 3/16\u2033 (4.76mm) 0.125 0.177 0.307 0.146 0.625 0.312 0.479 -4 \u00bc\u2033 (6.35mm) 0.172 0.193 0.359 0.193 0.688 0.364 0.550 -6 \u215c\u2033 (9.53mm) 0.297 0.196 0.475 0.318 0.813 0.481 0.556 -8 \u00bd\u2033 (12.70mm) 0.391 0.253 0.654 0.426 1.000 0.660 0.657 -10 \u215d\u2033 (15.88mm) 0.484 0.266 0.767 0.539 1.125 0.773 0.758 -12 \u00be\u2033 (19.05mm) 0.609 0.315 0.938 0.664 1.375 0.945 0.864 -16 1\u2033 (25.40mm) 0.844 0.315 1.188 0.913 1.625 1.195 0.911","title":"AN and JIC Fittings"},{"location":"engineering/an-and-jic-fittings/#an-and-jic-fittings","text":"The wikipedia article on JIC fittings is somewhat lacking (as of September 2011 anyway), as is the wikipedia article on AN (Army-Navy) fittings . So this page provides as much information as I can find on the AN / JIC / SAE37\u2032 hydraulic fitting system.","title":"AN and JIC Fittings"},{"location":"engineering/an-and-jic-fittings/#why-so-many-names","text":"Originally, everybody had their own system for hydraulic couplings, a lot were similar, but not compatible with each other causing confusion and a parts nightmare. So finally the military got involved and created the AN (Army-Navy) connector standard. The AN standard defines tight tolerances and defines every type of fitting (and adaptor) available. Then JIC (The Joint Industry Council) came along and use the AN standard as a basis for their own standard. They essentially just ratified the parts to reduce the part count. The tolerances allowed are more lenient for JIC fittings too, compared to AN fittings. The terms AN and JIC are used interchangeably in aftermarket automotive hydraulic systems. Mainly the system is used for fuel and oil systems. Occasionally it is also used for coolant systems, but it is pretty rare. What we\u2019re after in reality are AN fittings, because they offer the best dimensional tolerances, and sealing surface finishes. Not all fittings that look the same, are the same!","title":"Why so many names?"},{"location":"engineering/an-and-jic-fittings/#in-motorsport","text":"Generally the fittings in motorsport are compatible with the AN / JIC standards, but rarely do you see anyone claiming they sell AN or JIC fittings, in fact they normally say that they sell \u201cre-usable fittings\u201d Aeroquip are one of the biggest suppliers of these type of fittings to the motorsport industry. They are sold by quite a few people. Think Automotive in London sell the majority of the Aeroquip range. The construction of an Aeroquip fitting is shown in the dissected photo below:","title":"In Motorsport"},{"location":"engineering/an-and-jic-fittings/#sizes","text":"AN sizes are shown as a size number prefixed with a hyphen, so a -10 fitting would be called a \u201cDash 10\u2033 AN fitting. The number represents the OD (Outside Diameter) of the tube the fitting was designed to fit in the old AN specifications. The number represents the OD as multiples of 1/16\u201d. Therefore, a -10 fitting was originally designed to fit an solid tube with an OD of 10 * 1/16\u2033 = \u215d\u2033 (~16mm).","title":"Sizes"},{"location":"engineering/an-and-jic-fittings/#conical-seat-angle","text":"The standard JIC and AN conical seat angle is 37\u00b0. There is another standard JIC-45 which uses 45\u00b0 conical seats, so be careful and make sure all the conical seats in your system are compatible.","title":"Conical Seat Angle"},{"location":"engineering/an-and-jic-fittings/#threads","text":"The JIC/AN threads are a UNJF profile. The UNJF profile is a modified UNF profile. UNJ specifies a minimum and maximum root radius for the thread to increase strength. If you are wanting to make a JIC/AN fitting on your lathe, you can normally do so using standard 60\u00b0 thread cutting tools.","title":"Threads"},{"location":"engineering/an-and-jic-fittings/#dimensions","text":"If you are thinking of making your own JIC/AN fittings, you can use the dimensions in the diagram below. The original source of the dimensions can be downloaded here FITTING SIZE HOSE O.D. A B C D E F J -2 \u215b\u2033 (3.18mm) 0.062 0.177 0.245 0.083 0.563 0.250 0.448 -3 3/16\u2033 (4.76mm) 0.125 0.177 0.307 0.146 0.625 0.312 0.479 -4 \u00bc\u2033 (6.35mm) 0.172 0.193 0.359 0.193 0.688 0.364 0.550 -6 \u215c\u2033 (9.53mm) 0.297 0.196 0.475 0.318 0.813 0.481 0.556 -8 \u00bd\u2033 (12.70mm) 0.391 0.253 0.654 0.426 1.000 0.660 0.657 -10 \u215d\u2033 (15.88mm) 0.484 0.266 0.767 0.539 1.125 0.773 0.758 -12 \u00be\u2033 (19.05mm) 0.609 0.315 0.938 0.664 1.375 0.945 0.864 -16 1\u2033 (25.40mm) 0.844 0.315 1.188 0.913 1.625 1.195 0.911","title":"Dimensions"},{"location":"engineering/bolt-dimensions/","text":"Bolt Dimensions \u00b6 Useful information regarding metric and unified bolts. Available as a PDF","title":"Bolt Dimensions"},{"location":"engineering/bolt-dimensions/#bolt-dimensions","text":"Useful information regarding metric and unified bolts. Available as a PDF","title":"Bolt Dimensions"},{"location":"engineering/linux-cnc-on-beaglebone-black/","text":"Linux CNC on Beaglebone Black \u00b6 The Beaglebone Black is a good choice for a LinuxCNC SBC because of it's PRUs. The PRUs allow real-time IO control with data shared between the IO processor and user-space memory. The thing that the Beaglebone is not great at is graphics. Once you add that into the mix you end up with pretty poor performance from the Beaglebone. Instead, it's possible to configure a Remote UI to use a headless Beaglebone running Linux CNC. MachineKit \u00b6 The first stop is getting MachineKit installed on an SD Card to run on a Beaglebone. Most software these days resides on Github: https://github.com/machinekit","title":"Linux CNC on Beaglebone Black"},{"location":"engineering/linux-cnc-on-beaglebone-black/#linux-cnc-on-beaglebone-black","text":"The Beaglebone Black is a good choice for a LinuxCNC SBC because of it's PRUs. The PRUs allow real-time IO control with data shared between the IO processor and user-space memory. The thing that the Beaglebone is not great at is graphics. Once you add that into the mix you end up with pretty poor performance from the Beaglebone. Instead, it's possible to configure a Remote UI to use a headless Beaglebone running Linux CNC.","title":"Linux CNC on Beaglebone Black"},{"location":"engineering/linux-cnc-on-beaglebone-black/#machinekit","text":"The first stop is getting MachineKit installed on an SD Card to run on a Beaglebone. Most software these days resides on Github: https://github.com/machinekit","title":"MachineKit"},{"location":"engineering/making-a-cyr-wheel/","text":"Making a Cyr Wheel \u00b6 A Cyr Wheel is a fun an impressive skill to master. To get an idea of what can be done on a Cyr Wheel, have a look at the following YouTube video: Manual \u00b6 FEDEC provide a comprehensive PDF manual on the Cyr Wheel which provides very valuable information on about the construction and use of the wheel. Construction \u00b6 The main construction of the Cyr Wheel is multiple sections of a circle made from metal tube, covered in a PVC hose as a protective surface which also provides grip. Some of the FEDEC wheels are made from stainless steel, but I chose to make Donna one out of Aluminium as it\u2019s easier to work with. The outside diameter of the Cyr Wheel needs to be around 40-50mm depending on the preferred grip of the performer who\u2019s going to be using it. The diameter of the whole Cyr Wheel should be such that the performer can stand on the bottom of the wheel and have about a fist (10-15cm) gap above their head. So the internal diameter of the wheel needs to be the performers height + 10-15cm. The original wheel I made for Donna is a bit small, so we\u2019ll be making a new one with a larger diameter. The main wheel material I used was 1 \u00bc\u2033 (31.75mm) O.D. aluminium with a wall thickness of 10SWG (~3.25mm), and I got some tube to fit inside that to make the connections between the three sections of the wheel, this tube was 1\u2033 (25.4mm) O.D. with a wall thickness of 3/16\u2033 (4.76mm) which will be directly drilled and tapped. Later on I\u2019ll insert steel threaded sections so that the wheel can be held together tighter. The metal was rolled using a square former, because, well, that\u2019s all we had! It helped us not get much twist, but it did mean there was some deforming of the tube. The deformation however was very much limited to the smaller radius side of the tube, and thus won\u2019t affect the rolling or performance of the wheel. We rolled the tube to size by chalking out a half circle of the required size with a piece of string (well, a tape measure actually) holding the end at the centre point and rotating it a little and then marking it. This is the tube after it\u2019s been rolled: As you can see, we start off with too much material, but I cut each section to a reasonable size which was still too big, but are all rolled section, with square ends so the tube can be laid out, and measured: The overlap is measured, divided by 3 and then that much is chopped off of each section. so that each section is the same size, and altogether they make a complete circle. You can see the deformed tube shape below which shows how well the external diameter radius has survived the rolling with square formers. If you\u2019re using round formers for the rolling then you won\u2019t have much distortion so you\u2019ll be okay! Now that we have the wheel basics together, we need to create the connecting pieces. These will connect the three pieces of the wheel together and allow it to be broken down for easier transport. You can use as many pieces as you want. Traditionally Cyr Wheels have come in three piece form, but there are newer designs which break down into five piece. The more pieces the better actually, because getting the PVC hose on the outside as the protective layer is really hard to do over one of a three piece wheel. Normally, we\u2019d turn the smaller diameter round tube down a little to give it some play and fit curved sections of it, around 200mm long into the larger diameter tube that makes up the wheel. However, as the tube is distorted I had to match the shape of the inner tube to the outer tube on the milling machine. The pieces are about 200mm long, and were curved on a fly press until they fitted easily inside the tube. Note: You\u2019ll have to make them a slightly sloppy fit in order to be able to fit all the pieces of the wheel together. If you make the fit too tight you\u2019ll struggle to the get the wheel to assemble completely. Eventually when we\u2019ve done three of them, we end up with what is the basis of our wheel, with three curved sections with fixings in one end of each: The hoop is put together as a whole and then the fixing sections are drilled and tapped with the wheel completely assembled: Now the wheel can be assembled and bolted together. It\u2019s worth checking now that the fit is tight enough. Try to hang from the top of the wheel with it all fixed together, the wheel should not flex or deform. It should take your weight easily as much more energy is put into the wheel when it is used. Putting the outer PVC hose on is a bit of a trial! I also had to sand the marks from the square formers used for rolling, hence the DA sander is out! I used heat and soapy water as well as attaching the hose to the air line and blocking off the other end of the wheel section. This was meant to create a cushion of air to ease fitting the hose, but the hose is a pretty tough nut to crack. Besides, it becomes hard on a large section to apply force the hose whilst steadying the wheel tube. In the end I did two pieces of hose (one from each end) on the sections of the first wheel! Trying to do it in one piece just wasn\u2019t happening! After all this you\u2019ll probably find you\u2019ve got one happy Fiance, but you\u2019ve also made the wheel a bit small and so need to make another one. Luckily you\u2019ve learnt from the first one and will make the second one even better! \ud83d\ude00 And finally we\u2019ve got the rest of the hose on and Donna has booked a Cyr wheel workshop for October 2013 so she\u2019s been getting in some initial practice. Although here she\u2019s making it tougher by using flip-flops! This is when the wheel first made it home in a complete form. The trouble with finishing the wheel was getting married and buying a house took precedence! Update 12/10/2013 \u00b6 Thank-you so much to the guy\u2019s at Torwood Wheeler\u2019s! We had a brilliant time at your wheeling workshop. It was awesome to see so many talented people essentially giving up their time and so enthusiastically teaching others! We could have had a better time, it was awesome. Roll on your next event! Anyway, whilst we were there we got a few video\u2019s and photo\u2019s of Donna learning. Some photos from Torwood Wheelers:","title":"Making a Cyr Wheel"},{"location":"engineering/making-a-cyr-wheel/#making-a-cyr-wheel","text":"A Cyr Wheel is a fun an impressive skill to master. To get an idea of what can be done on a Cyr Wheel, have a look at the following YouTube video:","title":"Making a Cyr Wheel"},{"location":"engineering/making-a-cyr-wheel/#manual","text":"FEDEC provide a comprehensive PDF manual on the Cyr Wheel which provides very valuable information on about the construction and use of the wheel.","title":"Manual"},{"location":"engineering/making-a-cyr-wheel/#construction","text":"The main construction of the Cyr Wheel is multiple sections of a circle made from metal tube, covered in a PVC hose as a protective surface which also provides grip. Some of the FEDEC wheels are made from stainless steel, but I chose to make Donna one out of Aluminium as it\u2019s easier to work with. The outside diameter of the Cyr Wheel needs to be around 40-50mm depending on the preferred grip of the performer who\u2019s going to be using it. The diameter of the whole Cyr Wheel should be such that the performer can stand on the bottom of the wheel and have about a fist (10-15cm) gap above their head. So the internal diameter of the wheel needs to be the performers height + 10-15cm. The original wheel I made for Donna is a bit small, so we\u2019ll be making a new one with a larger diameter. The main wheel material I used was 1 \u00bc\u2033 (31.75mm) O.D. aluminium with a wall thickness of 10SWG (~3.25mm), and I got some tube to fit inside that to make the connections between the three sections of the wheel, this tube was 1\u2033 (25.4mm) O.D. with a wall thickness of 3/16\u2033 (4.76mm) which will be directly drilled and tapped. Later on I\u2019ll insert steel threaded sections so that the wheel can be held together tighter. The metal was rolled using a square former, because, well, that\u2019s all we had! It helped us not get much twist, but it did mean there was some deforming of the tube. The deformation however was very much limited to the smaller radius side of the tube, and thus won\u2019t affect the rolling or performance of the wheel. We rolled the tube to size by chalking out a half circle of the required size with a piece of string (well, a tape measure actually) holding the end at the centre point and rotating it a little and then marking it. This is the tube after it\u2019s been rolled: As you can see, we start off with too much material, but I cut each section to a reasonable size which was still too big, but are all rolled section, with square ends so the tube can be laid out, and measured: The overlap is measured, divided by 3 and then that much is chopped off of each section. so that each section is the same size, and altogether they make a complete circle. You can see the deformed tube shape below which shows how well the external diameter radius has survived the rolling with square formers. If you\u2019re using round formers for the rolling then you won\u2019t have much distortion so you\u2019ll be okay! Now that we have the wheel basics together, we need to create the connecting pieces. These will connect the three pieces of the wheel together and allow it to be broken down for easier transport. You can use as many pieces as you want. Traditionally Cyr Wheels have come in three piece form, but there are newer designs which break down into five piece. The more pieces the better actually, because getting the PVC hose on the outside as the protective layer is really hard to do over one of a three piece wheel. Normally, we\u2019d turn the smaller diameter round tube down a little to give it some play and fit curved sections of it, around 200mm long into the larger diameter tube that makes up the wheel. However, as the tube is distorted I had to match the shape of the inner tube to the outer tube on the milling machine. The pieces are about 200mm long, and were curved on a fly press until they fitted easily inside the tube. Note: You\u2019ll have to make them a slightly sloppy fit in order to be able to fit all the pieces of the wheel together. If you make the fit too tight you\u2019ll struggle to the get the wheel to assemble completely. Eventually when we\u2019ve done three of them, we end up with what is the basis of our wheel, with three curved sections with fixings in one end of each: The hoop is put together as a whole and then the fixing sections are drilled and tapped with the wheel completely assembled: Now the wheel can be assembled and bolted together. It\u2019s worth checking now that the fit is tight enough. Try to hang from the top of the wheel with it all fixed together, the wheel should not flex or deform. It should take your weight easily as much more energy is put into the wheel when it is used. Putting the outer PVC hose on is a bit of a trial! I also had to sand the marks from the square formers used for rolling, hence the DA sander is out! I used heat and soapy water as well as attaching the hose to the air line and blocking off the other end of the wheel section. This was meant to create a cushion of air to ease fitting the hose, but the hose is a pretty tough nut to crack. Besides, it becomes hard on a large section to apply force the hose whilst steadying the wheel tube. In the end I did two pieces of hose (one from each end) on the sections of the first wheel! Trying to do it in one piece just wasn\u2019t happening! After all this you\u2019ll probably find you\u2019ve got one happy Fiance, but you\u2019ve also made the wheel a bit small and so need to make another one. Luckily you\u2019ve learnt from the first one and will make the second one even better! \ud83d\ude00 And finally we\u2019ve got the rest of the hose on and Donna has booked a Cyr wheel workshop for October 2013 so she\u2019s been getting in some initial practice. Although here she\u2019s making it tougher by using flip-flops! This is when the wheel first made it home in a complete form. The trouble with finishing the wheel was getting married and buying a house took precedence!","title":"Construction"},{"location":"engineering/making-a-cyr-wheel/#update-12102013","text":"Thank-you so much to the guy\u2019s at Torwood Wheeler\u2019s! We had a brilliant time at your wheeling workshop. It was awesome to see so many talented people essentially giving up their time and so enthusiastically teaching others! We could have had a better time, it was awesome. Roll on your next event! Anyway, whilst we were there we got a few video\u2019s and photo\u2019s of Donna learning. Some photos from Torwood Wheelers:","title":"Update 12/10/2013"},{"location":"open-software/","text":"Open-Software \u00b6 The best type of software ofcourse... ARM Bare Metal Tutorials \u00b6 ARM Bare Metal C Tutorial Android Development \u00b6 Develop an Android Car Dash GCC \u00b6 GCC - Weak Function Attributes Python \u00b6 Pylab","title":"Open-Software"},{"location":"open-software/#open-software","text":"The best type of software ofcourse...","title":"Open-Software"},{"location":"open-software/#arm-bare-metal-tutorials","text":"ARM Bare Metal C Tutorial","title":"ARM Bare Metal Tutorials"},{"location":"open-software/#android-development","text":"Develop an Android Car Dash","title":"Android Development"},{"location":"open-software/#gcc","text":"GCC - Weak Function Attributes","title":"GCC"},{"location":"open-software/#python","text":"Pylab","title":"Python"},{"location":"open-software/android-car-dash/","text":"NOTE: This is an old page that reallly needs updating, but may have some relevant information still... The Valvers Dash Project is an open hardware and open software project that implements a data interface to a CAN network and an Android tablet. Developing for Android is simple, with the main development language being Java. The API\u2019s for Android are pretty good. This page describes getting started with Android Development. Windows and Linux \u00b6 Download the Android ADT Bundle which includes the SDK, Eclipse and the API\u2019s. Once downloaded unzip to a hard drive. Getting Started with Eclipse \u00b6 Eclipse uses a folder, which it calls its workspace which you work with. It\u2019s possible to import projects into a workspace without importing the files of a project. This can be useful in our case as we\u2019re going to be working with a project that is under version control. Start eclipse and just accept the default workspace location, unless you wish to use multiple workspaces (groups of projects) in which case you might want to make a new folder and point eclipse to it so you know where you\u2019re working. Sometimes it\u2019s worth doing this to begin with, mess around a bit to get to know how to import projects and the like and then start a fresh. Get an example project to start with rather than trying to start from scratch. For example, in a suitable directory checkout the valvers android dash project: bzr co lp:~brian-sidebotham/+junk/valvers-android-dash Now, startup eclipse from under the $ADT_ROOT/eclipse folder. Select the folder you want to use as the eclipse workspace. Some meta files and information is stored here only. Once eclipse starts you\u2019ll get a screen that looks like this: Close this window (The X next to the Android IDE tab title), and you\u2019ll get the base eclipse perspective with the package explorer on the left and a code editing pane in the middle: Import the valvers dash project using the File->Import menu. From the import dialog, select General->Existing Projects into Workspace and press next: Select the folder where you checked out the valvers-android-dash project. This should be the folder above the valvers-android-dash folder, uncheck any other projects if they come up as you don\u2019t need to import other projects at the same time! Make sure you do not copy the files into the workspace as they are under version control and the hidden .bzr folder which contains the version control information will not get copied. Click finish to import the project. Now, the project will appear in the package explorer. In a new android-eclipse install you\u2019ll have an error \u2013 unable to resolve target \u2018android-8\u2019. This means we do not have V8 of the android API\u2019s installed. We will need to get the API\u2019s in order to develop with them! ![Image](/img/open-software/android/dash/android-eclipse-project-in-perspective.jpg We can manage the API\u2019s easily as eclipse already has the android extensions built in. Simply go to Window->Android SDK Manager from the main menu, and you\u2019ll be presented with the Android SDK Manager! As can be seen, there is very little that is installed! The first thing to do is to update the Tools section if there is an update available. So check the main Tools checkbox to select all Tools to be updated. As we\u2019ve noticed that API V8 is missing and is required by our project, we should also select the Android 2.2 (API 8) section to be installed too. Check that API level (and any other API level you\u2019re interested in too!) and then click the install n packages button to start the installation and update process. As the installation process must rename some folders and replace files that eclipse holds open, so close eclipse now before you click install so that the SDK manager installs the updates smoothly. You\u2019ll have to select several licence terms and conditions before the SDK manager will actually install anything for you! Of course if you don\u2019t agree you don\u2019t have to and you can stop Android development here. It\u2019s easiest to select Accept all without reading a thing and then clicking install... Now have a cup of tea or coffee and wait a while whilst the API\u2019s and Tools are installed and updated. Close the SDK Manager when it has finished. Start eclipse again and you should have a project that builds without errors. Normally the project is built automatically any time a file is changed and saved. You can change this behaviour from the Project menu, uncheck automatic build and then select build all. Developing on a Real Device \u00b6 This is how I recommend developing. The virtual devices are really good, but sometimes you just can\u2019t beat running your app on an actual device. In the case of the android-dash project we have to run it on an actual device anyway because the virtual machines do not include Bluetooth support. On your device make sure you have the ability to install packages from sources other than the marketplace: ...and make sure you have USB Debugging enabled: Make sure you have your android device plugged in via a USB port and then build the project if it is not already automatically built. Click the Debug icon in eclipse. You\u2019ll be presented with a target selection dialog like this: Select the device you want to run on and then click OK. the ADT (Android Development Tools) will package your app, install it on the device and launch it. If you have a lock screen enabled on your device, you\u2019ll have to unlock your device to see your app running. When I run the android-dash project like this on my Archos 70 I can develop easily from within eclipse: Bluetooth Serial Protocol \u00b6 The Bluetooth serial connection profile is used to pass data from the ECU to the Dash. A quick and dirty protocol was devised to pass the data between the two: Bluetooth data hack ------------------- Preamble: 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE Data: 0x12, 0x34 - RPM 0x12, 0x34 - Battery Voltage (x10) 0x12, 0x34 - Speed (KM) 0x12, 0x34 - Fuel Pressure 0x12, 0x34 - Oil Pressure 0x12, 0x34 - Air Temperature 0x12, 0x34 - Oil Temperature 0x12, 0x34 - Water Temperature 0x55 - End of packet ( ensures (sort of) data validity! ) If this byte is not present, simply drop the packet, do not update the realtime values and wait for the next valid data packet Bluetooth data protocol All 0x55 characters are escaped by 0x55. So any valid 0x55 character will be immediately repeated inside a packet. But for the start of a packet, only one 0x55 character will be sent. This distinguishes a start character from packet data. uint8_t Start Of Packet Byte uint16_t [] = { uint16_t Data Code ( See Below for data codes ) uint16_t Data } The end of a packet is defined by the start (or re-sync) of a new start of packet byte 0x55 - start of packet","title":"Android car dash"},{"location":"open-software/android-car-dash/#windows-and-linux","text":"Download the Android ADT Bundle which includes the SDK, Eclipse and the API\u2019s. Once downloaded unzip to a hard drive.","title":"Windows and Linux"},{"location":"open-software/android-car-dash/#getting-started-with-eclipse","text":"Eclipse uses a folder, which it calls its workspace which you work with. It\u2019s possible to import projects into a workspace without importing the files of a project. This can be useful in our case as we\u2019re going to be working with a project that is under version control. Start eclipse and just accept the default workspace location, unless you wish to use multiple workspaces (groups of projects) in which case you might want to make a new folder and point eclipse to it so you know where you\u2019re working. Sometimes it\u2019s worth doing this to begin with, mess around a bit to get to know how to import projects and the like and then start a fresh. Get an example project to start with rather than trying to start from scratch. For example, in a suitable directory checkout the valvers android dash project: bzr co lp:~brian-sidebotham/+junk/valvers-android-dash Now, startup eclipse from under the $ADT_ROOT/eclipse folder. Select the folder you want to use as the eclipse workspace. Some meta files and information is stored here only. Once eclipse starts you\u2019ll get a screen that looks like this: Close this window (The X next to the Android IDE tab title), and you\u2019ll get the base eclipse perspective with the package explorer on the left and a code editing pane in the middle: Import the valvers dash project using the File->Import menu. From the import dialog, select General->Existing Projects into Workspace and press next: Select the folder where you checked out the valvers-android-dash project. This should be the folder above the valvers-android-dash folder, uncheck any other projects if they come up as you don\u2019t need to import other projects at the same time! Make sure you do not copy the files into the workspace as they are under version control and the hidden .bzr folder which contains the version control information will not get copied. Click finish to import the project. Now, the project will appear in the package explorer. In a new android-eclipse install you\u2019ll have an error \u2013 unable to resolve target \u2018android-8\u2019. This means we do not have V8 of the android API\u2019s installed. We will need to get the API\u2019s in order to develop with them! ![Image](/img/open-software/android/dash/android-eclipse-project-in-perspective.jpg We can manage the API\u2019s easily as eclipse already has the android extensions built in. Simply go to Window->Android SDK Manager from the main menu, and you\u2019ll be presented with the Android SDK Manager! As can be seen, there is very little that is installed! The first thing to do is to update the Tools section if there is an update available. So check the main Tools checkbox to select all Tools to be updated. As we\u2019ve noticed that API V8 is missing and is required by our project, we should also select the Android 2.2 (API 8) section to be installed too. Check that API level (and any other API level you\u2019re interested in too!) and then click the install n packages button to start the installation and update process. As the installation process must rename some folders and replace files that eclipse holds open, so close eclipse now before you click install so that the SDK manager installs the updates smoothly. You\u2019ll have to select several licence terms and conditions before the SDK manager will actually install anything for you! Of course if you don\u2019t agree you don\u2019t have to and you can stop Android development here. It\u2019s easiest to select Accept all without reading a thing and then clicking install... Now have a cup of tea or coffee and wait a while whilst the API\u2019s and Tools are installed and updated. Close the SDK Manager when it has finished. Start eclipse again and you should have a project that builds without errors. Normally the project is built automatically any time a file is changed and saved. You can change this behaviour from the Project menu, uncheck automatic build and then select build all.","title":"Getting Started with Eclipse"},{"location":"open-software/android-car-dash/#developing-on-a-real-device","text":"This is how I recommend developing. The virtual devices are really good, but sometimes you just can\u2019t beat running your app on an actual device. In the case of the android-dash project we have to run it on an actual device anyway because the virtual machines do not include Bluetooth support. On your device make sure you have the ability to install packages from sources other than the marketplace: ...and make sure you have USB Debugging enabled: Make sure you have your android device plugged in via a USB port and then build the project if it is not already automatically built. Click the Debug icon in eclipse. You\u2019ll be presented with a target selection dialog like this: Select the device you want to run on and then click OK. the ADT (Android Development Tools) will package your app, install it on the device and launch it. If you have a lock screen enabled on your device, you\u2019ll have to unlock your device to see your app running. When I run the android-dash project like this on my Archos 70 I can develop easily from within eclipse:","title":"Developing on a Real Device"},{"location":"open-software/android-car-dash/#bluetooth-serial-protocol","text":"The Bluetooth serial connection profile is used to pass data from the ECU to the Dash. A quick and dirty protocol was devised to pass the data between the two: Bluetooth data hack ------------------- Preamble: 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE Data: 0x12, 0x34 - RPM 0x12, 0x34 - Battery Voltage (x10) 0x12, 0x34 - Speed (KM) 0x12, 0x34 - Fuel Pressure 0x12, 0x34 - Oil Pressure 0x12, 0x34 - Air Temperature 0x12, 0x34 - Oil Temperature 0x12, 0x34 - Water Temperature 0x55 - End of packet ( ensures (sort of) data validity! ) If this byte is not present, simply drop the packet, do not update the realtime values and wait for the next valid data packet Bluetooth data protocol All 0x55 characters are escaped by 0x55. So any valid 0x55 character will be immediately repeated inside a packet. But for the start of a packet, only one 0x55 character will be sent. This distinguishes a start character from packet data. uint8_t Start Of Packet Byte uint16_t [] = { uint16_t Data Code ( See Below for data codes ) uint16_t Data } The end of a packet is defined by the start (or re-sync) of a new start of packet byte 0x55 - start of packet","title":"Bluetooth Serial Protocol"},{"location":"open-software/logging-with-gcc/","text":"Logging with gcc \u00b6 Usually it\u2019s one of the first things we need to set up - some logging functions so we can see what our program\u2019s doing! Here\u2019s some useful information regarding doing just that. Like a cheat sheet - only shorter! Standard Pre-Defined macros \u00b6 GCC Defines several macros that are useful when logging. They include: __FILE__ = A null terminated string of type char[] which is set to the currently compiling source code filename. __func__ = A null terminated string of type char[] which is set to the current function name context. __LINE__ = An integer which is always the current line number of the source code currently being compiled. It\u2019s worth noting quickly, that we can define macros which include these macros in a header file somewhere, __FILE__ and __LINE__ will be correctly set where we use our wrapper macro \u2013 i.e. they will not always be set to the same filename and linenumber of the header file where we defined our macro. Variable Argument Macros \u00b6 GCC Allows us to define variable argument macros \u2013 also really handy for logging. Remembering the above, we could always define a macro, something like: #ifndef LOG_H #define LOG_H #include <stdio.h> #define DBG(x, ...) fprintf( stdout, \"%s: \" x \"\\n\", \"DBG\", ##__VA_ARGS__) #endif This works well, it means we can just add this to our code. It takes advantage of the fact that string constants placed next to each other are concatenated by the compiler. /* ... */ DBG ( \"This was an error! %s\" , errorString ); /* ... */ But when we want that error message to show us where we will find it in the source code, we can define debug differently: #ifndef LOG_H #define LOG_H #include <stdio.h> #define DBG(x, ...) fprintf( stdout, \"%s:%s:%d: \" x \"\\n\", \"DBG\", __func__, __LINE__, ##__VA_ARGS__) #endif So now we have a pretty good debug definition. However, the usual approach to building software projects is to have a debug build where this debug information is printed, and a release version where this debug information is not printed. For the best performing release version we ideally just want DBG() to be blank. So we can test for a DEBUG definition and choose whether to use a functional DBG() or not: #ifndef LOG_H #define LOG_H #if DEBUG #include <stdio.h> #define DBG(x, ...) fprintf( stdout, \"%s:%s:%d: \" x \"\\n\", \"DBG\", __func__, __LINE__, ##__VA_ARGS__) #else #define DBG(x, ...) #endif #endif There are more problems, we\u2019re not done yet! Consider the common C programming idiom: if ( something ) DBG ( \"Something should really be nothing, but it's %d\" , something ); free( buffer ); When this is compiled in debug mode (i.e. DEBUG is defined), everything works fine because DBG compiles to a C statement. However, in release mode DBG() is compiled to nothing and we end up with a memory leak because the code in release mode becomes: if ( something ) free ( buffer ); Definitely not what we intended! Some may say that this is a lesson learnt in always putting code block sharp braces after an if statement. I disagree with that! What it does teach us is that textual substitution by the C pre-processor should be considered carefully! Using sharp braces to block a single statement after an if statement makes the code much less readable for me. So we end up modifying the code to the following definitions in the header: #ifndef LOG_H #define LOG_H #if DEBUG #include <stdio.h> #define DBG(x, ...) { fprintf( stdout, \"%s:%s:%d: \" x \"\\n\", \"DBG\", __func__, __LINE__, ##__VA_ARGS__) } #else #define DBG(x, ...) { } #endif #endif The more observant (perhaps sad?) people will observe that now we\u2019re inserting a semi-colon after a code block closing sharp bracket. But this is totally legal to end a statement. So with this version, we shoudl br all good to go? Not Quite! There\u2019s a place where a semi-colon after a block breaks compilation, and that\u2019s in an if\u2026else block. A semi-colon cannot be between the end of an if block statement and an else statement. So the following will break: if ( something ) DBG ( \"Opps, there'll be an error here!\" ); else DBG ( \"Not Something!\" ); There is a quick trick we can perform to get around this, ensuring that having the semi-colon at the end of the line will always perform the same in all situations, and that\u2019s enclosing everything in a do...while loop: #ifndef LOG_H #define LOG_H #if DEBUG #include <stdio.h> #define DBG(x, ...) do { fprintf( stdout, \"%s:%s:%d: \" x \"\\n\", \"DBG\", __func__, \\ __LINE__, ##__VA_ARGS__) } while (0) #else #define DBG(x, ...) do { } while(0); #endif #endif The do...while loop guarantee\u2019s at least one execution of the statement block. The compiler should drop the empty statement block as there\u2019s nothing to do. The one with the logging functionality should also boil down through the compiler to just the single fprintf call with no further checking around it. Otherwise, the compiler is not very optimal! This solution works in all cases and should allow us to write seamless debug printing code. Now you can add different logging levels and perhaps an error macro which will log to stderr instead of stdout.","title":"Logging with gcc"},{"location":"open-software/logging-with-gcc/#logging-with-gcc","text":"Usually it\u2019s one of the first things we need to set up - some logging functions so we can see what our program\u2019s doing! Here\u2019s some useful information regarding doing just that. Like a cheat sheet - only shorter!","title":"Logging with gcc"},{"location":"open-software/logging-with-gcc/#standard-pre-defined-macros","text":"GCC Defines several macros that are useful when logging. They include: __FILE__ = A null terminated string of type char[] which is set to the currently compiling source code filename. __func__ = A null terminated string of type char[] which is set to the current function name context. __LINE__ = An integer which is always the current line number of the source code currently being compiled. It\u2019s worth noting quickly, that we can define macros which include these macros in a header file somewhere, __FILE__ and __LINE__ will be correctly set where we use our wrapper macro \u2013 i.e. they will not always be set to the same filename and linenumber of the header file where we defined our macro.","title":"Standard Pre-Defined macros"},{"location":"open-software/logging-with-gcc/#variable-argument-macros","text":"GCC Allows us to define variable argument macros \u2013 also really handy for logging. Remembering the above, we could always define a macro, something like: #ifndef LOG_H #define LOG_H #include <stdio.h> #define DBG(x, ...) fprintf( stdout, \"%s: \" x \"\\n\", \"DBG\", ##__VA_ARGS__) #endif This works well, it means we can just add this to our code. It takes advantage of the fact that string constants placed next to each other are concatenated by the compiler. /* ... */ DBG ( \"This was an error! %s\" , errorString ); /* ... */ But when we want that error message to show us where we will find it in the source code, we can define debug differently: #ifndef LOG_H #define LOG_H #include <stdio.h> #define DBG(x, ...) fprintf( stdout, \"%s:%s:%d: \" x \"\\n\", \"DBG\", __func__, __LINE__, ##__VA_ARGS__) #endif So now we have a pretty good debug definition. However, the usual approach to building software projects is to have a debug build where this debug information is printed, and a release version where this debug information is not printed. For the best performing release version we ideally just want DBG() to be blank. So we can test for a DEBUG definition and choose whether to use a functional DBG() or not: #ifndef LOG_H #define LOG_H #if DEBUG #include <stdio.h> #define DBG(x, ...) fprintf( stdout, \"%s:%s:%d: \" x \"\\n\", \"DBG\", __func__, __LINE__, ##__VA_ARGS__) #else #define DBG(x, ...) #endif #endif There are more problems, we\u2019re not done yet! Consider the common C programming idiom: if ( something ) DBG ( \"Something should really be nothing, but it's %d\" , something ); free( buffer ); When this is compiled in debug mode (i.e. DEBUG is defined), everything works fine because DBG compiles to a C statement. However, in release mode DBG() is compiled to nothing and we end up with a memory leak because the code in release mode becomes: if ( something ) free ( buffer ); Definitely not what we intended! Some may say that this is a lesson learnt in always putting code block sharp braces after an if statement. I disagree with that! What it does teach us is that textual substitution by the C pre-processor should be considered carefully! Using sharp braces to block a single statement after an if statement makes the code much less readable for me. So we end up modifying the code to the following definitions in the header: #ifndef LOG_H #define LOG_H #if DEBUG #include <stdio.h> #define DBG(x, ...) { fprintf( stdout, \"%s:%s:%d: \" x \"\\n\", \"DBG\", __func__, __LINE__, ##__VA_ARGS__) } #else #define DBG(x, ...) { } #endif #endif The more observant (perhaps sad?) people will observe that now we\u2019re inserting a semi-colon after a code block closing sharp bracket. But this is totally legal to end a statement. So with this version, we shoudl br all good to go? Not Quite! There\u2019s a place where a semi-colon after a block breaks compilation, and that\u2019s in an if\u2026else block. A semi-colon cannot be between the end of an if block statement and an else statement. So the following will break: if ( something ) DBG ( \"Opps, there'll be an error here!\" ); else DBG ( \"Not Something!\" ); There is a quick trick we can perform to get around this, ensuring that having the semi-colon at the end of the line will always perform the same in all situations, and that\u2019s enclosing everything in a do...while loop: #ifndef LOG_H #define LOG_H #if DEBUG #include <stdio.h> #define DBG(x, ...) do { fprintf( stdout, \"%s:%s:%d: \" x \"\\n\", \"DBG\", __func__, \\ __LINE__, ##__VA_ARGS__) } while (0) #else #define DBG(x, ...) do { } while(0); #endif #endif The do...while loop guarantee\u2019s at least one execution of the statement block. The compiler should drop the empty statement block as there\u2019s nothing to do. The one with the logging functionality should also boil down through the compiler to just the single fprintf call with no further checking around it. Otherwise, the compiler is not very optimal! This solution works in all cases and should allow us to write seamless debug printing code. Now you can add different logging levels and perhaps an error macro which will log to stderr instead of stdout.","title":"Variable Argument Macros"},{"location":"open-software/posix-shell-scripting/","text":"Posix Shell Scripting \u00b6 Some neat tricks and methods for scripting. Directory of the Script \u00b6 At the start of my scripts is always the same line: scriptdir=$(CDPATH= cd -- \"$(dirname -- \"$0\")\" && pwd) Looks odd? Well, let's explain it and then you'll be enlightened. This is very portable CDPATH= Unset the CDPATH environment variable to make sure we don't search outside of where we tell cd to go. If you man cd you'll possibly find that CDPATH is an environment variable that can be used like as a search list, much like the PATH environment variable. We don't want surprises. cd -- Change directory. The double heiphen marks the end of options input to the cd command so that directories with odd names that start with a heiphen and will be mistaken for options instead of the directory name don't cause problems. $() Use a subshell - substitutes the output of the command run in the subshell dirname -- \"$0\" Output the directory name of the command line used to execute the shell script (which is in \"${0}\" ). && pwd Once the current working directory has been changed to the script's directory we run the pwd tool to get the absolute path of the program's working directory. Input Arguments \u00b6 There are many ways to process input arguments for scripts. You can check out the man page for the getopts command. I prefer the while loop approach however While Loop Arguments \u00b6 while [ $# -gt 0 ] ; do case \" ${ 1 } \" in --clean ) echo \"CLEANING\" ;; --verbose | -v ) echo \"VERBOSE\" ;; --file | -f ) shift echo \"FILE: ${ 1 } \" ;; esac shift done Some examples of this in use: [bjs@localhost bin]$ ./collect-static [bjs@localhost bin]$ ./collect-static --clean CLEANING [bjs@localhost bin]$ ./collect-static --verbose --clean VERBOSE CLEANING [bjs@localhost bin]$ ./collect-static -v --clean VERBOSE CLEANING [bjs@localhost bin]$ ./collect-static -v --clean --file hello.txt VERBOSE CLEANING FILE: hello.txt Looping \u00b6 Various ways of looping depending on the data set. Multiple Line Variables \u00b6 Sometimes we end up with a multiline list in a variable and we want to do something for each item in the list. Looping over this list portably is straight forward using a HEREDOC directed into a while loop: files=$(ls -1 /etc) while read -r file; do echo \"Do something with ${file}\" done << EOF ${files} EOF Output: Do something with abrt Do something with adjtime Do something with aliases Do something with alsa Do something with alternatives Do something with anaconda ... Space Separated Variables \u00b6 Looping over a space-separated list is a bit easier and can be done in a for loop. Can't have any spaces in the list items though. packages=\"gcc gcc-g++ gdb autotools automake\" for package in ${packages}; do echo \"Do something with ${package}\" done Output: Do something with gcc Do something with gcc-g++ Do something with gdb Do something with autotools Do something with automake Heredocs \u00b6 These extremely useful things can be used in many places. Some examples of how they can be used below. I end up using them for writing configuration files often. Write File from Heredoc \u00b6 Variables are substituted normally when using a heredoc with variables inside it: language=en-GB cat << EOF > config.yaml language: ${language} EOF Output [brian@brian-2920x ~]$ cat config.yaml language: en-GB If you single quote the heredoc variables are not substituted: ```bash language=en-GB cat << 'EOF' > config.yaml language: ${language} EOF Output [brian@brian-2920x ~]$ cat config.yaml language: ${language}","title":"Posix Shell Scripting"},{"location":"open-software/posix-shell-scripting/#posix-shell-scripting","text":"Some neat tricks and methods for scripting.","title":"Posix Shell Scripting"},{"location":"open-software/posix-shell-scripting/#directory-of-the-script","text":"At the start of my scripts is always the same line: scriptdir=$(CDPATH= cd -- \"$(dirname -- \"$0\")\" && pwd) Looks odd? Well, let's explain it and then you'll be enlightened. This is very portable CDPATH= Unset the CDPATH environment variable to make sure we don't search outside of where we tell cd to go. If you man cd you'll possibly find that CDPATH is an environment variable that can be used like as a search list, much like the PATH environment variable. We don't want surprises. cd -- Change directory. The double heiphen marks the end of options input to the cd command so that directories with odd names that start with a heiphen and will be mistaken for options instead of the directory name don't cause problems. $() Use a subshell - substitutes the output of the command run in the subshell dirname -- \"$0\" Output the directory name of the command line used to execute the shell script (which is in \"${0}\" ). && pwd Once the current working directory has been changed to the script's directory we run the pwd tool to get the absolute path of the program's working directory.","title":"Directory of the Script"},{"location":"open-software/posix-shell-scripting/#input-arguments","text":"There are many ways to process input arguments for scripts. You can check out the man page for the getopts command. I prefer the while loop approach however","title":"Input Arguments"},{"location":"open-software/posix-shell-scripting/#while-loop-arguments","text":"while [ $# -gt 0 ] ; do case \" ${ 1 } \" in --clean ) echo \"CLEANING\" ;; --verbose | -v ) echo \"VERBOSE\" ;; --file | -f ) shift echo \"FILE: ${ 1 } \" ;; esac shift done Some examples of this in use: [bjs@localhost bin]$ ./collect-static [bjs@localhost bin]$ ./collect-static --clean CLEANING [bjs@localhost bin]$ ./collect-static --verbose --clean VERBOSE CLEANING [bjs@localhost bin]$ ./collect-static -v --clean VERBOSE CLEANING [bjs@localhost bin]$ ./collect-static -v --clean --file hello.txt VERBOSE CLEANING FILE: hello.txt","title":"While Loop Arguments"},{"location":"open-software/posix-shell-scripting/#looping","text":"Various ways of looping depending on the data set.","title":"Looping"},{"location":"open-software/posix-shell-scripting/#multiple-line-variables","text":"Sometimes we end up with a multiline list in a variable and we want to do something for each item in the list. Looping over this list portably is straight forward using a HEREDOC directed into a while loop: files=$(ls -1 /etc) while read -r file; do echo \"Do something with ${file}\" done << EOF ${files} EOF Output: Do something with abrt Do something with adjtime Do something with aliases Do something with alsa Do something with alternatives Do something with anaconda ...","title":"Multiple Line Variables"},{"location":"open-software/posix-shell-scripting/#space-separated-variables","text":"Looping over a space-separated list is a bit easier and can be done in a for loop. Can't have any spaces in the list items though. packages=\"gcc gcc-g++ gdb autotools automake\" for package in ${packages}; do echo \"Do something with ${package}\" done Output: Do something with gcc Do something with gcc-g++ Do something with gdb Do something with autotools Do something with automake","title":"Space Separated Variables"},{"location":"open-software/posix-shell-scripting/#heredocs","text":"These extremely useful things can be used in many places. Some examples of how they can be used below. I end up using them for writing configuration files often.","title":"Heredocs"},{"location":"open-software/posix-shell-scripting/#write-file-from-heredoc","text":"Variables are substituted normally when using a heredoc with variables inside it: language=en-GB cat << EOF > config.yaml language: ${language} EOF Output [brian@brian-2920x ~]$ cat config.yaml language: en-GB If you single quote the heredoc variables are not substituted: ```bash language=en-GB cat << 'EOF' > config.yaml language: ${language} EOF Output [brian@brian-2920x ~]$ cat config.yaml language: ${language}","title":"Write File from Heredoc"},{"location":"open-software/working-with-the-screen-command/","text":"Working with the Screen Command \u00b6 Various times when working on remote servers, they're configured to automatically log you out after a certain period of inactivity. This can be annoying to say the least when you're running a command and it takes a long time to complete. screen is a good way of running that command because even if you've been logged out, the screen session stays active and the command carries on executing within the screen session. It's another useful tool to have in your back pocket. Let's have a look at how we can start managing screen sessions. Starting a New Screen Session \u00b6 In order to start a new screen session, you simply type the command screen with no parameters. You are then presented with a screen session that looks very much like your standard terminal. There is a difference though - screen only keeps what you can see on your terminal. You cannot scroll back through output that has run off of the screen like you can with a terminal. So if you need the output, or might want to check something in the output, make sure any commands you run pipe or redirect their output to a file you can investigate after the command has completed. Detaching From a Screen Session \u00b6 While a long running command is running, or at any other time, you can detach from the screen session to return to your terminal. Press Ctrl-A and release, then press d to detach. Detaching from a session does not stop the screen session running. Listing and Reattaching to Screen Sessions \u00b6 You can see what screen sessions are currently running for the current user using screen -ls . This will list the sessions that are currently running. You can re-attach to any session in the list by running screen -r full.session.id . Killing a Screen Session \u00b6 When you've finished with a screen session, you can kill it so it is no longer running, Press Ctrl-A and release, then press k to kill the screen session. Confirm the question of Do you want to kill this session by pressing y . More Information \u00b6 screen is really powerful. There's lots more you can do with it. For the definitive guide, type man screen to read the manual for screen. There's loads of information in there. It makes a great serial line monitor for example when you're trying to debug serial communications.","title":"Working with the Screen Command"},{"location":"open-software/working-with-the-screen-command/#working-with-the-screen-command","text":"Various times when working on remote servers, they're configured to automatically log you out after a certain period of inactivity. This can be annoying to say the least when you're running a command and it takes a long time to complete. screen is a good way of running that command because even if you've been logged out, the screen session stays active and the command carries on executing within the screen session. It's another useful tool to have in your back pocket. Let's have a look at how we can start managing screen sessions.","title":"Working with the Screen Command"},{"location":"open-software/working-with-the-screen-command/#starting-a-new-screen-session","text":"In order to start a new screen session, you simply type the command screen with no parameters. You are then presented with a screen session that looks very much like your standard terminal. There is a difference though - screen only keeps what you can see on your terminal. You cannot scroll back through output that has run off of the screen like you can with a terminal. So if you need the output, or might want to check something in the output, make sure any commands you run pipe or redirect their output to a file you can investigate after the command has completed.","title":"Starting a New Screen Session"},{"location":"open-software/working-with-the-screen-command/#detaching-from-a-screen-session","text":"While a long running command is running, or at any other time, you can detach from the screen session to return to your terminal. Press Ctrl-A and release, then press d to detach. Detaching from a session does not stop the screen session running.","title":"Detaching From a Screen Session"},{"location":"open-software/working-with-the-screen-command/#listing-and-reattaching-to-screen-sessions","text":"You can see what screen sessions are currently running for the current user using screen -ls . This will list the sessions that are currently running. You can re-attach to any session in the list by running screen -r full.session.id .","title":"Listing and Reattaching to Screen Sessions"},{"location":"open-software/working-with-the-screen-command/#killing-a-screen-session","text":"When you've finished with a screen session, you can kill it so it is no longer running, Press Ctrl-A and release, then press k to kill the screen session. Confirm the question of Do you want to kill this session by pressing y .","title":"Killing a Screen Session"},{"location":"open-software/working-with-the-screen-command/#more-information","text":"screen is really powerful. There's lots more you can do with it. For the definitive guide, type man screen to read the manual for screen. There's loads of information in there. It makes a great serial line monitor for example when you're trying to debug serial communications.","title":"More Information"},{"location":"open-software/arduino/esp32-mqtt-tutorial/","text":"ESP32 MQTT Tutorial \u00b6 This is a tutorial for getting an ESP32 set up as an Amazon IoT device using MQTT to communicate. Install Arduino IDE \u00b6 No matter what your platform is, you'll need the Ardiuno IDE installed. It can be installed on many platforms including Linux, Windows and MAC. Install ESP32 Support \u00b6 Once installed, plug the ESP32 board into a USB port and start the Arduino IDE. Select File->Preferences and then enter https://dl.espressif.com/dl/package_esp32_index.json in the Additional Board Manager URLs field. Click OK Select Tools->Board->Board Manager Using the search feature, click Install for the ESP32 board support. NOTE: The ESP tools require the pyserial package to be installed in your default python installation. Depending on your system you can either use pip to install the pyserial package with something like pip install --upgrade --user pyserial or else you can get your distribution's packaged version of the python package with something like sudo dnf install -y python3-pyserial on Fedora for example. Select the board (depending on what board you have!). For me, I've been posted a board to work with. I've selected the standard ESP Dev Module as when I select Tools->Get Board Info the board comes back as unknown and so cannot be automatically detected as a supported Arduino board. When you've selected your board, there is already an empty sketch loaded. You can now simply click Upload in order to compile the sketch and upload the sketch to the ESP32 device. You should get a success message along the lines of \"Done uploading\" in the Arduino IDE. Debug Output \u00b6 Tip If you're already familiar with Arduino and the IDE, etc. then you can safely skip this section. To get started with the ESP (If you're not familiar with Sketches and Libraries) let's look at getting some debug output from the Sketch (Program) to prove to ourselves that the device is working and running our sketch. The default sketch looks like this: void setup () { // put your setup code here, to run once: } void loop () { // put your main code here, to run repeatedly: } Now, let's add some detail to make sure. Let's make use of a useful feature - that we have Serial communications available to us from within Arduino. From the documentation we can see the functions available for the Serial module. Our new code looks pretty straight forward: 110-esp-arduino-debug-output.ino 110-esp-arduino-debug-output.ino void setup () { // put your setup code here, to run once: Serial . begin ( 115200 ); Serial . print ( \"Hello World! \\n \" ); } void loop () { // put your main code here, to run repeatedly: } In order to see the output from our program open the Tools->Serial Monitor - the COM port should be set to the same one the board is set to. The BAUD rate might have to be adjusted for your board. Make sure the BAUD rate is set to the same as your board communications so you get to see all of the output. Now, when we Upload the sketch to the ESP32, we can see the Hello World! output. We're done getting set up with Arduino and our board Connecting WiFi \u00b6 First things first. In order to connect to an MQTT stream, we'll first need to be able to connect the ESP32 to a WiFi connection so we can connect to the internet. As part of the ESP32 support we installed earlier, there was a library installed which is available to the sketch called WiFiClientSecure which provides a secure web client. You can add this library to a sketch by selecting Sketch->Include Library->WiFiClientSecure . Information about this Arduino library can be found on GitHub: https://github.com/espressif/arduino-esp32/tree/master/libraries/WiFiClientSecure The first thing we need to do is get connected to WiFi. Let's modify the Sketch so we connect to the WiFi. We'll use the documented example as a reference sketch. However, we don't need a root CA in place for the moment as we've not created our own certificate authority or have any CA we need to trust. 120-esp-arduino-wifi-connection.ino 120-esp-arduino-wifi-connection.ino #include <WiFiClientSecure.h> const char * ssid = \"your-ssid\" ; const char * wifipassword = \"your-password\" ; WiFiClientSecure wifi ; void setup () { // put your setup code here, to run once: Serial . begin ( 115200 ); Serial . print ( \"Connecting to SSID: \" ); Serial . println ( ssid ); WiFi . begin ( ssid , wifipassword ); while ( WiFi . status () != WL_CONNECTED ) { Serial . print ( \".\" ); delay ( 1000 ); } Serial . print ( \"Connected to \" ); Serial . println ( ssid ); } void loop () { // put your main code here, to run repeatedly: Serial . print ( \":\" ); delay ( 1000 ); } Go ahead and run that sketch, remembering to change the ssid and wifipassword variables to suitable settings for your network. When you run the sketch, you will see output in the Serial Monitor similar to the following: Connecting to SSID: your-ssid .Connected to your-ssid :::::::::: From here we can connect to the internet and make web queries, etc. We'd do that with the client object. For now, we don't need to do anything else really, we just need to get on with looking at moving forward with MQTT. MQTT Library \u00b6 We can install a library in the Arduino IDE for the MQTT client to get us MQTT support. In the Arduino IDE click Tools->Manage Libraries... and enter MQTT into the search box. Click Install to install the library. Make sure you use the Jo\u00ebl G\u00e4hwiler MQTT library. Using a complete copy of a sketch from the MQTT library means that we can get connected to an MQTT client that is provided as a test ground. 130-esp-arduino-mqtt-example-shiftr.io.ino 130-esp-arduino-mqtt-example-shiftr.io.ino // This example uses an ESP32 Development Board // to connect to shiftr.io. // // You can check on your device after a successful // connection here: https://shiftr.io/try. // // by Jo\u00ebl G\u00e4hwiler // https://github.com/256dpi/arduino-mqtt #include <WiFiClientSecure.h> #include <MQTT.h> const char ssid [] = \"mrbanks\" ; const char pass [] = \"mvepfgzw\" ; WiFiClientSecure net ; MQTTClient client ( 1024 ); unsigned long lastMillis = 0 ; void connect () { Serial . print ( \"checking wifi...\" ); while ( WiFi . status () != WL_CONNECTED ) { Serial . print ( \".\" ); delay ( 1000 ); } Serial . print ( \" \\n connecting...\" ); while ( ! client . connect ( \"bsidebotham\" , \"try\" , \"try\" )) { Serial . print ( \".\" ); delay ( 1000 ); } Serial . println ( \" \\n connected!\" ); client . subscribe ( \"/hello\" ); // client.unsubscribe(\"/hello\"); } void messageReceived ( String & topic , String & payload ) { Serial . println ( \"incoming: \" + topic + \" - \" + payload ); // Note: Do not use the client in the callback to publish, subscribe or // unsubscribe as it may cause deadlocks when other things arrive while // sending and receiving acknowledgments. Instead, change a global variable, // or push to a queue and handle it in the loop after calling `client.loop()`. } void setup () { Serial . begin ( 115200 ); WiFi . begin ( ssid , pass ); // Note: Local domain names (e.g. \"Computer.local\" on OSX) are not supported // by Arduino. You need to set the IP address directly. // // MQTT brokers usually use port 8883 for secure connections. client . begin ( \"broker.shiftr.io\" , 8883 , net ); client . onMessage ( messageReceived ); connect (); } void loop () { client . loop (); delay ( 10 ); // <- fixes some issues with WiFi stability // publish a message roughly every second. if ( millis () - lastMillis > 1000 ) { if ( ! client . connected ()) { Serial . print ( \"lastError: \" ); Serial . println ( client . lastError ()); connect (); } lastMillis = millis (); client . publish ( \"/hello\" , \"world\" ); } } Warning I created a GitHub issue for the fact that the example ESP32 code didn't work out-of-the box on an ESP32 development board The above code is changed slightly from the actual example code. The buffer size for the MQTT client must be increased to get past the first message received from the shiftr.io MQTT server. After that first message, we receive the correct /hello world topic and message from the server which we subscribe to. For more information about MQTT, you can see the MQTT 3.1.1 documentation . Amazon IoT \u00b6 Tip In this section, we'll make heavy use of the AWS documentation The AWS IoT service allows us to create secure MQTT endpoints for our own Internet-of-Things devices. Let's have a look at how to get our now-MQTT-enabled ESP32 connecting to our own AWS IoT service. The first task is to create a Thing - that is, a unique device that will be able to connect to the service that we create later. Click Manage Click Register a thing Name your thing something that is pertinent to this tutorial. I've gone for ESP32Example so that's what'll be in use throughout the rest of this tutorial. Click Next after you've inserted a name. There's no need to create a group or anything at this point. Certificates. This is always a fun subject. You can end up tying yourself in knots with certificates. For the tutorial, I say - use the one-click certificate creation. That's what I'll do here for this tutorial, but generally for business I'd be using a CSR or (more likely) my own CA for IoT devices. Using your own CA puts you in a much better place. Click One-click certificate creation \"Create certificate\" Pay attention to the next page - you only get one chance to download the public and private keys. Once you move away from the next AWS page you will not be able to download them again. Make sure you keep the certificate and private key out of other people's reach. Download all three certificates Go ahead and download the certificates and keys that have been created for your device. You'll also notice that there is a link to the root CA for AWS IoT. Right Click this link and open it in a new tab and contains various options for the root CA certificate that we need to trust in order to gain secure connectivity to AWS IoT services. Although RSA is getting a slightly bad wrap these days, AWS have a 2048 bit RSA key certificate listed along with some Euclidean Curve (ECC) key certificates. ECC keys require considerable more processing effort than RSA - so stick with the RSA key certificates where you can. For this tutorial, I am going to get the 2048 bit RSA AWS Root CA . Download the AWS Root CA and keep it alongside the other certificates. In the original certificate page, Click Activate on the certificate, so that the box now changes to Deactivate. The certificates are now active. Click Done , because we cant' yet Attach a policy as we've not created any IoT policies yet. Security Policy \u00b6 From the main screen, in the left-hand navigation pane Click Secure and then Policies from the Secure sub-menu to start creating a new security policy which we will attach to the certificate we've just created. Together the policy and the certificate will give the new IoT thing permissions to do something (Usually subscribe to and publish to MQTT channels). Click Create a policy which will be our first policy. Give the policy a meaningful name. For the purposes of this tutorial I'm going to call this policy ESP32ExamplePermissions which is a bit poor as it doesn't describe what the policy does. Generally a policy should hint at what it provides rather than be device-specific. But, as we're just working through getting something up and running that we can tweak with later, this will be fine. Specify the Action as iot:Connect and then leave the ARN set automatically. The ARN has a set format which includes a region and your account number. Set the Effect to Allow . Now - move to the advanced mode ( Click Advanced... ) - this allows us to paste in the JSON source for this policy. The reason for doing the first one is to We will adjust the ARN to be dynamic so it's not tied to one thing. This saves us tying the policy to a device-specific ARN. Replace the and settings in the JSON below to the automatically-generated ones from the previous step so this policy is good for your account. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Connect\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:client/${iot:Connection.Thing.ThingName}\" }, { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Publish\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/update\" }, { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Subscribe\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/update/accepted\" }, { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Receive\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/update/accepted\" }, { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Subscribe\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/update/rejected\" }, { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Receive\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/update/rejected\" } ] } We now have to attach the Policy to the Certificate we created earlier for the IoT Thing. Click Secure->Certificates from the left hand navigation pane. We can see the certificate that we created a few steps ago for our first IoT Thing. Hover over it and click the checkbox on the certificate. From the Actions menu that appears, select Attach Policy From the dialog that opens, select the new policy that we just created, ESP32ExamplePermissions : Click Attach and we get a confirmation toast that the policy has been attached successfully. Now that the security policy is attached to the certificate, we need to attach the certificate to the Thing. From the Actions menu for the certificate which should still be available (If it isn't, select the certificate again as above) select Attach thing From the dialog that opens, select the Thing that we created earlier. Click Attach and we get another toast message saying that the certificate was attached to the Thing successfully. IoT Core URL \u00b6 From the AWS Documentation of IoT Core we can see that to find the URL and port number that MQTT should connect to for our new thing, we should use the describe-endpoint command. This command is run against your AWS account by using the AWS CLI tool and an AWS Access Key (With sufficient permissions to describe-endpoint ) Create IAM Access Key \u00b6 Tip You can skip this section if you've already got an AWS Access Key and the AWS CLI tools. We need to create an Access Key which will allow an IAM user to perform programatic tasks on our AWS account. If you're still using the root account credentials to do things - STOP! Change to make yourself an IAM administrator role and don't bother logging in as the root account any longer. In the AWS Console select the IAM service and click Users, following by the User which you currently use within the AWS Console. From the user summary page, click Security Credentials and then Create access key . You need to click Show to be able to see the Secret access key and you need to put that somewhere safe. I recommend some secure password vault like Lastpass or else Hashicorp's Vault. Close when you've copied out the access key id and the Secret access key. We need the aws CLI tools. I'm working on Fedora, so I do dnf search aws to find the package which it turns out is awscli and so I can install the package with sudo dnf install awscli . In order to use the AWS CLI tools, you have to inform the AWS CLI tool about the access key that enables it to access your account. This is easiest done by using the configure command: [brian@brian-2920x ~]$ aws configure AWS Access Key ID [None]: AKIA2J57***********F AWS Secret Access Key [None]: I**************************************E Default region name [None]: eu-west-2 Default output format [None]: Make sure you paste in the secrets here. On Linux this stores your AWS secrets in plain text in a file in your home directory ~/.aws/credentials - which is why these days I always have drive encryption enabled for my home folder. At least at rest the information on the disk is encrypted! Use describe-endpoint \u00b6 Using the AWS CLI you can get the account-specific URL endpoint for your IoT. From the documentation for the AWS IoT describe-endpoint command , we will use the endpoint that returns an ATS signed data endpoint. This works with the AWS root certificate we collected earlier. If you want to use a Verisign signed endpoint instead, you'll have to adjust the Root CA you use. In this tutorial we'll use ATS signed. $ aws iot describe-endpoint --endpoint-type 'iot:Data-ATS' { \"endpointAddress\": \"a2**********3d-ats.iot.eu-west-2.amazonaws.com\" } This URL is the endpoint we'll configure our Thing to connect to MQTT. According to the documentation port 8883 is used for secure MQTT connections on this URL. Connect to AWS IoT to Publish MQTT \u00b6 Now we should have everything we need to connect to AWS IoT with our new thing and we should be able to subscribe to and publish messages to the same topic. As things in the Sketch get more complicated, we want to make sure we see output from any libraries we're using. Make sure to set the Core Debug Level setting to Warning or more verbosity so you can debug issues more easily: 140-esp32-arduino-mqtt-connect-to-aws-iot.ino 140-esp32-arduino-mqtt-connect-to-aws-iot.ino is a new sketch that includes the AWS configuration data that we've collected while setting up our AWS IoT service. In order to use the sketch, you'll need to fill in your AWS IoT ATS endpoint and the Thing Certificate and Private Key that you gathered earlier. If you've used all the same values as me you can leave the rest alone, otherwise you'll have to adjust the topic and/or device name. Setting AWS Root CA Setting Thing Certificate Setting the Thing Private Key Beginning MQTT Client a2**********3d-ats.iot.eu-west-2.amazonaws.com:8883 checking wifi...connecting... connected! Subscribing to $aws/things/ESP32Example/shadow/update Subscribing to $aws/things/ESP32Example/shadow/update/accepted Subscribing to $aws/things/ESP32Example/shadow/update/rejected Publishing State... incoming: $aws/things/ESP32Example/shadow/update/accepted - {\"state\":{\"reported\":{\"color\":\"red\",\"power\":\"on\"}},\"metadata\":{\"reported\":{\"color\":{\"timestamp\":1587417221},\"power\":{\"timestamp\":1587417221}}},\"version\":159,\"timestamp\":1587417221} The topics that are used in this example come from the AWS IoT documentation and are special reserved MQTT topics which allow IoT to keep a shadow copy of the Device's state. It is common to have this sort of shadowing for the device. If, for some reason the real device is not available, services will get the shadow device data instead.","title":"ESP32 MQTT Tutorial"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#esp32-mqtt-tutorial","text":"This is a tutorial for getting an ESP32 set up as an Amazon IoT device using MQTT to communicate.","title":"ESP32 MQTT Tutorial"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#install-arduino-ide","text":"No matter what your platform is, you'll need the Ardiuno IDE installed. It can be installed on many platforms including Linux, Windows and MAC.","title":"Install Arduino IDE"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#install-esp32-support","text":"Once installed, plug the ESP32 board into a USB port and start the Arduino IDE. Select File->Preferences and then enter https://dl.espressif.com/dl/package_esp32_index.json in the Additional Board Manager URLs field. Click OK Select Tools->Board->Board Manager Using the search feature, click Install for the ESP32 board support. NOTE: The ESP tools require the pyserial package to be installed in your default python installation. Depending on your system you can either use pip to install the pyserial package with something like pip install --upgrade --user pyserial or else you can get your distribution's packaged version of the python package with something like sudo dnf install -y python3-pyserial on Fedora for example. Select the board (depending on what board you have!). For me, I've been posted a board to work with. I've selected the standard ESP Dev Module as when I select Tools->Get Board Info the board comes back as unknown and so cannot be automatically detected as a supported Arduino board. When you've selected your board, there is already an empty sketch loaded. You can now simply click Upload in order to compile the sketch and upload the sketch to the ESP32 device. You should get a success message along the lines of \"Done uploading\" in the Arduino IDE.","title":"Install ESP32 Support"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#debug-output","text":"Tip If you're already familiar with Arduino and the IDE, etc. then you can safely skip this section. To get started with the ESP (If you're not familiar with Sketches and Libraries) let's look at getting some debug output from the Sketch (Program) to prove to ourselves that the device is working and running our sketch. The default sketch looks like this: void setup () { // put your setup code here, to run once: } void loop () { // put your main code here, to run repeatedly: } Now, let's add some detail to make sure. Let's make use of a useful feature - that we have Serial communications available to us from within Arduino. From the documentation we can see the functions available for the Serial module. Our new code looks pretty straight forward: 110-esp-arduino-debug-output.ino 110-esp-arduino-debug-output.ino void setup () { // put your setup code here, to run once: Serial . begin ( 115200 ); Serial . print ( \"Hello World! \\n \" ); } void loop () { // put your main code here, to run repeatedly: } In order to see the output from our program open the Tools->Serial Monitor - the COM port should be set to the same one the board is set to. The BAUD rate might have to be adjusted for your board. Make sure the BAUD rate is set to the same as your board communications so you get to see all of the output. Now, when we Upload the sketch to the ESP32, we can see the Hello World! output. We're done getting set up with Arduino and our board","title":"Debug Output"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#connecting-wifi","text":"First things first. In order to connect to an MQTT stream, we'll first need to be able to connect the ESP32 to a WiFi connection so we can connect to the internet. As part of the ESP32 support we installed earlier, there was a library installed which is available to the sketch called WiFiClientSecure which provides a secure web client. You can add this library to a sketch by selecting Sketch->Include Library->WiFiClientSecure . Information about this Arduino library can be found on GitHub: https://github.com/espressif/arduino-esp32/tree/master/libraries/WiFiClientSecure The first thing we need to do is get connected to WiFi. Let's modify the Sketch so we connect to the WiFi. We'll use the documented example as a reference sketch. However, we don't need a root CA in place for the moment as we've not created our own certificate authority or have any CA we need to trust. 120-esp-arduino-wifi-connection.ino 120-esp-arduino-wifi-connection.ino #include <WiFiClientSecure.h> const char * ssid = \"your-ssid\" ; const char * wifipassword = \"your-password\" ; WiFiClientSecure wifi ; void setup () { // put your setup code here, to run once: Serial . begin ( 115200 ); Serial . print ( \"Connecting to SSID: \" ); Serial . println ( ssid ); WiFi . begin ( ssid , wifipassword ); while ( WiFi . status () != WL_CONNECTED ) { Serial . print ( \".\" ); delay ( 1000 ); } Serial . print ( \"Connected to \" ); Serial . println ( ssid ); } void loop () { // put your main code here, to run repeatedly: Serial . print ( \":\" ); delay ( 1000 ); } Go ahead and run that sketch, remembering to change the ssid and wifipassword variables to suitable settings for your network. When you run the sketch, you will see output in the Serial Monitor similar to the following: Connecting to SSID: your-ssid .Connected to your-ssid :::::::::: From here we can connect to the internet and make web queries, etc. We'd do that with the client object. For now, we don't need to do anything else really, we just need to get on with looking at moving forward with MQTT.","title":"Connecting WiFi"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#mqtt-library","text":"We can install a library in the Arduino IDE for the MQTT client to get us MQTT support. In the Arduino IDE click Tools->Manage Libraries... and enter MQTT into the search box. Click Install to install the library. Make sure you use the Jo\u00ebl G\u00e4hwiler MQTT library. Using a complete copy of a sketch from the MQTT library means that we can get connected to an MQTT client that is provided as a test ground. 130-esp-arduino-mqtt-example-shiftr.io.ino 130-esp-arduino-mqtt-example-shiftr.io.ino // This example uses an ESP32 Development Board // to connect to shiftr.io. // // You can check on your device after a successful // connection here: https://shiftr.io/try. // // by Jo\u00ebl G\u00e4hwiler // https://github.com/256dpi/arduino-mqtt #include <WiFiClientSecure.h> #include <MQTT.h> const char ssid [] = \"mrbanks\" ; const char pass [] = \"mvepfgzw\" ; WiFiClientSecure net ; MQTTClient client ( 1024 ); unsigned long lastMillis = 0 ; void connect () { Serial . print ( \"checking wifi...\" ); while ( WiFi . status () != WL_CONNECTED ) { Serial . print ( \".\" ); delay ( 1000 ); } Serial . print ( \" \\n connecting...\" ); while ( ! client . connect ( \"bsidebotham\" , \"try\" , \"try\" )) { Serial . print ( \".\" ); delay ( 1000 ); } Serial . println ( \" \\n connected!\" ); client . subscribe ( \"/hello\" ); // client.unsubscribe(\"/hello\"); } void messageReceived ( String & topic , String & payload ) { Serial . println ( \"incoming: \" + topic + \" - \" + payload ); // Note: Do not use the client in the callback to publish, subscribe or // unsubscribe as it may cause deadlocks when other things arrive while // sending and receiving acknowledgments. Instead, change a global variable, // or push to a queue and handle it in the loop after calling `client.loop()`. } void setup () { Serial . begin ( 115200 ); WiFi . begin ( ssid , pass ); // Note: Local domain names (e.g. \"Computer.local\" on OSX) are not supported // by Arduino. You need to set the IP address directly. // // MQTT brokers usually use port 8883 for secure connections. client . begin ( \"broker.shiftr.io\" , 8883 , net ); client . onMessage ( messageReceived ); connect (); } void loop () { client . loop (); delay ( 10 ); // <- fixes some issues with WiFi stability // publish a message roughly every second. if ( millis () - lastMillis > 1000 ) { if ( ! client . connected ()) { Serial . print ( \"lastError: \" ); Serial . println ( client . lastError ()); connect (); } lastMillis = millis (); client . publish ( \"/hello\" , \"world\" ); } } Warning I created a GitHub issue for the fact that the example ESP32 code didn't work out-of-the box on an ESP32 development board The above code is changed slightly from the actual example code. The buffer size for the MQTT client must be increased to get past the first message received from the shiftr.io MQTT server. After that first message, we receive the correct /hello world topic and message from the server which we subscribe to. For more information about MQTT, you can see the MQTT 3.1.1 documentation .","title":"MQTT Library"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#amazon-iot","text":"Tip In this section, we'll make heavy use of the AWS documentation The AWS IoT service allows us to create secure MQTT endpoints for our own Internet-of-Things devices. Let's have a look at how to get our now-MQTT-enabled ESP32 connecting to our own AWS IoT service. The first task is to create a Thing - that is, a unique device that will be able to connect to the service that we create later. Click Manage Click Register a thing Name your thing something that is pertinent to this tutorial. I've gone for ESP32Example so that's what'll be in use throughout the rest of this tutorial. Click Next after you've inserted a name. There's no need to create a group or anything at this point. Certificates. This is always a fun subject. You can end up tying yourself in knots with certificates. For the tutorial, I say - use the one-click certificate creation. That's what I'll do here for this tutorial, but generally for business I'd be using a CSR or (more likely) my own CA for IoT devices. Using your own CA puts you in a much better place. Click One-click certificate creation \"Create certificate\" Pay attention to the next page - you only get one chance to download the public and private keys. Once you move away from the next AWS page you will not be able to download them again. Make sure you keep the certificate and private key out of other people's reach. Download all three certificates Go ahead and download the certificates and keys that have been created for your device. You'll also notice that there is a link to the root CA for AWS IoT. Right Click this link and open it in a new tab and contains various options for the root CA certificate that we need to trust in order to gain secure connectivity to AWS IoT services. Although RSA is getting a slightly bad wrap these days, AWS have a 2048 bit RSA key certificate listed along with some Euclidean Curve (ECC) key certificates. ECC keys require considerable more processing effort than RSA - so stick with the RSA key certificates where you can. For this tutorial, I am going to get the 2048 bit RSA AWS Root CA . Download the AWS Root CA and keep it alongside the other certificates. In the original certificate page, Click Activate on the certificate, so that the box now changes to Deactivate. The certificates are now active. Click Done , because we cant' yet Attach a policy as we've not created any IoT policies yet.","title":"Amazon IoT"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#security-policy","text":"From the main screen, in the left-hand navigation pane Click Secure and then Policies from the Secure sub-menu to start creating a new security policy which we will attach to the certificate we've just created. Together the policy and the certificate will give the new IoT thing permissions to do something (Usually subscribe to and publish to MQTT channels). Click Create a policy which will be our first policy. Give the policy a meaningful name. For the purposes of this tutorial I'm going to call this policy ESP32ExamplePermissions which is a bit poor as it doesn't describe what the policy does. Generally a policy should hint at what it provides rather than be device-specific. But, as we're just working through getting something up and running that we can tweak with later, this will be fine. Specify the Action as iot:Connect and then leave the ARN set automatically. The ARN has a set format which includes a region and your account number. Set the Effect to Allow . Now - move to the advanced mode ( Click Advanced... ) - this allows us to paste in the JSON source for this policy. The reason for doing the first one is to We will adjust the ARN to be dynamic so it's not tied to one thing. This saves us tying the policy to a device-specific ARN. Replace the and settings in the JSON below to the automatically-generated ones from the previous step so this policy is good for your account. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Connect\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:client/${iot:Connection.Thing.ThingName}\" }, { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Publish\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/update\" }, { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Subscribe\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/update/accepted\" }, { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Receive\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/update/accepted\" }, { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Subscribe\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/update/rejected\" }, { \"Effect\" : \"Allow\" , \"Action\" : \"iot:Receive\" , \"Resource\" : \"arn:aws:iot:<region>:<account>:topic/$aws/things/${iot:Connection.Thing.ThingName}/shadow/update/rejected\" } ] } We now have to attach the Policy to the Certificate we created earlier for the IoT Thing. Click Secure->Certificates from the left hand navigation pane. We can see the certificate that we created a few steps ago for our first IoT Thing. Hover over it and click the checkbox on the certificate. From the Actions menu that appears, select Attach Policy From the dialog that opens, select the new policy that we just created, ESP32ExamplePermissions : Click Attach and we get a confirmation toast that the policy has been attached successfully. Now that the security policy is attached to the certificate, we need to attach the certificate to the Thing. From the Actions menu for the certificate which should still be available (If it isn't, select the certificate again as above) select Attach thing From the dialog that opens, select the Thing that we created earlier. Click Attach and we get another toast message saying that the certificate was attached to the Thing successfully.","title":"Security Policy"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#iot-core-url","text":"From the AWS Documentation of IoT Core we can see that to find the URL and port number that MQTT should connect to for our new thing, we should use the describe-endpoint command. This command is run against your AWS account by using the AWS CLI tool and an AWS Access Key (With sufficient permissions to describe-endpoint )","title":"IoT Core URL"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#create-iam-access-key","text":"Tip You can skip this section if you've already got an AWS Access Key and the AWS CLI tools. We need to create an Access Key which will allow an IAM user to perform programatic tasks on our AWS account. If you're still using the root account credentials to do things - STOP! Change to make yourself an IAM administrator role and don't bother logging in as the root account any longer. In the AWS Console select the IAM service and click Users, following by the User which you currently use within the AWS Console. From the user summary page, click Security Credentials and then Create access key . You need to click Show to be able to see the Secret access key and you need to put that somewhere safe. I recommend some secure password vault like Lastpass or else Hashicorp's Vault. Close when you've copied out the access key id and the Secret access key. We need the aws CLI tools. I'm working on Fedora, so I do dnf search aws to find the package which it turns out is awscli and so I can install the package with sudo dnf install awscli . In order to use the AWS CLI tools, you have to inform the AWS CLI tool about the access key that enables it to access your account. This is easiest done by using the configure command: [brian@brian-2920x ~]$ aws configure AWS Access Key ID [None]: AKIA2J57***********F AWS Secret Access Key [None]: I**************************************E Default region name [None]: eu-west-2 Default output format [None]: Make sure you paste in the secrets here. On Linux this stores your AWS secrets in plain text in a file in your home directory ~/.aws/credentials - which is why these days I always have drive encryption enabled for my home folder. At least at rest the information on the disk is encrypted!","title":"Create IAM Access Key"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#use-describe-endpoint","text":"Using the AWS CLI you can get the account-specific URL endpoint for your IoT. From the documentation for the AWS IoT describe-endpoint command , we will use the endpoint that returns an ATS signed data endpoint. This works with the AWS root certificate we collected earlier. If you want to use a Verisign signed endpoint instead, you'll have to adjust the Root CA you use. In this tutorial we'll use ATS signed. $ aws iot describe-endpoint --endpoint-type 'iot:Data-ATS' { \"endpointAddress\": \"a2**********3d-ats.iot.eu-west-2.amazonaws.com\" } This URL is the endpoint we'll configure our Thing to connect to MQTT. According to the documentation port 8883 is used for secure MQTT connections on this URL.","title":"Use describe-endpoint"},{"location":"open-software/arduino/esp32-mqtt-tutorial/#connect-to-aws-iot-to-publish-mqtt","text":"Now we should have everything we need to connect to AWS IoT with our new thing and we should be able to subscribe to and publish messages to the same topic. As things in the Sketch get more complicated, we want to make sure we see output from any libraries we're using. Make sure to set the Core Debug Level setting to Warning or more verbosity so you can debug issues more easily: 140-esp32-arduino-mqtt-connect-to-aws-iot.ino 140-esp32-arduino-mqtt-connect-to-aws-iot.ino is a new sketch that includes the AWS configuration data that we've collected while setting up our AWS IoT service. In order to use the sketch, you'll need to fill in your AWS IoT ATS endpoint and the Thing Certificate and Private Key that you gathered earlier. If you've used all the same values as me you can leave the rest alone, otherwise you'll have to adjust the topic and/or device name. Setting AWS Root CA Setting Thing Certificate Setting the Thing Private Key Beginning MQTT Client a2**********3d-ats.iot.eu-west-2.amazonaws.com:8883 checking wifi...connecting... connected! Subscribing to $aws/things/ESP32Example/shadow/update Subscribing to $aws/things/ESP32Example/shadow/update/accepted Subscribing to $aws/things/ESP32Example/shadow/update/rejected Publishing State... incoming: $aws/things/ESP32Example/shadow/update/accepted - {\"state\":{\"reported\":{\"color\":\"red\",\"power\":\"on\"}},\"metadata\":{\"reported\":{\"color\":{\"timestamp\":1587417221},\"power\":{\"timestamp\":1587417221}}},\"version\":159,\"timestamp\":1587417221} The topics that are used in this example come from the AWS IoT documentation and are special reserved MQTT topics which allow IoT to keep a shadow copy of the Device's state. It is common to have this sort of shadowing for the device. If, for some reason the real device is not available, services will get the shadow device data instead.","title":"Connect to AWS IoT to Publish MQTT"},{"location":"open-software/aws/aws-lambda-getting-started/","text":"AWS Lambda Getting Started \u00b6 In this tutorial we will look at getting an AWS Lambda function running in AWS and exercise it with a node.js tool. NOTE: You'll need a working AWS account for this tutorial. Create the Lambda Function \u00b6 A Lambda function is essentially a snippet of code that is run because of some condition that we configure. It is not associated with a particular server. Instead, as we'll see, we select a runtime environment that is provided on some compute capacity that AWS has that can run the snippet when the conditions are correct. Conditions could be a queue entering a message queue, or a certain time is reached (a bit like cron), etc. Sign into AWS and select the Lambda server (Using the Find Services search function) Click Create Function Select Author from scratch if it isn't already selected and fill in the Function name with something that makes sense, something like awsLambdaTutorial . Leave the runtime set to the latest Node.js (It's 12.x as of writing this tutorial) There's no need to do anything much with the execution role. If you expand the options you'll see that the default action is to create a new role with basic Lambda permissions. This is ideal as we don't want the Lambda to have permissions to do anything inside our account right now. Click Create Function to now go ahead and create the Lambda function. Don't be put off by the next screen, there's quite a lot on there. What we have now is an index.js that is filled with an example Lambda function: exports . handler = async ( event ) => { // TODO implement const response = { statusCode : 200 , body : JSON . stringify ( 'Hello from Lambda!' ), }; return response ; }; This shows a basic HTTP handler that will return a HTTP status code of 200 OK along with a JSON formatted body that reads Hello from Lambda! . Not particularly exciting stuff, but a Hello World! example rarely is. Getting this working is an achievement however. There's nothing left for us to do here - we've created the Lambda function. So now what!? We need to trigger the Lambda function. Although it exists, there's currently no way of invoking the Lambda. Create an API Gateway \u00b6 We can go ahead and create an API Gateway and attach an API endpoint to the Lambda in order to trigger it. Switch to the API Gateway Service in the AWS Console and select HTTP API by clicking Build on the HTTP API dialog: Click Add Integration and select Lambda from the dropdown list to start integrating the API to the Lambda function. Leave the Integration Target as the default - it should match the Lambda Function you created at the start. Select the awsLambdaTutorial Lambda as the target. Give the API a name like awsLambdaTutorial and click Next : On the next page we can see that the roue /awsLambdaTutorial in the HTTP API will result in use running the target lambda. The Method by default is set to ANY . Might as well leave all of this as default - although we'll only be using the GET for the turorial. The Stages section can just be left as $default - we won't be doing any fancy API versioning for this tutorial. Click Next . In the review page, click Create to create the API Gateway. The next page gives us information about the API Gateway - it's live already and had a unique API Gateway URL which can be used straight away. Using the route from earlier in the process and the API URL shown after creation we can exercise the Lambda function using a HTTP call to the API e endpoint we connected to the Lambda: $ curl -v https://kts40o1gil.execute-api.eu-west-2.amazonaws.com/awsLambdaTutorial * Trying 3.10.172.190:443... * TCP_NODELAY set * Connected to kts40o1gil.execute-api.eu-west-2.amazonaws.com (3.10.172.190) port 443 (#0) * ALPN, offering h2 * ALPN, offering http/1.1 * successfully set certificate verify locations: * CAfile: /etc/pki/tls/certs/ca-bundle.crt CApath: none * TLSv1.3 (OUT), TLS handshake, Client hello (1): * TLSv1.3 (IN), TLS handshake, Server hello (2): * TLSv1.2 (IN), TLS handshake, Certificate (11): * TLSv1.2 (IN), TLS handshake, Server key exchange (12): * TLSv1.2 (IN), TLS handshake, Server finished (14): * TLSv1.2 (OUT), TLS handshake, Client key exchange (16): * TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1): * TLSv1.2 (OUT), TLS handshake, Finished (20): * TLSv1.2 (IN), TLS handshake, Finished (20): * SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256 * ALPN, server accepted to use h2 * Server certificate: * subject: CN=*.execute-api.eu-west-2.amazonaws.com * start date: Jan 27 00:00:00 2020 GMT * expire date: Feb 27 12:00:00 2021 GMT * subjectAltName: host \"kts40o1gil.execute-api.eu-west-2.amazonaws.com\" matched cert's \"*.execute-api.eu-west-2.amazonaws.com\" * issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon * SSL certificate verify ok. * Using HTTP2, server supports multi-use * Connection state changed (HTTP/2 confirmed) * Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0 * Using Stream ID: 1 (easy handle 0x557e0ea27200) > GET /awsLambdaTutorial HTTP/2 > Host: kts40o1gil.execute-api.eu-west-2.amazonaws.com > User-Agent: curl/7.66.0 > Accept: */* > * Connection state changed (MAX_CONCURRENT_STREAMS == 128)! < HTTP/2 200 < date: Thu, 16 Apr 2020 21:16:28 GMT < content-type: text/plain; charset=utf-8 < content-length: 20 < apigw-requestid: LGSu_i1cLPEEPNw= < * Connection #0 to host kts40o1gil.execute-api.eu-west-2.amazonaws.com left intact \"Hello from Lambda!\" We have successfully run the Lambda function with an incoming HTTP request. This is a good starting point for getting further into Lambda functions.","title":"AWS Lambda Getting Started"},{"location":"open-software/aws/aws-lambda-getting-started/#aws-lambda-getting-started","text":"In this tutorial we will look at getting an AWS Lambda function running in AWS and exercise it with a node.js tool. NOTE: You'll need a working AWS account for this tutorial.","title":"AWS Lambda Getting Started"},{"location":"open-software/aws/aws-lambda-getting-started/#create-the-lambda-function","text":"A Lambda function is essentially a snippet of code that is run because of some condition that we configure. It is not associated with a particular server. Instead, as we'll see, we select a runtime environment that is provided on some compute capacity that AWS has that can run the snippet when the conditions are correct. Conditions could be a queue entering a message queue, or a certain time is reached (a bit like cron), etc. Sign into AWS and select the Lambda server (Using the Find Services search function) Click Create Function Select Author from scratch if it isn't already selected and fill in the Function name with something that makes sense, something like awsLambdaTutorial . Leave the runtime set to the latest Node.js (It's 12.x as of writing this tutorial) There's no need to do anything much with the execution role. If you expand the options you'll see that the default action is to create a new role with basic Lambda permissions. This is ideal as we don't want the Lambda to have permissions to do anything inside our account right now. Click Create Function to now go ahead and create the Lambda function. Don't be put off by the next screen, there's quite a lot on there. What we have now is an index.js that is filled with an example Lambda function: exports . handler = async ( event ) => { // TODO implement const response = { statusCode : 200 , body : JSON . stringify ( 'Hello from Lambda!' ), }; return response ; }; This shows a basic HTTP handler that will return a HTTP status code of 200 OK along with a JSON formatted body that reads Hello from Lambda! . Not particularly exciting stuff, but a Hello World! example rarely is. Getting this working is an achievement however. There's nothing left for us to do here - we've created the Lambda function. So now what!? We need to trigger the Lambda function. Although it exists, there's currently no way of invoking the Lambda.","title":"Create the Lambda Function"},{"location":"open-software/aws/aws-lambda-getting-started/#create-an-api-gateway","text":"We can go ahead and create an API Gateway and attach an API endpoint to the Lambda in order to trigger it. Switch to the API Gateway Service in the AWS Console and select HTTP API by clicking Build on the HTTP API dialog: Click Add Integration and select Lambda from the dropdown list to start integrating the API to the Lambda function. Leave the Integration Target as the default - it should match the Lambda Function you created at the start. Select the awsLambdaTutorial Lambda as the target. Give the API a name like awsLambdaTutorial and click Next : On the next page we can see that the roue /awsLambdaTutorial in the HTTP API will result in use running the target lambda. The Method by default is set to ANY . Might as well leave all of this as default - although we'll only be using the GET for the turorial. The Stages section can just be left as $default - we won't be doing any fancy API versioning for this tutorial. Click Next . In the review page, click Create to create the API Gateway. The next page gives us information about the API Gateway - it's live already and had a unique API Gateway URL which can be used straight away. Using the route from earlier in the process and the API URL shown after creation we can exercise the Lambda function using a HTTP call to the API e endpoint we connected to the Lambda: $ curl -v https://kts40o1gil.execute-api.eu-west-2.amazonaws.com/awsLambdaTutorial * Trying 3.10.172.190:443... * TCP_NODELAY set * Connected to kts40o1gil.execute-api.eu-west-2.amazonaws.com (3.10.172.190) port 443 (#0) * ALPN, offering h2 * ALPN, offering http/1.1 * successfully set certificate verify locations: * CAfile: /etc/pki/tls/certs/ca-bundle.crt CApath: none * TLSv1.3 (OUT), TLS handshake, Client hello (1): * TLSv1.3 (IN), TLS handshake, Server hello (2): * TLSv1.2 (IN), TLS handshake, Certificate (11): * TLSv1.2 (IN), TLS handshake, Server key exchange (12): * TLSv1.2 (IN), TLS handshake, Server finished (14): * TLSv1.2 (OUT), TLS handshake, Client key exchange (16): * TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1): * TLSv1.2 (OUT), TLS handshake, Finished (20): * TLSv1.2 (IN), TLS handshake, Finished (20): * SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256 * ALPN, server accepted to use h2 * Server certificate: * subject: CN=*.execute-api.eu-west-2.amazonaws.com * start date: Jan 27 00:00:00 2020 GMT * expire date: Feb 27 12:00:00 2021 GMT * subjectAltName: host \"kts40o1gil.execute-api.eu-west-2.amazonaws.com\" matched cert's \"*.execute-api.eu-west-2.amazonaws.com\" * issuer: C=US; O=Amazon; OU=Server CA 1B; CN=Amazon * SSL certificate verify ok. * Using HTTP2, server supports multi-use * Connection state changed (HTTP/2 confirmed) * Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0 * Using Stream ID: 1 (easy handle 0x557e0ea27200) > GET /awsLambdaTutorial HTTP/2 > Host: kts40o1gil.execute-api.eu-west-2.amazonaws.com > User-Agent: curl/7.66.0 > Accept: */* > * Connection state changed (MAX_CONCURRENT_STREAMS == 128)! < HTTP/2 200 < date: Thu, 16 Apr 2020 21:16:28 GMT < content-type: text/plain; charset=utf-8 < content-length: 20 < apigw-requestid: LGSu_i1cLPEEPNw= < * Connection #0 to host kts40o1gil.execute-api.eu-west-2.amazonaws.com left intact \"Hello from Lambda!\" We have successfully run the Lambda function with an incoming HTTP request. This is a good starting point for getting further into Lambda functions.","title":"Create an API Gateway"},{"location":"open-software/gcc/weak-function-attributes/","text":"Weak Function Attributes \u00b6 In GCC it\u2019s possible to have weak and strong function attributes. Two strongly names functions cannot be present in code objects being linked. This would be an error produced by the linker \u2013 it doesn\u2019t know how to resolve two symbols with the same name. A simple example of this would be to compile two copies of the same file, which works fine, and then try to link them \u2013 this will then fail because there are multiple references for the same symbol. Weak functions are usually blank. Normally they are found in libraries that will be linked with application code. They provide a basis for optional extended functionality. The application layer can choose to implement these functions or not. To implement them the application layer simply defines a strong function for the name which the linker will then link in preference to the weak named function. Here is the GCC manual extract for the weak function attribute weak The weak attribute causes the declaration to be emitted as a weak symbol rather than a global. This is primarily useful in defining library functions that can be overridden in user code, though it can also be used with non-function declarations. Weak symbols are supported for ELF targets, and also for a.out targets when using the GNU assembler and linker So in GCC we can define a weak function by using the following syntax #include <stdio.h> void onKeypress ( char c ) __attribute__ (( weak )) { } void * KeyboardScanThread ( void * args ) { char c ; while ( ! threadQuit ) { c = getch (); onKeypress ( c ); } } Here we see an excerpt of psuedo code where the library is running a thread which continually scans the keyboard. After each key press onKeypress is called with the character that was pressed. If this library is linked with an application that does not have a strong onKeypress function, the blank weak function is used from the library. Generally the optimiser will eliminate this call anyway (though in embedded versions of GCC it will make that blank call, as I\u2019ve seen!) Now lets say the application does want to know when the q button has been pressed, and then we\u2019ll quit the library. All the application needs to do is have a strong onKeypress function. Here\u2019s a quick bit of psuedo-code that does that: #include <stdio.h> void onKeypress ( char c ) { if (( c == 'q' ) || ( c == 'Q' )) { LibraryQuitNow (); } } int main ( int argc , char * argv []) { LibraryInit (); while ( ! LibraryHasQuit ()) { } return EXIT_SUCCESS ; } It is important to note in the psuedo-code that we\u2019ve introduced cross-thread complications here. It is only as I\u2019m typing off the top of my head to find an example. There are of course times we might want to use this in a single-threaded environment too. Here we\u2019re just looking at the difference between weak and strong functions and looking at how we can use the weak function attribute in GCC. Now the linker resolves the strong function when linking and throws the weak function away. Aliasing a weak function \u00b6 Normally we alias all weak functions to a single blank function in GCC. This saves codespace when we have a lot of these weak functions as they are generally all blank. To alias a function in GCC we simply add in another function attribute, alias. This is what the GCC manual has to say about the alias function attribute: alias (\u201ctarget\u201d) The alias attribute causes the declaration to be emitted as an alias for another symbol, which must be specified. For instance, void __f () { /* Do something. */ ; } void f () __attribute__ (( weak , alias ( \"__f\" ))); defines f to be a weak alias for __f . In C++, the mangled name for the target must be used. It is an error if __f is not defined in the same translation unit. Not all target machines support this attribute. In fact, as you can see weak and alias are used together so much, the alias example is the example we need in this section of our documentation. Putting it in the context of our keyboard scanner above. If we altered the library so that we had a callback for each character, we would end up with a lot of blank functions in the library (assuming in this case that the optimiser didn\u2019t get rid of the calls!). But if we do this with aliasing we can have a single blank function which all the weak symbols will resolve too: #include <stdio.h> void onKeyBlank ( void ) { } void onKeyA () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyB () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyC () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyD () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyE () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyF () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyG () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); /* ... */ void * KeyboardScanThread ( void * args ) { char c ; while ( ! threadQuit ) { c = getch (); switch ( c ) { case 'A' : case 'a' : onKeyA (); break ; case 'B' : case 'b' : onKeyB (); break ; /* ... */ default : OnKeyBlank ( c ); break ; } } } Now our code would be slightly different in the main application code: #include <stdio.h> void onKeyQ ( void ) { LibraryQuitNow (); } int main ( int argc , char * argv []) { LibraryInit (); while ( ! LibraryHasQuit ()) { } return EXIT_SUCCESS ; } As to the worth of this GCC extension, well that\u2019s where you\u2019ll have to do your own evaluation. I\u2019ve used it in the past when generating serial comms libraries in order to have events on fairly mundane errors or asserts within the code which only really need any attention in a debug build. We can then build a version which ignores (or doesn\u2019t explicitly) report these errors and assertions which will be our release build, and a slower debug build which may well take memory dumps or other diagnostic information. A conditional compile on a code module which has hooks for these events is all we need. It can be useful, but it can also be omitted or worked around if you don\u2019t appreciate gcc extensions (but then this whole page is a bit useless to you!)","title":"Weak Function Attributes"},{"location":"open-software/gcc/weak-function-attributes/#weak-function-attributes","text":"In GCC it\u2019s possible to have weak and strong function attributes. Two strongly names functions cannot be present in code objects being linked. This would be an error produced by the linker \u2013 it doesn\u2019t know how to resolve two symbols with the same name. A simple example of this would be to compile two copies of the same file, which works fine, and then try to link them \u2013 this will then fail because there are multiple references for the same symbol. Weak functions are usually blank. Normally they are found in libraries that will be linked with application code. They provide a basis for optional extended functionality. The application layer can choose to implement these functions or not. To implement them the application layer simply defines a strong function for the name which the linker will then link in preference to the weak named function. Here is the GCC manual extract for the weak function attribute weak The weak attribute causes the declaration to be emitted as a weak symbol rather than a global. This is primarily useful in defining library functions that can be overridden in user code, though it can also be used with non-function declarations. Weak symbols are supported for ELF targets, and also for a.out targets when using the GNU assembler and linker So in GCC we can define a weak function by using the following syntax #include <stdio.h> void onKeypress ( char c ) __attribute__ (( weak )) { } void * KeyboardScanThread ( void * args ) { char c ; while ( ! threadQuit ) { c = getch (); onKeypress ( c ); } } Here we see an excerpt of psuedo code where the library is running a thread which continually scans the keyboard. After each key press onKeypress is called with the character that was pressed. If this library is linked with an application that does not have a strong onKeypress function, the blank weak function is used from the library. Generally the optimiser will eliminate this call anyway (though in embedded versions of GCC it will make that blank call, as I\u2019ve seen!) Now lets say the application does want to know when the q button has been pressed, and then we\u2019ll quit the library. All the application needs to do is have a strong onKeypress function. Here\u2019s a quick bit of psuedo-code that does that: #include <stdio.h> void onKeypress ( char c ) { if (( c == 'q' ) || ( c == 'Q' )) { LibraryQuitNow (); } } int main ( int argc , char * argv []) { LibraryInit (); while ( ! LibraryHasQuit ()) { } return EXIT_SUCCESS ; } It is important to note in the psuedo-code that we\u2019ve introduced cross-thread complications here. It is only as I\u2019m typing off the top of my head to find an example. There are of course times we might want to use this in a single-threaded environment too. Here we\u2019re just looking at the difference between weak and strong functions and looking at how we can use the weak function attribute in GCC. Now the linker resolves the strong function when linking and throws the weak function away.","title":"Weak Function Attributes"},{"location":"open-software/gcc/weak-function-attributes/#aliasing-a-weak-function","text":"Normally we alias all weak functions to a single blank function in GCC. This saves codespace when we have a lot of these weak functions as they are generally all blank. To alias a function in GCC we simply add in another function attribute, alias. This is what the GCC manual has to say about the alias function attribute: alias (\u201ctarget\u201d) The alias attribute causes the declaration to be emitted as an alias for another symbol, which must be specified. For instance, void __f () { /* Do something. */ ; } void f () __attribute__ (( weak , alias ( \"__f\" ))); defines f to be a weak alias for __f . In C++, the mangled name for the target must be used. It is an error if __f is not defined in the same translation unit. Not all target machines support this attribute. In fact, as you can see weak and alias are used together so much, the alias example is the example we need in this section of our documentation. Putting it in the context of our keyboard scanner above. If we altered the library so that we had a callback for each character, we would end up with a lot of blank functions in the library (assuming in this case that the optimiser didn\u2019t get rid of the calls!). But if we do this with aliasing we can have a single blank function which all the weak symbols will resolve too: #include <stdio.h> void onKeyBlank ( void ) { } void onKeyA () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyB () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyC () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyD () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyE () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyF () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); void onKeyG () __attribute__ (( weak , alias ( \"onKeyBlank\" ))); /* ... */ void * KeyboardScanThread ( void * args ) { char c ; while ( ! threadQuit ) { c = getch (); switch ( c ) { case 'A' : case 'a' : onKeyA (); break ; case 'B' : case 'b' : onKeyB (); break ; /* ... */ default : OnKeyBlank ( c ); break ; } } } Now our code would be slightly different in the main application code: #include <stdio.h> void onKeyQ ( void ) { LibraryQuitNow (); } int main ( int argc , char * argv []) { LibraryInit (); while ( ! LibraryHasQuit ()) { } return EXIT_SUCCESS ; } As to the worth of this GCC extension, well that\u2019s where you\u2019ll have to do your own evaluation. I\u2019ve used it in the past when generating serial comms libraries in order to have events on fairly mundane errors or asserts within the code which only really need any attention in a debug build. We can then build a version which ignores (or doesn\u2019t explicitly) report these errors and assertions which will be our release build, and a slower debug build which may well take memory dumps or other diagnostic information. A conditional compile on a code module which has hooks for these events is all we need. It can be useful, but it can also be omitted or worked around if you don\u2019t appreciate gcc extensions (but then this whole page is a bit useless to you!)","title":"Aliasing a weak function"},{"location":"open-software/python/pylab/","text":"Warning This is an old post and is probably out of date - but give it a go if it helps you out! PyLab is a collection of libraries for Python which includes numpy, scipy, and matplotlib. Together these libraries can be used to great effect to do work similar to that of Matlab. Why this page? \u00b6 Aren't there a million pages showing how to use SciPy and NumPy? Well, yes there are, and I've read a lot of them, but the trouble is they are mainly stuck in pure math mode. A place where we generate ideal signals and analyse effects. This is an essential part of signal analysis, but in the real world we always have a problem to solve and usually we've got real sampled data to hand. I want to show some examples of actually working with real data. Loading and saving signals as WAV files \u00b6 This should be straight forward, but it's slightly more complex than it should be. PyLab's support for wav files comes through the scipy.io module in the form of wavread and wavwrite. Unfortunately these only provide basic support for wav files and so we have to read a whole wav file at a time instead of just being able to read N samples. Quick Example - FIR Filter WAV File \u00b6 As an example, below is code to open a wav file, apply an FIR filter on the data and then save to a new wav file from scipy.io import wavfile from scipy.signal import firwin , lfilter fs , datain = wavfile . read ( \"in.wav\" ) # Design a non-windowed bandpass FIR filter # Number of taps N = 256 cutlow = 300 cuthigh = 500 # The filter design is a seperate chapter to follow... taps = firwin ( N , [ cutlow , cuthigh ], pass_zero = False , nyq = fs / 2 ) # Now we have the filter design and the taps, apply the filter to the data filtered = lfilter ( taps , 1.0 , datain ) # Scale back to integers as otherwise you'll probably get a wav file that # nothing can open (due to 64-bit floats as the data set!) # Write the filtered signal back to a wav file # It is important to use the astype!! Otherwise you end up with a wavfile that # is unreadable by most software! wavfile . write ( \"out.wav\" , fs , filtered . astype ( numpy . int16 )) So now we can load some audio, do some filtering on the data and then save the result to another file. This is useful, but we are also interested in the filters characteristics. What is the impulse response like, how can we see exaclty how the filter is behaving? Using matplotlib to plot stuff \u00b6 Again, lets start off as simple as we can to view something useful. Viewing the filter impulse response (which is shown by the filter coefficients) tells us some of the characteristics of the filter. If you're using ipython, then all you need do is type in the following: plot ( t ) Now you can't really get easier than that! Of course, you can title the plot and set the x and y label values if you want, but generally we know what we are looking at, we just want to see it visually and so plot() usually gives a good indication of what's going on. Looking Closer at signals \u00b6 We're using wavs for our signals, but it doesn't matter what you use as a data source; Sometimes you need to see the original signal and the modified signal. Plotting the signal is as easy as you think: from scipy.io import wavfile from scipy.signal import firwin , lfilter fs , datain = wavfile . read ( \"in.wav\" ) plot ( datain ) The first problem is that the plot takes ages to generate if we have a suitably large input signal. Or, of course, we run out of memory whilst trying to plot the entire signal. What we could do with is just plotting a small section of the input signal, so that it provides us with enough detail, but is also quick to render. Splitting data sets in python \u00b6 Let's quickly look at how we can get just a small portion of an array in python. The : operator used in the index provides us with a way of specifying a start and end position for the part of the array we are interested in. The syntax is like: datain [ from : to ] If from is omitted, from is assumed to be the start of the array (index=0), and if to is omitted, to is assumed to be the end of the array (len(datain)-1) For example, to get 3 seconds of a wav file sampled at 8kHz, we end up with the following code snippet: a = datain [: 8000 * 3 ] So, back to looking at the signal again, let's now try and plot 3 seconds of the original signal: from scipy.io import wavfile from scipy.signal import firwin , lfilter from scipy.fftpack import fft fs , datain = wavfile . read ( \"in.wav\" ) plot ( datain [: fs * 3 ]) Lovely Jubely, nice quick plot showing us the original signal. Now let's filter it and have a look at the filtered signal. But what we want to see now is the first 3 seconds after it has been passed through the digital filter. from scipy.io import wavfile from scipy.signal import firwin , lfilter fs , datain = wavfile . read ( \"in.wav\" ) N = 512 lo = 500 hi = 1000 taps = firwin ( N , [ lo , hi ], pass_zero = False , nyq = fs / 2 ) filtered = lfilter ( taps , 1.0 , datain [: fs * 3 ]) plot ( filtered [ N :]) So, in the above we speed things up a bit more by filterering just the first 3 seconds of the input data. Then, we plot the filtered output. BUT: We only plot the valid filter output. The first N samples of filtered data are not valid so we do not plot. It's quick and we can get the result from our filter quickly. When you're looking at the plot you're probably thinking it'd be nice if the axis were now a bit more relevant. For example, the X Axis is the number of samples. As we'd probably like the X Axis to be time, we must adjust the x-Axis to suit In order to plot the time, we need to generate the time! This is done by creating a range (or actually a linspace). The length of the range must be the same length as the data being plotted, so again we get rid of the inaccurate first N samples. t = numpy . linspace ( 0.0 , 3.0 , ( 3 * fs ) - N ) plot ( t , filtered [ N :], '-g' ) This plots the same as before, but now the x axis is scaled correctly to represent time. It is also coloured green, which is what '-g' means! Let's label the X Axis so that it's more obvious: xlabel ( \"Time (s)\" ) What we really want to do of course is plot both the original signal and the filtered signal at the same time so that we can see the difference between them. plot ( t , datain [ N : len ( filtered )], '-b' , t , filtered [ N :], '-g' ) xlabel ( \"Time (s)\" ) title ( \"500Hz to 1kHz Bandbass\" ) Note that you can look around the plot interactively with matplotlib. Click the four arrow icon and then pan with the mouse whilst holding the left button down and zoom (with axis) with the mouse whilst holding the right button down. Also note, as we previously only filtered a portion of the input data, make sure we limit the data sets to the same time range. I'll leave it to you to zoom and pan in to discover the phase delay in the filtered output. ;-) Frequency Domain Analysis \u00b6 The frequency domain can tell us a lot more about a signal than the time domain can sometimes. As we're applying a filter, it would be nice to see a frequency domain plot of the input signal and a similar one for the filtered signal. Working with Fast Fourier Transforms (FFT) is also made pretty easy in pylab. I shan't go into the theory about FFT's as there is plenty of information available in almost every Digital Signal Processing (DSP) book. It is an essenial part of DSP work and it is worth having a good understanding of the FFT and how it behaves. Hence, having an interactive python shell to do FFT calculations for you and plotting the results is a good bonus and will set you on your way with understanding them. I highly recommend Understaing Digital Signal Processing for this subject as it is an awesome book to read: http://www.amazon.co.uk/Understanding-Digital-Signal-Processing-Richard/dp/0137027419/ref=sr_1_1?ie=UTF8&qid=1310391681&sr=8-1 The FFT creates a number of frequency bins. The FFT puts a value in each bin according to that frequency's energy level in the data. The FFT produces results of + and - frequencies! Make sure you understand that. So, let's continue where we left off, we still have datain which contains our input data and we want to do an fft of the data. The number of bins generated by the FFT is equivalent to the number of samples over which the FFT is performed. In actual fact the bins are mirrored around the nyquist frequency. So in fact if we are sampling at 8kHz and we do a 1024 FFT (powers of two are best for FFTs) we will end up with 512 bins equidistantly spread between 0 to fs/2. Let's FFT: N = 1024 freq = fft ( datain [: N ]) Well, that was pretty easy! But there is a bit more required yet! If you haven't already, go ahead and plot the fft result: plot ( freq ) First off, we get an error about discarding the imaginary part of the values. That is okay, that is essentially the phase and we are not really interested in the phase. But, we also have negative magnitudes! Let's fix that first before we do anything else: plot ( abs ( freq )) Okay, that's a bit better, and abs gets rid of the complex part of the values too so there is now no warning from plot about discarding them. At least it now looks a bit more like we'd expect from an FFT. But there is another big problem, as I mentioned before an FFT should generate frequency bins between 0 and \u00b1 fs/2 so the x axis should read (if sampling at 8kHz) -4000 through to +4000. With that scale, the results should mirror around 0 on the x-axis. In actual fact it is quite easy to re-arrange the results from the FFT to produce what we want to plot Firstly, we need to create the X Axis, just like we did converting samples into time. Now though we want to convert bins into frequency. We do this by creating a range for the X axis: f = numpy . linspace ( - fs / 2 , fs / 2 , N ) Now we create a new array, re-arranging the results of the FFT so that negative values come first and then positive values. The actual results are the opposite way around! freq2 = abs ( concatenate (( freq [ N / 2 :], freq [: N / 2 ]))) In most cases, the negative half of the plot can be disregarded as it is a mirror of the positive frequency half. I'll leave that up to the reader to solve . Hopefully this page has given you some useful snippets of code which can get you up and running when trying to start analysing signals with pylab. References / Documentation \u00b6 The official documentation is very good for these projects. The official Numpy/Scipy documentation can be found here: http://docs.scipy.org/doc/ and the Matplotlib documentation can be found here: http://matplotlib.sourceforge.net/","title":"Pylab"},{"location":"open-software/python/pylab/#why-this-page","text":"Aren't there a million pages showing how to use SciPy and NumPy? Well, yes there are, and I've read a lot of them, but the trouble is they are mainly stuck in pure math mode. A place where we generate ideal signals and analyse effects. This is an essential part of signal analysis, but in the real world we always have a problem to solve and usually we've got real sampled data to hand. I want to show some examples of actually working with real data.","title":"Why this page?"},{"location":"open-software/python/pylab/#loading-and-saving-signals-as-wav-files","text":"This should be straight forward, but it's slightly more complex than it should be. PyLab's support for wav files comes through the scipy.io module in the form of wavread and wavwrite. Unfortunately these only provide basic support for wav files and so we have to read a whole wav file at a time instead of just being able to read N samples.","title":"Loading and saving signals as WAV files"},{"location":"open-software/python/pylab/#quick-example-fir-filter-wav-file","text":"As an example, below is code to open a wav file, apply an FIR filter on the data and then save to a new wav file from scipy.io import wavfile from scipy.signal import firwin , lfilter fs , datain = wavfile . read ( \"in.wav\" ) # Design a non-windowed bandpass FIR filter # Number of taps N = 256 cutlow = 300 cuthigh = 500 # The filter design is a seperate chapter to follow... taps = firwin ( N , [ cutlow , cuthigh ], pass_zero = False , nyq = fs / 2 ) # Now we have the filter design and the taps, apply the filter to the data filtered = lfilter ( taps , 1.0 , datain ) # Scale back to integers as otherwise you'll probably get a wav file that # nothing can open (due to 64-bit floats as the data set!) # Write the filtered signal back to a wav file # It is important to use the astype!! Otherwise you end up with a wavfile that # is unreadable by most software! wavfile . write ( \"out.wav\" , fs , filtered . astype ( numpy . int16 )) So now we can load some audio, do some filtering on the data and then save the result to another file. This is useful, but we are also interested in the filters characteristics. What is the impulse response like, how can we see exaclty how the filter is behaving?","title":"Quick Example - FIR Filter WAV File"},{"location":"open-software/python/pylab/#using-matplotlib-to-plot-stuff","text":"Again, lets start off as simple as we can to view something useful. Viewing the filter impulse response (which is shown by the filter coefficients) tells us some of the characteristics of the filter. If you're using ipython, then all you need do is type in the following: plot ( t ) Now you can't really get easier than that! Of course, you can title the plot and set the x and y label values if you want, but generally we know what we are looking at, we just want to see it visually and so plot() usually gives a good indication of what's going on.","title":"Using matplotlib to plot stuff"},{"location":"open-software/python/pylab/#looking-closer-at-signals","text":"We're using wavs for our signals, but it doesn't matter what you use as a data source; Sometimes you need to see the original signal and the modified signal. Plotting the signal is as easy as you think: from scipy.io import wavfile from scipy.signal import firwin , lfilter fs , datain = wavfile . read ( \"in.wav\" ) plot ( datain ) The first problem is that the plot takes ages to generate if we have a suitably large input signal. Or, of course, we run out of memory whilst trying to plot the entire signal. What we could do with is just plotting a small section of the input signal, so that it provides us with enough detail, but is also quick to render.","title":"Looking Closer at signals"},{"location":"open-software/python/pylab/#splitting-data-sets-in-python","text":"Let's quickly look at how we can get just a small portion of an array in python. The : operator used in the index provides us with a way of specifying a start and end position for the part of the array we are interested in. The syntax is like: datain [ from : to ] If from is omitted, from is assumed to be the start of the array (index=0), and if to is omitted, to is assumed to be the end of the array (len(datain)-1) For example, to get 3 seconds of a wav file sampled at 8kHz, we end up with the following code snippet: a = datain [: 8000 * 3 ] So, back to looking at the signal again, let's now try and plot 3 seconds of the original signal: from scipy.io import wavfile from scipy.signal import firwin , lfilter from scipy.fftpack import fft fs , datain = wavfile . read ( \"in.wav\" ) plot ( datain [: fs * 3 ]) Lovely Jubely, nice quick plot showing us the original signal. Now let's filter it and have a look at the filtered signal. But what we want to see now is the first 3 seconds after it has been passed through the digital filter. from scipy.io import wavfile from scipy.signal import firwin , lfilter fs , datain = wavfile . read ( \"in.wav\" ) N = 512 lo = 500 hi = 1000 taps = firwin ( N , [ lo , hi ], pass_zero = False , nyq = fs / 2 ) filtered = lfilter ( taps , 1.0 , datain [: fs * 3 ]) plot ( filtered [ N :]) So, in the above we speed things up a bit more by filterering just the first 3 seconds of the input data. Then, we plot the filtered output. BUT: We only plot the valid filter output. The first N samples of filtered data are not valid so we do not plot. It's quick and we can get the result from our filter quickly. When you're looking at the plot you're probably thinking it'd be nice if the axis were now a bit more relevant. For example, the X Axis is the number of samples. As we'd probably like the X Axis to be time, we must adjust the x-Axis to suit In order to plot the time, we need to generate the time! This is done by creating a range (or actually a linspace). The length of the range must be the same length as the data being plotted, so again we get rid of the inaccurate first N samples. t = numpy . linspace ( 0.0 , 3.0 , ( 3 * fs ) - N ) plot ( t , filtered [ N :], '-g' ) This plots the same as before, but now the x axis is scaled correctly to represent time. It is also coloured green, which is what '-g' means! Let's label the X Axis so that it's more obvious: xlabel ( \"Time (s)\" ) What we really want to do of course is plot both the original signal and the filtered signal at the same time so that we can see the difference between them. plot ( t , datain [ N : len ( filtered )], '-b' , t , filtered [ N :], '-g' ) xlabel ( \"Time (s)\" ) title ( \"500Hz to 1kHz Bandbass\" ) Note that you can look around the plot interactively with matplotlib. Click the four arrow icon and then pan with the mouse whilst holding the left button down and zoom (with axis) with the mouse whilst holding the right button down. Also note, as we previously only filtered a portion of the input data, make sure we limit the data sets to the same time range. I'll leave it to you to zoom and pan in to discover the phase delay in the filtered output. ;-)","title":"Splitting data sets in python"},{"location":"open-software/python/pylab/#frequency-domain-analysis","text":"The frequency domain can tell us a lot more about a signal than the time domain can sometimes. As we're applying a filter, it would be nice to see a frequency domain plot of the input signal and a similar one for the filtered signal. Working with Fast Fourier Transforms (FFT) is also made pretty easy in pylab. I shan't go into the theory about FFT's as there is plenty of information available in almost every Digital Signal Processing (DSP) book. It is an essenial part of DSP work and it is worth having a good understanding of the FFT and how it behaves. Hence, having an interactive python shell to do FFT calculations for you and plotting the results is a good bonus and will set you on your way with understanding them. I highly recommend Understaing Digital Signal Processing for this subject as it is an awesome book to read: http://www.amazon.co.uk/Understanding-Digital-Signal-Processing-Richard/dp/0137027419/ref=sr_1_1?ie=UTF8&qid=1310391681&sr=8-1 The FFT creates a number of frequency bins. The FFT puts a value in each bin according to that frequency's energy level in the data. The FFT produces results of + and - frequencies! Make sure you understand that. So, let's continue where we left off, we still have datain which contains our input data and we want to do an fft of the data. The number of bins generated by the FFT is equivalent to the number of samples over which the FFT is performed. In actual fact the bins are mirrored around the nyquist frequency. So in fact if we are sampling at 8kHz and we do a 1024 FFT (powers of two are best for FFTs) we will end up with 512 bins equidistantly spread between 0 to fs/2. Let's FFT: N = 1024 freq = fft ( datain [: N ]) Well, that was pretty easy! But there is a bit more required yet! If you haven't already, go ahead and plot the fft result: plot ( freq ) First off, we get an error about discarding the imaginary part of the values. That is okay, that is essentially the phase and we are not really interested in the phase. But, we also have negative magnitudes! Let's fix that first before we do anything else: plot ( abs ( freq )) Okay, that's a bit better, and abs gets rid of the complex part of the values too so there is now no warning from plot about discarding them. At least it now looks a bit more like we'd expect from an FFT. But there is another big problem, as I mentioned before an FFT should generate frequency bins between 0 and \u00b1 fs/2 so the x axis should read (if sampling at 8kHz) -4000 through to +4000. With that scale, the results should mirror around 0 on the x-axis. In actual fact it is quite easy to re-arrange the results from the FFT to produce what we want to plot Firstly, we need to create the X Axis, just like we did converting samples into time. Now though we want to convert bins into frequency. We do this by creating a range for the X axis: f = numpy . linspace ( - fs / 2 , fs / 2 , N ) Now we create a new array, re-arranging the results of the FFT so that negative values come first and then positive values. The actual results are the opposite way around! freq2 = abs ( concatenate (( freq [ N / 2 :], freq [: N / 2 ]))) In most cases, the negative half of the plot can be disregarded as it is a mirror of the positive frequency half. I'll leave that up to the reader to solve . Hopefully this page has given you some useful snippets of code which can get you up and running when trying to start analysing signals with pylab.","title":"Frequency Domain Analysis"},{"location":"open-software/python/pylab/#references-documentation","text":"The official documentation is very good for these projects. The official Numpy/Scipy documentation can be found here: http://docs.scipy.org/doc/ and the Matplotlib documentation can be found here: http://matplotlib.sourceforge.net/","title":"References / Documentation"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-card/","text":"BMC Card Scripts \u00b6 The scripts in this directory support generating card images. These images can then be written straight to an SD card, ready to boot a raspberry pi. Bootable SD Cards \u00b6 It's important to understand the booting process of the Raspberry Pi so we can generate a bootable SD Card that the RPi will run from. There's some information on the RPi site about the boot options in the config.txt file. From the readme.md of the main RPi firmware respository there's some information regarding the bootcode.bin , start*.elf and fixup*.dat files. Basically we need a FAT formatted SD Card with the bootcode.bin file and a matching set up start.elf and fixup.dat files to get the RPi to run. Scripts \u00b6 Some information about the various scripts and what they do create_card_image.sh \u00b6 Creates a .img file which can then be written to a card with the write_card.sh tool. write_card.sh \u00b6 Writes a .img file to an SD card. This tool generally needs to be run as root so you usually need to sudo ./write_card.sh","title":"BMC Card Scripts"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-card/#bmc-card-scripts","text":"The scripts in this directory support generating card images. These images can then be written straight to an SD card, ready to boot a raspberry pi.","title":"BMC Card Scripts"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-card/#bootable-sd-cards","text":"It's important to understand the booting process of the Raspberry Pi so we can generate a bootable SD Card that the RPi will run from. There's some information on the RPi site about the boot options in the config.txt file. From the readme.md of the main RPi firmware respository there's some information regarding the bootcode.bin , start*.elf and fixup*.dat files. Basically we need a FAT formatted SD Card with the bootcode.bin file and a matching set up start.elf and fixup.dat files to get the RPi to run.","title":"Bootable SD Cards"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-card/#scripts","text":"Some information about the various scripts and what they do","title":"Scripts"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-card/#create_card_imagesh","text":"Creates a .img file which can then be written to a card with the write_card.sh tool.","title":"create_card_image.sh"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-card/#write_cardsh","text":"Writes a .img file to an SD card. This tool generally needs to be run as root so you usually need to sudo ./write_card.sh","title":"write_card.sh"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-compiler/","text":"BMC Compiler \u00b6 The get_compiler.sh script downloads the supported compiler for the tutorials and sets up a file that can be included in shell scripts to access the compiler so you don't need to install any other packages. The current compiler is gcc-7.3.1","title":"BMC Compiler"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-compiler/#bmc-compiler","text":"The get_compiler.sh script downloads the supported compiler for the tutorials and sets up a file that can be included in shell scripts to access the compiler so you don't need to install any other packages. The current compiler is gcc-7.3.1","title":"BMC Compiler"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-firmware/","text":"BMC Firmware \u00b6 Use the get_latest_firmware.sh script to get the latest firmware from the official raspberry pi firmware repository . This firmware is used to start the Raspberry-Pi, even when we're talking about bare metal programming. The GPU (Graphics Processor Unit) is responsible for bootstrapping the ARM processor and the firmware ( kernel.img ) is loaded and run by the GPU to do the initial booting before starting the ARM.","title":"BMC Firmware"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-firmware/#bmc-firmware","text":"Use the get_latest_firmware.sh script to get the latest firmware from the official raspberry pi firmware repository . This firmware is used to start the Raspberry-Pi, even when we're talking about bare metal programming. The GPU (Graphics Processor Unit) is responsible for bootstrapping the ARM processor and the firmware ( kernel.img ) is loaded and run by the GPU to do the initial booting before starting the ARM.","title":"BMC Firmware"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/","text":"BMC Part 1 - Getting Started \u00b6 Although the Raspberry-Pi comes with a good Linux distribution, the Pi is about software development, and sometimes we want a real-time system without an operating system. I decided it'd be great to do a tutorial outside of Linux to get to the resources of this great piece of hardware in a similar vein to the Cambridge University Tutorials which are excellently written. However, they don't create an OS as purported and they stick with assembler rather than migrating to C. I will simply start with nothing but assembler to get us going, but switch to C as soon as possible. The C compiler simply converts C syntax to assembler and then assembles this into executable code for us anyway. I highly recommend going through the Cambridge University Raspberry Pi tutorials as they are excellent. If you want to learn a bit of assembler too, then definitely head off to there! These pages provide a similar experience, but with the additional of writing code in C and understanding the process behind that. TODO \u00b6 Why is a card of 16MiB necessary when we're not using anywhere near that? Compatibility \u00b6 There are quite a few versions of the RPi these days. This part of the tutorial supports the following models: RPi Model A RPi Model B RPi Zero RPi Zero W RPi Model B+ RPi 2 Model B RPi 3 Model B RPi 4 Model B Note It is not an error that the RPI 3 Model B+ is not included in this list. The ACK LED is only available through the mailbox interface (available from part-4 of the tutorial) and so cannot be used directly by the GPIO peripheral which we'll be using in this part of the tutorial. Cross Compiling for the Raspberry Pi (BCM2835/6/7/BCM23711) \u00b6 ARM have now taken over the arm-gcc-embedded project and are provided the releases, so pop over to the ARM gcc downloads section and pick up a toolchain. I've just grabbed 7.3.1 from the download page and I've locally installed it on my Linux machine to use with this tutorial. This is what I get when I run this on my command line having decompressed the archive: ~/arm-tutorial-rpi/compiler/gcc-arm-none-eabi-7-2018-q2-update/bin $ ./arm-none-eabi-gcc --version arm-none-eabi-gcc ( GNU Tools for Arm Embedded Processors 7 -2018-q2-update ) 7 .3.1 20180622 \\ ( release ) [ ARM/embedded-7-branch revision 261907 ] Copyright ( C ) 2017 Free Software Foundation, Inc. This is free software ; see the source for copying conditions. There is NO warranty ; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Cool. You can use the compiler/get_compiler.sh script as a short-cut to get the compiler and the tutorial scripts will make use of it if you do. Compiler Version \u00b6 Previously with a prior stab at this tutorial I always linked and recommended a fixed, known-working version of the compiler because everything then just worked out of the box. However, now I'm saying - just get the latest and then we can fix the tutorial as things break. NOTE: The disassembly listing you get may vary slightly from those generated by the gcc version being used in this tutorial if you're using a different compiler version or option set. RPI1 Compiler Flags \u00b6 The eLinux page gives us the optimal GCC settings for compiling code for the original Raspberry-Pi (V1): -Ofast -mfpu = vfp -mfloat-abi = hard -march = armv6zk -mtune = arm1176jzf-s It is noted that -Ofast may cause problems with some compilations, so it is probably better that we stick with the more traditional -O2 optimisation setting. The other flags merely tell GCC what type of floating point unit we have, tell it to produce hard-floating point code (GCC can create software floating point support instead), and tells GCC what ARM processor architecture we have so that it can produce optimal and compatible assembly/machine code. RPI2 Compiler Flags \u00b6 For the Raspberry-Pi 2 we know that the architecture is different. The ARM1176 from the original pi has been replaced by a quad core Cortex A7 processor. Therefore, in order to compile effectively for the Raspberry-Pi 2 we use a different set of compiler options: -O2 -mfpu = neon-vfpv4 -mfloat-abi = hard -march = armv7-a -mtune = cortex-a7 You can see from the ARM specification of the Cortex A7 that it contains a VFPV4 (See section 1.2.1) floating point processor and a NEON engine. The settings are gleaned from the GCC ARM options page. RPI3 Compiler Flags \u00b6 Like this: -O2 -mfpu = crypto-neon-fp-armv8 -mfloat-abi = hard -march = armv8-a+crc -mcpu = cortex-a53 RPI4 Compiler Flags \u00b6 From the Raspberry Pi Foundation page for the RPi4 we can glean some information from the technical specifications regarding what we need to do in order to compile code for the RPi4. All four processors are A72 . From the ARM documentation we can see that these implement the armv8-a architecture. This is the same as the A53 's found in the RPi3 so we can go ahead and use the same crypto-neon-fp-armv8 floating point unit option for the RPI4. This is detailed in the v8 architecture programmers guide -O2 -mfpu = crypto-neon-fp-armv8 -mfloat-abi = hard -march = armv8-a+crc -mcpu = cortex-a72 The schematics you would think would be the place to get the ACT LED GPIO port number, but alas, they're so sparse they may as well not have bothered releasing them. Seriously - what they've released is a joke . Instead we get it from some of the device tree source code for the RPi4 . Also make sure you've got the latest firmware, fixes are always being introduced! Getting to know the Compiler and Linker \u00b6 In order to use a C compiler, we need to understand what the compiler does and what the linker does in order to generate executable code. The compiler converts C statements into assembler and performs optimisation of the assembly instructions. This is in-fact all the C compiler does! The C compiler then implicitly calls the assembler to assemble that file (usually a temporary) into an object file. This will have relocatable machine code in it along with symbol information for the linker to use. These days the C compiler pipes the assembly to the assembler so there is no intermediate file as creating files is a lot slower than passing data from one program to another through a pipe. The linker's job is to link everything into an executable file. The linker requires a linker script. The linker script tells the linker how to organise the various object files. The linker will resolve symbols to addresses when it has arranged all the objects according to the rules in the linker script. What we're getting close to here is that a C program isn't just the code we type. There are some fundamental things that must happen for C code to run. For example, some variables need to be initialised to certain values, and some variables need to be initialised to 0. This is all taken care of by an object file which is usually implicitly linked in by the linker because the linker script will include a reference to it. The object file is called crt0.o (C Run-Time zero) This code uses symbols that the linker can resolve to clear the start of the area where initialised variables starts and ends in order to zero this memory section. It generally sets up a stack pointer, and it always includes a call to _main . Here's an important note: symbols present in C code get prepended with an underscore in the generation of the assembler version of the code. So where the start of a C program is the main symbol, in assembler we need to refer to it as it's assembler version which is _main . Github \u00b6 All of the source in the tutorials is available from the Github repo . So go clone or fork now so you have all the code to compile and modify as you work through the tutorials. git clone https://github.com/BrianSidebotham/arm-tutorial-rpi If you're on Windows - these day's I'll say, just get with the program and get yourself a Linux install. If you're entering the world of Raspberry Pi and/or embedded devices Linux is going to be your friend and will give you everything you need. This tutorial used to support both Linux and Windows, but I have no Windows installs left and so can't cover off Windows. If someone else takes that on, I'd fully support them in updating the tutorial - it's all on Github . Let's have a look at compiling one of the simplest programs that we can. Let's compile and link the following program ( part-1/armc-00 ): part-1/armc-00 \u00b6 int main ( void ) { while ( 1 ) { } return 0 ; } Compiling \u00b6 In order to compile the code (I realise there's not much to that code!) we can use the build.sh script in the tutorial directory. Navigate to part-1/armc-00 and run ./build.sh . With no arguments this script will just show you what it expects in order to run. arm-tutorial-rpi/part-1/armc-00 $ ./build.sh usage: build.sh <pi-model> pi-model options: rpi0, rpi1, rpi1bp, rpi2, rpi3, rpi3bp, rpi4 As there are different compiler flags for the various RPI models, it's necessary to tell the script what RPI you have in order to use the correct flags to compile with. The V1 boards are fitted with the Broadcom BCM2835 (ARM1176) and the V2 board uses the BCM2836 (ARM Cortex A7). The RPI3 uses a Cortex-A53. Because of the processor differences, we use different build commands to build for the various RPI models. Let's have a look at what the compiler command lines look like for the various RPI models. Let's just concentrate on the RPI-specific options rather than including all the options here. RPI0 (PiZero) and RPI1 \u00b6 arm-none-eabi-gcc \\ -mfloat-abi = hard \\ -mfpu = vfp \\ -march = armv6zk \\ -mtune = arm1176jzf-s \\ main.c -o main.elf RPI2 \u00b6 arm-none-eabi-gcc \\ -mfloat-abi = hard \\ -mfpu = neon-vfpv4 \\ -march = armv7-a \\ -mtune = cortex-a7 \\ main.c -o main.elf RPI3 \u00b6 arm-none-eabi-gcc \\ -mfloat-abi = hard \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a53 \\ main.c -o main.elf RPI4 \u00b6 arm-none-eabi-gcc \\ -mfloat-abi = hard \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a72 \\ main.c -o main.elf THIS IS EXPECTED TO FAIL : Using the build script, let's compile the basic source code using the RPI specific options. Here, we compile for the RPI3. (I've shortened the output so it's easier to read on-screen). valvers-new/arm-tutorial-rpi/part-1/armc-00 $ ./build.sh rpi3 arm-none-eabi-gcc -mfloat-abi = hard \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a53 \\ armc-00.c \\ -o kernel.armc-00.rpi3.elf GCC does successfully compile the source code (there are no C errors in it), but the linker fails with the following message: .../hard/libc.a ( lib_a-exit.o ) : In function ` exit ': exit.c:(.text.exit+0x1c): undefined reference to ' _exit ' collect2: error: ld returned 1 exit status So with our one-line command above we're invoking the C compiler, the assembler and the linker. The C compiler does most of the menial tasks for us to make life easier for us, but because we're embedded engineers (aren't we?) we MUST be aware of how the compiler, assembler and linker work at a very low level as we generally work with custom systems which we must describe intimately to the tool-chain. So there's a missing _exit symbol. This symbol is reference by the C library we're using. It is in-fact a system call. It's designed to be implemented by the OS. It would be called when a program terminates. In our case, we are our own OS at we're the only thing running, and in fact we will never exit so we do not need to really worry about it. System calls can be blank, they just merely need to be provided in order for the linker to resolve the symbol. So the C library has a requirement of system calls. Sometimes these are already implemented as blank functions, or implemented for fixed functionality. For a list of system calls see the newlib documentation on system calls . Newlib is an open source, and lightweight C library which can be compiled in many different flavours. The C library is what provides all of the C functionality found in standard C header files such as stdio.h , stlib.h , string.h , etc. At this point I want to note that the standard Hello World example won't work here without an OS, and it is exactly unimplemented system calls that prevent it from being our first example. The lowest part of printf(...) includes a write function write - this function is used by all of the functions in the C library that need to write to a file. In the case of printf, it needs to write to the file stdout. Generally when an OS is running stdout produces output visible on a screen which can then be piped to another file system file by the OS. Without an OS, stdout generally prints to a UART to so that you can see program output on a remote screen such as a PC running a terminal program. We will discuss write implementations later on in the tutorial series, let's move on... The easiest way to fix the link problem is to provide a minimal exit function to satisfy the linker. As it is never going to be used, all we need to do is shut the linker up and let it resolve _exit . So now, again with the build.sh script in armc-01 we can compile the next version of the code, part-1/armc-01.c int main ( void ) { while ( 1 ) { } return 0 ; } void exit ( int code ) { while ( 1 ) ; } NOTE: In case you're wondering, the C compiler prefixes an underscore to the generated symbols for functions, so we don't include an underscore, otherwise we'd end up with a function that the linker sees as __exit . If we were writing this in an assembler file, we'd have to include the underscore prefix ourselves. As we can see, compilation is successful and we get a kernel*.elf file generated by the compiler. Currently, that elf file is 37k. part-1/armc-01 $ ./build.sh rpi3 arm-none-eabi-gcc -mfloat-abi = hard \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a53 \\ armc-01.c \\ -o kernel.armc-01.rpi3.elf part-1/armc-01 $ ls -lh total 16K -rw-r--r-- 1 brian brian 366 Sep 21 00 :19 armc-01.c -rwxr-xr-x 1 brian brian 2 .3K Sep 21 00 :45 build.sh -rwxr-xr-x 1 brian brian 36K Sep 21 00 :45 kernel.armc-01.rpi3.elf It's important to have an infinite loop in the exit function. In the C library, which is not intended to be used with an operating system (hence arm-NONE-eabi-* ), _exit is marked as being noreturn. We must make sure it doesn't return otherwise we will get a warning about it. The prototype for _exit always includes an exit code int too. Yes, that's a bit oxymoronic! Now using the same build command above we get a clean build! Yay! But there is really a problem, in order to provide a system underneath the C library we will have to provide linker scripts and our own C Startup code. In order to skip that initially and to simply get up and running we'll just use GCC's option not to include any of the C startup routines, which excludes the need for exit too. The GCC options for that is -nostartfiles Getting to Know the Processor \u00b6 As in the Cambridge tutorials we will copy their initial example of illuminating an LED in order to know that our code is running correctly. This is nearly always the embedded developer's \"Hello World!\". Usually we'll blink the LED to make sure code is running and to know we're getting clocks at the speed we think we should. Raspberry-Pi Boot Process \u00b6 First, let's have a look at how a Raspberry-Pi processor boots. The BCM2385 from Broadcom includes two processors that we should know about, one is a Videocore\u2122 GPU which is why the Raspberry-Pi makes such a good media-centre and the other is the ARM core which runs the operating system. Both of these processors share the peripheral bus and also have to share some interrupt resources. Although in this case, share means that some interrupt sources are not available to the ARM processor because they are already taken by the GPU. The GPU starts running at reset or power on and includes code to read the first FAT partition of the SD Card on the MMC bus. It searches for and loads a file called bootcode.bin into memory and starts execution of that code. The bootcode.bin bootloader in turn searches the SD card for a file called start.elf and a config.txt file to set various kernel settings before searching the SD card again for a kernel.img file which it then loads into memory at a specific address (0x8000) and starts the ARM processor executing at that memory location. The GPU is now up and running and the ARM will start to come up using the code contained in kernel.img. The start.elf file contains the code that runs on the GPU to provide most of the requirements of OpenGL, etc. Therefore in order to boot your own code, you need to firstly compile your code to an executable and name it kernel.img, and put it onto a FAT formatted SD Card, which has the GPU bootloader (bootcode.bin, and start.elf) on it as well. The latest Raspberry-Pi firmware is available on GitHub . The bootloader is located under the boot sub-directory . The rest of the firmware provided is closed-binary video drivers. They are compiled for use under Linux so that accelerated graphics drivers are available. As we're not using Linux these files are of no use to us, only the bootloader firmware is. All this means that the processor is already up and running when it starts to run our code. Clock sources and PLL settings are already decided and programmed in the bootloader which alleviates that problem from us. We get to just start messing with the devices registers from an already running core. This is something I'm not that used too, normally the first thing in my code would be setting up correct clock and PLL settings to initialise the processor, but the GPU has setup the basic clocking scheme for us. The first thing we will need to set up is the GPIO controller. There are no drivers we can rely on as there is no OS running, all the bootloader has done is boot the processor into a working state, ready to start loading the OS. You'll need to get the Raspberry-Pi BCM2835 peripherals datahsheet , and make sure you pay attention to the errata for that too as it's not perfect. This gives us the information we require to control the IO peripherals of the BCM2835. I'll guide us through using the GPIO peripheral - there are as always some gotcha's: The Raspberry-Pi 2B 1.2 uses the BMC2837 and so you'll want to get the Raspberry-Pi BCM2837 peripherals datahsheet . NOTE: The 2837 peripherals document is just a modified version of the original 2835 document with the addresses updated to suit the 2837's base peripheral address. See rpi issue 325 for further details. We'll be using the GPIO peripheral, and it would therefore be natural to jump straight to that documentation and start writing code, but we need to first read some of the 'basic' information about the processor. The important bit to note is the virtual address information. On page 5 of the BCM2835 peripherals page we see an IO map for the processor. Again, as embedded engineers we must have the IO map to know how to address peripherals on the processor and in some cases how to arrange our linker scripts when there are multiple address spaces. The VC CPU Bus addresses relate to the Broadcom Video Core CPU. Although the Video Core CPU is what bootloads from the SD Card, execution is handed over to the ARM core by the time our kernel.img code is called. So we're not interested in the VC CPU Bus addresses. The ARM Physical addresses is the processors raw IO map when the ARM Memory Management Unit (MMU) is not being used. If the MMU is being used, the virtual address space is what what we'd be interested in. Before an OS kernel is running, the MMU is also not running as it has not been initialised and the core is running in kernel mode. Addresses on the bus are therefore accessed via their ARM Physical Address. We can see from the IO map that the VC CPU Address 0x7E000000 is mapped to ARM Physical Address 0x20000000 for the original Raspberry Pi. This is important! If you read the two peripheral datasheets carefully you'll see a subtle difference in them, notably , the Raspberry-Pi 2 has the ARM IO base set to 0x3F000000 instead of the original 0x20000000 of the original Raspberry-Pi. Unfortunately for us software engineers the Raspberry-Pi foundation don't appear to be good at securing the documentation we need, in fact, their attitude suggests they think we're magicians and don't actually need any. What a shame! Please if you're a member of the forum, campaign for more documentation. As engineers, especially in industry we wouldn't accept this from a manufacturer, we'd go elsewhere! In fact, we did at my work and use the TI Cortex A8 from the Beaglebone Black, a very good and well documented SoC! Anyway, the base address can be gleaned from searching for uboot patches. The Raspberry Pi 2 uses a BCM2836 so we can search for that and u-boot and we come along a patch for supporting the Raspberry-Pi 2 . Further on in the manual we come across the GPIO peripheral section of the manual (Chapter 6, page 89). RPi4 has the peripheral base mapped to 0xFE000000 . The peripheral address space looks to be laid out the same as the previous pis. Visual Output and Running Code \u00b6 Finally, let's get on and see some of our code running on the Raspberry-Pi. We'll continue with using the first example of the Cambridge tutorials by lighting the OK LED on the Raspberry-Pi board. The GPIO peripheral has a base address in the BCM2835 manual at 0x7E200000 . We know from getting to know our processor that this translates to an ARM Physical Address of 0x20200000 ( 0x3F200000 for RPI2 and RPI3, and 0xFE200000 for RPI4). This is the first register in the GPIO peripheral register set, the GPIO Function Select 0 register. In order to use an IO pin, we need to configure the GPIO peripheral. From the Raspberry-Pi schematic diagrams the OK LED is wired to the GPIO16 line (Sheet 2, B5) . The LED is wired active LOW - this is fairly standard practice. It means to turn the LED on we need to output a 0 (the pin is connected to 0V by the processor) and to turn it off we output a 1 (the pin is connected to VDD by the processor). Unfortunately, again, lack of documentation is rife and we don't have schematics for the Raspberry-Pi 2 or plus models! This is important because the GPIO lines were re-jigged and as Florin has noted in the comments section, the Raspberry Pi Plus configuration has the LED on GPIO47, so I've added the changes in brackets below for the RPI B+ models (Which includes the RPI 2). Back to the processor manual and we see that the first thing we need to do is set the GPIO pin to an output. This is done by setting the function of GPIO16 (GPIO47 RPI+) to an output. Bits 18 to 20 in the GPIO Function Select 1 register control the GPIO16 pin. Bits 21 to 23 in the GPIO Function Select 4 register control the GPIO47 pin. (RPI B+) Bits 27 to 29 in the GPIO Function Select 2 register control the GPIO29 pin. (RPI3 B+) GPIO42 pin. (RPI4) In C, we will generate a pointer to the register and use the pointer to write a value into the register. We will mark the register as volatile so that the compiler explicitly does what I tell it to. If we do not mark the register as volatile, the compiler is free to see that we do not access this register again and so to all intents and purposes the data we write will not be used by the program and the optimiser is free to throw away the write because it has no effect. The effect however is definitely required, but is only externally visible (the mode of the GPIO pin changes). We inform the compiler through the volatile keyword to not take anything for granted on this variable and to simply do as I say with it: We will use pre-processor definitions to change the base address of the GPIO peripheral depending on what RPI model is being targeted. #if defined( RPI0 ) || defined( RPI1 ) #define GPIO_BASE 0x20200000UL #elif defined( RPI2 ) || defined( RPI3 ) #define GPIO_BASE 0x3F200000UL #elif defined( RPI4 ) #define GPIO_BASE 0xFE200000UL #else #error Unknown RPI Model! #endif In order to set GPIO16 as an output then we need to write a value of 1 in the relevant bits of the function select register. Here we can rely on the fact that this register is set to 0 after a reset and so all we need to do is set: /* Assign the address of the GPIO peripheral (Using ARM Physical Address) */ gpio = ( unsigned int * ) GPIO_BASE ; gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); This code looks a bit messy, but we will tidy up and optimise later on. For now we just want to get to the point where we can light an LED and understand why it is lit! The ARM GPIO peripherals have an interesting way of doing IO. It's actually a bit different to most other processor IO implementations. There is a SET register and a CLEAR register. Writing 1 to any bits in the SET register will SET the corresponding GPIO pins to 1 (logic high), and writing 1 to any bits in the CLEAR register will CLEAR the corresponding GPIO pins to 0 (logic low). There are reasons for this implementation over a register where each bit is a pin and the bit value directly relates to the pins output level, but it's beyond the scope of this tutorial. So in order to light the LED we need to output a 0. We need to write a 1 to bit 16 in the CLEAR register: * gpio_clear |= ( 1 << 16 ); Putting what we've learnt into the minimal example above gives us a program that compiles and links into an executable which should provide us with a Raspberry-Pi that lights the OK LED when it is powered. Here's the complete code we'll compile part-1/armc-02 /* The base address of the GPIO peripheral (ARM Physical Address) */ #if defined( RPI0 ) || defined( RPI1 ) #define GPIO_BASE 0x20200000UL #elif defined( RPI2 ) || defined( RPI3 ) #define GPIO_BASE 0x3F200000UL #elif defined( RPI4 ) /* This comes from the linux source code: https://github.com/raspberrypi/linux/blob/rpi-4.19.y/arch/arm/boot/dts/bcm2838.dtsi */ #define GPIO_BASE 0xFE200000UL #else #error Unknown RPI Model! #endif /* TODO: Expand this to RPi4 as necessary */ #if defined( RPIBPLUS ) || defined( RPI2 ) #define LED_GPFSEL GPIO_GPFSEL4 #define LED_GPFBIT 21 #define LED_GPSET GPIO_GPSET1 #define LED_GPCLR GPIO_GPCLR1 #define LED_GPIO_BIT 15 #elif defined( RPI4 ) /* The RPi4 model has the ACT LED attached to GPIO 42 https://github.com/raspberrypi/linux/blob/rpi-4.19.y/arch/arm/boot/dts/bcm2838-rpi-4-b.dts */ #define LED_GPFSEL GPIO_GPFSEL4 #define LED_GPFBIT 6 #define LED_GPSET GPIO_GPSET1 #define LED_GPCLR GPIO_GPCLR1 #define LED_GPIO_BIT 10 #else #define LED_GPFSEL GPIO_GPFSEL1 #define LED_GPFBIT 18 #define LED_GPSET GPIO_GPSET0 #define LED_GPCLR GPIO_GPCLR0 #define LED_GPIO_BIT 16 #endif #define GPIO_GPFSEL0 0 #define GPIO_GPFSEL1 1 #define GPIO_GPFSEL2 2 #define GPIO_GPFSEL3 3 #define GPIO_GPFSEL4 4 #define GPIO_GPFSEL5 5 #define GPIO_GPSET0 7 #define GPIO_GPSET1 8 #define GPIO_GPCLR0 10 #define GPIO_GPCLR1 11 #define GPIO_GPLEV0 13 #define GPIO_GPLEV1 14 #define GPIO_GPEDS0 16 #define GPIO_GPEDS1 17 #define GPIO_GPREN0 19 #define GPIO_GPREN1 20 #define GPIO_GPFEN0 22 #define GPIO_GPFEN1 23 #define GPIO_GPHEN0 25 #define GPIO_GPHEN1 26 #define GPIO_GPLEN0 28 #define GPIO_GPLEN1 29 #define GPIO_GPAREN0 31 #define GPIO_GPAREN1 32 #define GPIO_GPAFEN0 34 #define GPIO_GPAFEN1 35 #define GPIO_GPPUD 37 #define GPIO_GPPUDCLK0 38 #define GPIO_GPPUDCLK1 39 /** GPIO Register set */ volatile unsigned int * gpio ; /** Simple loop variable */ volatile unsigned int tim ; /** Main function - we'll never return from here */ int main ( void ) __attribute__ (( naked )); int main ( void ) { /* Assign the address of the GPIO peripheral (Using ARM Physical Address) */ gpio = ( unsigned int * ) GPIO_BASE ; /* Write 1 to the GPIO16 init nibble in the Function Select 1 GPIO peripheral register to enable GPIO16 as an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin low ( Turn OK LED on for original Pi, and off for plus models )*/ gpio [ LED_GPCLR ] = ( 1 << LED_GPIO_BIT ); for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin high ( Turn OK LED off for original Pi, and on for plus models )*/ gpio [ LED_GPSET ] = ( 1 << LED_GPIO_BIT ); } } We now compile with the no start files option too: part-1/armc-02 $ ./build.sh rpi3 arm-none-eabi-gcc -nostartfiles \\ -mfloat-abi = hard \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a53 \\ armc-02.c \\ -o kernel.armc-02.rpi3.elf The linker gives us a warning, which we'll sort out later, but importantly the linker has resolved the problem for us. This is the warning we'll see and ignore: .../arm-none-eabi/bin/ld: warning: cannot find entry symbol _start ; defaulting to 0000000000008000 As we can see from the compilation, the standard output is ELF format which is essentially an executable wrapped with information that an OS binary loader may need to know. We need a binary ARM executable that only includes machine code. We can extract this using the objcopy utility: arm-none-eabi-objcopy kernel.elf -O binary kernel.img A quick note about the ELF format \u00b6 ELF is a file format used by some OS, including Linux which wraps the machine code with meta-data. The meta-data can be useful. In Linux and in fact most OS these days, running an executable doesn't mean the file gets loaded into memory and then the processor starts running from the address at which the file was loaded. There is usually an executable loader which uses formats like ELF to know more about the executable, for example the Function call interface might be different between different executables, this means that code can use different calling conventions which use different registers for different meanings when calling functions within a program. This can determine whether the executable loader will even allow the program to be loaded into memory or not. The ELF format meta-data can also include a list of all of the shared objects (SO, or DLL under Windows) that this executable also needs to have loaded. If any of the required libraries are not available, again the executable loader will not allow the file to be loaded and run. This is all intended (and does) to increase system stability and compatibility. We however, do not have an OS and the bootloader does not have any loader other than a disk read, directly copying the kernel.img file into memory at 0x8000 which is then where the ARM processor starts execution of machine code. Therefore we need to strip off the ELF meta-data and simply leave just the compiled machine code in the kernel.img file ready for execution. Back to our example \u00b6 This gives us the kernel.img binary file which should only contain ARM machine code. It should be tens of bytes long. You'll notice that kernel.elf on the otherhand is ~34Kb. Rename the kernel.img on your SD Card to something like old.kernel.img and save your new kernel.img to the SD Card. Booting from this SD Card should now leave the OK LED on permanently. The normal startup is for the OK LED to be on, then extinguish. If it remains extinguished something went wrong with building or linking your program. Otherwise if the LED remains lit, your program has executed successfully. A blinking LED is probably more appropriate to make sure that our code is definitely running. Let's quickly change the code to crudely blink an LED and then we'll look at sorting out the C library issues we had earlier as the C library is far too useful to not have access to it. Compile the code in part-1/armc-03 . The code listing is identical to part-1/armc-02 but the build scripts use objcopy to convert the ELF formatted binary to a raw binary ready to deploy on the SD card. You can see that a binary image is now in the folder and is a much more sane size for some code that does so little: part-1/armc-03 $ ./build.sh rpi3bp arm-none-eabi-gcc -g \\ -nostartfiles \\ -mfloat-abi = hard \\ -O0 \\ -DIOBPLUS \\ -DRPI3 \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a53 \\ armc-03.c \\ -o kernel.armc-03.rpi3bp.elf .../arm-none-eabi/bin/ld: warning: cannot find entry symbol _start ; defaulting to 0000000000008000 arm-none-eabi-objcopy kernel.armc-03.rpi3bp.elf -O binary kernel.img The kernel.img file contains just the ARM machine code and so is just a few hundred bytes. part-1/armc-03 $ ll total 28 drwxr-xr-x 2 brian brian 4096 Sep 21 01 :05 ./ drwxr-xr-x 6 brian brian 4096 Sep 21 00 :19 ../ -rw-r--r-- 1 brian brian 3894 Sep 21 00 :19 armc-03.c -rwxr-xr-x 1 brian brian 2805 Sep 21 01 :05 build.sh* -rwxr-xr-x 1 brian brian 16777216 Sep 21 01 :05 card.armc-03.rpi3bp.img -rwxr-xr-x 1 brian brian 35208 Sep 21 01 :05 kernel.armc-03.rpi3bp.elf* -rwxr-xr-x 1 brian brian 268 Sep 21 01 :05 kernel.armc-03.rpi3bp.img* Generating SD Cards \u00b6 The next step is how to get this kernel.img file onto an SD Card so we can boot the card and run our newly compiled code. A script, called make_card.sh was run during the build.sh script run. Have a look in the build.sh script to see the call near the end of the script. It does the work of generating an SD Card image that can be written directly to an SD card. The /card/make_card.sh script is worth a look. It can generate a card image without the need to user super user priveleges. It always uses the latest firmware available from the RPi Foundation GitHub repository Writing the image to the card can be done using cat so long as you know what the SD Card device is. If you'd rather, you can use the write_card.sh script in the card directory which you can use interactively to select the SD Card. If you prefer to do things manually you can insert the SD Card and then run dmesg | tail to view messages which will show you which device reference was used for the SD Card or else use lsblk to list all of the block devices available. DON'T GET THE SD CARD DEVICE WRONG OR YOU'LL COMPLETELY WIPE OUT ANOTHER DISK! When you know what disk to use, you can simply cat the image to the disk using cat kernel.armc-03.rpibp.img > /dev/sdg for example Provided Binaries \u00b6 As this is the first example where code should run and give you a visible output on your RPi, I've included the kernel binaries for each Raspberry-Pi board so that you can load the pre-built binary and see the LED flash before compiling your own kernel to make sure the build process is working for you. After this tutorial, you'll have to build your own binaries! Although the code may appear to be written a little odd, please stick with it! There are reasons why it's written how it is. Now you can experiment a bit from a basic starting point, but beware - automatic variables won't work, and nor will initialised variables because we have no C Run Time support yet. That will be where we start with Step 2 of Bare metal programming the Raspberry-Pi !","title":"BMC Part 1 - Getting Started"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#bmc-part-1-getting-started","text":"Although the Raspberry-Pi comes with a good Linux distribution, the Pi is about software development, and sometimes we want a real-time system without an operating system. I decided it'd be great to do a tutorial outside of Linux to get to the resources of this great piece of hardware in a similar vein to the Cambridge University Tutorials which are excellently written. However, they don't create an OS as purported and they stick with assembler rather than migrating to C. I will simply start with nothing but assembler to get us going, but switch to C as soon as possible. The C compiler simply converts C syntax to assembler and then assembles this into executable code for us anyway. I highly recommend going through the Cambridge University Raspberry Pi tutorials as they are excellent. If you want to learn a bit of assembler too, then definitely head off to there! These pages provide a similar experience, but with the additional of writing code in C and understanding the process behind that.","title":"BMC Part 1 - Getting Started"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#todo","text":"Why is a card of 16MiB necessary when we're not using anywhere near that?","title":"TODO"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#compatibility","text":"There are quite a few versions of the RPi these days. This part of the tutorial supports the following models: RPi Model A RPi Model B RPi Zero RPi Zero W RPi Model B+ RPi 2 Model B RPi 3 Model B RPi 4 Model B Note It is not an error that the RPI 3 Model B+ is not included in this list. The ACK LED is only available through the mailbox interface (available from part-4 of the tutorial) and so cannot be used directly by the GPIO peripheral which we'll be using in this part of the tutorial.","title":"Compatibility"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#cross-compiling-for-the-raspberry-pi-bcm283567bcm23711","text":"ARM have now taken over the arm-gcc-embedded project and are provided the releases, so pop over to the ARM gcc downloads section and pick up a toolchain. I've just grabbed 7.3.1 from the download page and I've locally installed it on my Linux machine to use with this tutorial. This is what I get when I run this on my command line having decompressed the archive: ~/arm-tutorial-rpi/compiler/gcc-arm-none-eabi-7-2018-q2-update/bin $ ./arm-none-eabi-gcc --version arm-none-eabi-gcc ( GNU Tools for Arm Embedded Processors 7 -2018-q2-update ) 7 .3.1 20180622 \\ ( release ) [ ARM/embedded-7-branch revision 261907 ] Copyright ( C ) 2017 Free Software Foundation, Inc. This is free software ; see the source for copying conditions. There is NO warranty ; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Cool. You can use the compiler/get_compiler.sh script as a short-cut to get the compiler and the tutorial scripts will make use of it if you do.","title":"Cross Compiling for the Raspberry Pi (BCM2835/6/7/BCM23711)"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#compiler-version","text":"Previously with a prior stab at this tutorial I always linked and recommended a fixed, known-working version of the compiler because everything then just worked out of the box. However, now I'm saying - just get the latest and then we can fix the tutorial as things break. NOTE: The disassembly listing you get may vary slightly from those generated by the gcc version being used in this tutorial if you're using a different compiler version or option set.","title":"Compiler Version"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#rpi1-compiler-flags","text":"The eLinux page gives us the optimal GCC settings for compiling code for the original Raspberry-Pi (V1): -Ofast -mfpu = vfp -mfloat-abi = hard -march = armv6zk -mtune = arm1176jzf-s It is noted that -Ofast may cause problems with some compilations, so it is probably better that we stick with the more traditional -O2 optimisation setting. The other flags merely tell GCC what type of floating point unit we have, tell it to produce hard-floating point code (GCC can create software floating point support instead), and tells GCC what ARM processor architecture we have so that it can produce optimal and compatible assembly/machine code.","title":"RPI1 Compiler Flags"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#rpi2-compiler-flags","text":"For the Raspberry-Pi 2 we know that the architecture is different. The ARM1176 from the original pi has been replaced by a quad core Cortex A7 processor. Therefore, in order to compile effectively for the Raspberry-Pi 2 we use a different set of compiler options: -O2 -mfpu = neon-vfpv4 -mfloat-abi = hard -march = armv7-a -mtune = cortex-a7 You can see from the ARM specification of the Cortex A7 that it contains a VFPV4 (See section 1.2.1) floating point processor and a NEON engine. The settings are gleaned from the GCC ARM options page.","title":"RPI2 Compiler Flags"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#rpi3-compiler-flags","text":"Like this: -O2 -mfpu = crypto-neon-fp-armv8 -mfloat-abi = hard -march = armv8-a+crc -mcpu = cortex-a53","title":"RPI3 Compiler Flags"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#rpi4-compiler-flags","text":"From the Raspberry Pi Foundation page for the RPi4 we can glean some information from the technical specifications regarding what we need to do in order to compile code for the RPi4. All four processors are A72 . From the ARM documentation we can see that these implement the armv8-a architecture. This is the same as the A53 's found in the RPi3 so we can go ahead and use the same crypto-neon-fp-armv8 floating point unit option for the RPI4. This is detailed in the v8 architecture programmers guide -O2 -mfpu = crypto-neon-fp-armv8 -mfloat-abi = hard -march = armv8-a+crc -mcpu = cortex-a72 The schematics you would think would be the place to get the ACT LED GPIO port number, but alas, they're so sparse they may as well not have bothered releasing them. Seriously - what they've released is a joke . Instead we get it from some of the device tree source code for the RPi4 . Also make sure you've got the latest firmware, fixes are always being introduced!","title":"RPI4 Compiler Flags"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#getting-to-know-the-compiler-and-linker","text":"In order to use a C compiler, we need to understand what the compiler does and what the linker does in order to generate executable code. The compiler converts C statements into assembler and performs optimisation of the assembly instructions. This is in-fact all the C compiler does! The C compiler then implicitly calls the assembler to assemble that file (usually a temporary) into an object file. This will have relocatable machine code in it along with symbol information for the linker to use. These days the C compiler pipes the assembly to the assembler so there is no intermediate file as creating files is a lot slower than passing data from one program to another through a pipe. The linker's job is to link everything into an executable file. The linker requires a linker script. The linker script tells the linker how to organise the various object files. The linker will resolve symbols to addresses when it has arranged all the objects according to the rules in the linker script. What we're getting close to here is that a C program isn't just the code we type. There are some fundamental things that must happen for C code to run. For example, some variables need to be initialised to certain values, and some variables need to be initialised to 0. This is all taken care of by an object file which is usually implicitly linked in by the linker because the linker script will include a reference to it. The object file is called crt0.o (C Run-Time zero) This code uses symbols that the linker can resolve to clear the start of the area where initialised variables starts and ends in order to zero this memory section. It generally sets up a stack pointer, and it always includes a call to _main . Here's an important note: symbols present in C code get prepended with an underscore in the generation of the assembler version of the code. So where the start of a C program is the main symbol, in assembler we need to refer to it as it's assembler version which is _main .","title":"Getting to know the Compiler and Linker"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#github","text":"All of the source in the tutorials is available from the Github repo . So go clone or fork now so you have all the code to compile and modify as you work through the tutorials. git clone https://github.com/BrianSidebotham/arm-tutorial-rpi If you're on Windows - these day's I'll say, just get with the program and get yourself a Linux install. If you're entering the world of Raspberry Pi and/or embedded devices Linux is going to be your friend and will give you everything you need. This tutorial used to support both Linux and Windows, but I have no Windows installs left and so can't cover off Windows. If someone else takes that on, I'd fully support them in updating the tutorial - it's all on Github . Let's have a look at compiling one of the simplest programs that we can. Let's compile and link the following program ( part-1/armc-00 ):","title":"Github"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#part-1armc-00","text":"int main ( void ) { while ( 1 ) { } return 0 ; }","title":"part-1/armc-00"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#compiling","text":"In order to compile the code (I realise there's not much to that code!) we can use the build.sh script in the tutorial directory. Navigate to part-1/armc-00 and run ./build.sh . With no arguments this script will just show you what it expects in order to run. arm-tutorial-rpi/part-1/armc-00 $ ./build.sh usage: build.sh <pi-model> pi-model options: rpi0, rpi1, rpi1bp, rpi2, rpi3, rpi3bp, rpi4 As there are different compiler flags for the various RPI models, it's necessary to tell the script what RPI you have in order to use the correct flags to compile with. The V1 boards are fitted with the Broadcom BCM2835 (ARM1176) and the V2 board uses the BCM2836 (ARM Cortex A7). The RPI3 uses a Cortex-A53. Because of the processor differences, we use different build commands to build for the various RPI models. Let's have a look at what the compiler command lines look like for the various RPI models. Let's just concentrate on the RPI-specific options rather than including all the options here.","title":"Compiling"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#rpi0-pizero-and-rpi1","text":"arm-none-eabi-gcc \\ -mfloat-abi = hard \\ -mfpu = vfp \\ -march = armv6zk \\ -mtune = arm1176jzf-s \\ main.c -o main.elf","title":"RPI0 (PiZero) and RPI1"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#rpi2","text":"arm-none-eabi-gcc \\ -mfloat-abi = hard \\ -mfpu = neon-vfpv4 \\ -march = armv7-a \\ -mtune = cortex-a7 \\ main.c -o main.elf","title":"RPI2"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#rpi3","text":"arm-none-eabi-gcc \\ -mfloat-abi = hard \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a53 \\ main.c -o main.elf","title":"RPI3"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#rpi4","text":"arm-none-eabi-gcc \\ -mfloat-abi = hard \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a72 \\ main.c -o main.elf THIS IS EXPECTED TO FAIL : Using the build script, let's compile the basic source code using the RPI specific options. Here, we compile for the RPI3. (I've shortened the output so it's easier to read on-screen). valvers-new/arm-tutorial-rpi/part-1/armc-00 $ ./build.sh rpi3 arm-none-eabi-gcc -mfloat-abi = hard \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a53 \\ armc-00.c \\ -o kernel.armc-00.rpi3.elf GCC does successfully compile the source code (there are no C errors in it), but the linker fails with the following message: .../hard/libc.a ( lib_a-exit.o ) : In function ` exit ': exit.c:(.text.exit+0x1c): undefined reference to ' _exit ' collect2: error: ld returned 1 exit status So with our one-line command above we're invoking the C compiler, the assembler and the linker. The C compiler does most of the menial tasks for us to make life easier for us, but because we're embedded engineers (aren't we?) we MUST be aware of how the compiler, assembler and linker work at a very low level as we generally work with custom systems which we must describe intimately to the tool-chain. So there's a missing _exit symbol. This symbol is reference by the C library we're using. It is in-fact a system call. It's designed to be implemented by the OS. It would be called when a program terminates. In our case, we are our own OS at we're the only thing running, and in fact we will never exit so we do not need to really worry about it. System calls can be blank, they just merely need to be provided in order for the linker to resolve the symbol. So the C library has a requirement of system calls. Sometimes these are already implemented as blank functions, or implemented for fixed functionality. For a list of system calls see the newlib documentation on system calls . Newlib is an open source, and lightweight C library which can be compiled in many different flavours. The C library is what provides all of the C functionality found in standard C header files such as stdio.h , stlib.h , string.h , etc. At this point I want to note that the standard Hello World example won't work here without an OS, and it is exactly unimplemented system calls that prevent it from being our first example. The lowest part of printf(...) includes a write function write - this function is used by all of the functions in the C library that need to write to a file. In the case of printf, it needs to write to the file stdout. Generally when an OS is running stdout produces output visible on a screen which can then be piped to another file system file by the OS. Without an OS, stdout generally prints to a UART to so that you can see program output on a remote screen such as a PC running a terminal program. We will discuss write implementations later on in the tutorial series, let's move on... The easiest way to fix the link problem is to provide a minimal exit function to satisfy the linker. As it is never going to be used, all we need to do is shut the linker up and let it resolve _exit . So now, again with the build.sh script in armc-01 we can compile the next version of the code, part-1/armc-01.c int main ( void ) { while ( 1 ) { } return 0 ; } void exit ( int code ) { while ( 1 ) ; } NOTE: In case you're wondering, the C compiler prefixes an underscore to the generated symbols for functions, so we don't include an underscore, otherwise we'd end up with a function that the linker sees as __exit . If we were writing this in an assembler file, we'd have to include the underscore prefix ourselves. As we can see, compilation is successful and we get a kernel*.elf file generated by the compiler. Currently, that elf file is 37k. part-1/armc-01 $ ./build.sh rpi3 arm-none-eabi-gcc -mfloat-abi = hard \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a53 \\ armc-01.c \\ -o kernel.armc-01.rpi3.elf part-1/armc-01 $ ls -lh total 16K -rw-r--r-- 1 brian brian 366 Sep 21 00 :19 armc-01.c -rwxr-xr-x 1 brian brian 2 .3K Sep 21 00 :45 build.sh -rwxr-xr-x 1 brian brian 36K Sep 21 00 :45 kernel.armc-01.rpi3.elf It's important to have an infinite loop in the exit function. In the C library, which is not intended to be used with an operating system (hence arm-NONE-eabi-* ), _exit is marked as being noreturn. We must make sure it doesn't return otherwise we will get a warning about it. The prototype for _exit always includes an exit code int too. Yes, that's a bit oxymoronic! Now using the same build command above we get a clean build! Yay! But there is really a problem, in order to provide a system underneath the C library we will have to provide linker scripts and our own C Startup code. In order to skip that initially and to simply get up and running we'll just use GCC's option not to include any of the C startup routines, which excludes the need for exit too. The GCC options for that is -nostartfiles","title":"RPI4"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#getting-to-know-the-processor","text":"As in the Cambridge tutorials we will copy their initial example of illuminating an LED in order to know that our code is running correctly. This is nearly always the embedded developer's \"Hello World!\". Usually we'll blink the LED to make sure code is running and to know we're getting clocks at the speed we think we should.","title":"Getting to Know the Processor"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#raspberry-pi-boot-process","text":"First, let's have a look at how a Raspberry-Pi processor boots. The BCM2385 from Broadcom includes two processors that we should know about, one is a Videocore\u2122 GPU which is why the Raspberry-Pi makes such a good media-centre and the other is the ARM core which runs the operating system. Both of these processors share the peripheral bus and also have to share some interrupt resources. Although in this case, share means that some interrupt sources are not available to the ARM processor because they are already taken by the GPU. The GPU starts running at reset or power on and includes code to read the first FAT partition of the SD Card on the MMC bus. It searches for and loads a file called bootcode.bin into memory and starts execution of that code. The bootcode.bin bootloader in turn searches the SD card for a file called start.elf and a config.txt file to set various kernel settings before searching the SD card again for a kernel.img file which it then loads into memory at a specific address (0x8000) and starts the ARM processor executing at that memory location. The GPU is now up and running and the ARM will start to come up using the code contained in kernel.img. The start.elf file contains the code that runs on the GPU to provide most of the requirements of OpenGL, etc. Therefore in order to boot your own code, you need to firstly compile your code to an executable and name it kernel.img, and put it onto a FAT formatted SD Card, which has the GPU bootloader (bootcode.bin, and start.elf) on it as well. The latest Raspberry-Pi firmware is available on GitHub . The bootloader is located under the boot sub-directory . The rest of the firmware provided is closed-binary video drivers. They are compiled for use under Linux so that accelerated graphics drivers are available. As we're not using Linux these files are of no use to us, only the bootloader firmware is. All this means that the processor is already up and running when it starts to run our code. Clock sources and PLL settings are already decided and programmed in the bootloader which alleviates that problem from us. We get to just start messing with the devices registers from an already running core. This is something I'm not that used too, normally the first thing in my code would be setting up correct clock and PLL settings to initialise the processor, but the GPU has setup the basic clocking scheme for us. The first thing we will need to set up is the GPIO controller. There are no drivers we can rely on as there is no OS running, all the bootloader has done is boot the processor into a working state, ready to start loading the OS. You'll need to get the Raspberry-Pi BCM2835 peripherals datahsheet , and make sure you pay attention to the errata for that too as it's not perfect. This gives us the information we require to control the IO peripherals of the BCM2835. I'll guide us through using the GPIO peripheral - there are as always some gotcha's: The Raspberry-Pi 2B 1.2 uses the BMC2837 and so you'll want to get the Raspberry-Pi BCM2837 peripherals datahsheet . NOTE: The 2837 peripherals document is just a modified version of the original 2835 document with the addresses updated to suit the 2837's base peripheral address. See rpi issue 325 for further details. We'll be using the GPIO peripheral, and it would therefore be natural to jump straight to that documentation and start writing code, but we need to first read some of the 'basic' information about the processor. The important bit to note is the virtual address information. On page 5 of the BCM2835 peripherals page we see an IO map for the processor. Again, as embedded engineers we must have the IO map to know how to address peripherals on the processor and in some cases how to arrange our linker scripts when there are multiple address spaces. The VC CPU Bus addresses relate to the Broadcom Video Core CPU. Although the Video Core CPU is what bootloads from the SD Card, execution is handed over to the ARM core by the time our kernel.img code is called. So we're not interested in the VC CPU Bus addresses. The ARM Physical addresses is the processors raw IO map when the ARM Memory Management Unit (MMU) is not being used. If the MMU is being used, the virtual address space is what what we'd be interested in. Before an OS kernel is running, the MMU is also not running as it has not been initialised and the core is running in kernel mode. Addresses on the bus are therefore accessed via their ARM Physical Address. We can see from the IO map that the VC CPU Address 0x7E000000 is mapped to ARM Physical Address 0x20000000 for the original Raspberry Pi. This is important! If you read the two peripheral datasheets carefully you'll see a subtle difference in them, notably , the Raspberry-Pi 2 has the ARM IO base set to 0x3F000000 instead of the original 0x20000000 of the original Raspberry-Pi. Unfortunately for us software engineers the Raspberry-Pi foundation don't appear to be good at securing the documentation we need, in fact, their attitude suggests they think we're magicians and don't actually need any. What a shame! Please if you're a member of the forum, campaign for more documentation. As engineers, especially in industry we wouldn't accept this from a manufacturer, we'd go elsewhere! In fact, we did at my work and use the TI Cortex A8 from the Beaglebone Black, a very good and well documented SoC! Anyway, the base address can be gleaned from searching for uboot patches. The Raspberry Pi 2 uses a BCM2836 so we can search for that and u-boot and we come along a patch for supporting the Raspberry-Pi 2 . Further on in the manual we come across the GPIO peripheral section of the manual (Chapter 6, page 89). RPi4 has the peripheral base mapped to 0xFE000000 . The peripheral address space looks to be laid out the same as the previous pis.","title":"Raspberry-Pi Boot Process"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#visual-output-and-running-code","text":"Finally, let's get on and see some of our code running on the Raspberry-Pi. We'll continue with using the first example of the Cambridge tutorials by lighting the OK LED on the Raspberry-Pi board. The GPIO peripheral has a base address in the BCM2835 manual at 0x7E200000 . We know from getting to know our processor that this translates to an ARM Physical Address of 0x20200000 ( 0x3F200000 for RPI2 and RPI3, and 0xFE200000 for RPI4). This is the first register in the GPIO peripheral register set, the GPIO Function Select 0 register. In order to use an IO pin, we need to configure the GPIO peripheral. From the Raspberry-Pi schematic diagrams the OK LED is wired to the GPIO16 line (Sheet 2, B5) . The LED is wired active LOW - this is fairly standard practice. It means to turn the LED on we need to output a 0 (the pin is connected to 0V by the processor) and to turn it off we output a 1 (the pin is connected to VDD by the processor). Unfortunately, again, lack of documentation is rife and we don't have schematics for the Raspberry-Pi 2 or plus models! This is important because the GPIO lines were re-jigged and as Florin has noted in the comments section, the Raspberry Pi Plus configuration has the LED on GPIO47, so I've added the changes in brackets below for the RPI B+ models (Which includes the RPI 2). Back to the processor manual and we see that the first thing we need to do is set the GPIO pin to an output. This is done by setting the function of GPIO16 (GPIO47 RPI+) to an output. Bits 18 to 20 in the GPIO Function Select 1 register control the GPIO16 pin. Bits 21 to 23 in the GPIO Function Select 4 register control the GPIO47 pin. (RPI B+) Bits 27 to 29 in the GPIO Function Select 2 register control the GPIO29 pin. (RPI3 B+) GPIO42 pin. (RPI4) In C, we will generate a pointer to the register and use the pointer to write a value into the register. We will mark the register as volatile so that the compiler explicitly does what I tell it to. If we do not mark the register as volatile, the compiler is free to see that we do not access this register again and so to all intents and purposes the data we write will not be used by the program and the optimiser is free to throw away the write because it has no effect. The effect however is definitely required, but is only externally visible (the mode of the GPIO pin changes). We inform the compiler through the volatile keyword to not take anything for granted on this variable and to simply do as I say with it: We will use pre-processor definitions to change the base address of the GPIO peripheral depending on what RPI model is being targeted. #if defined( RPI0 ) || defined( RPI1 ) #define GPIO_BASE 0x20200000UL #elif defined( RPI2 ) || defined( RPI3 ) #define GPIO_BASE 0x3F200000UL #elif defined( RPI4 ) #define GPIO_BASE 0xFE200000UL #else #error Unknown RPI Model! #endif In order to set GPIO16 as an output then we need to write a value of 1 in the relevant bits of the function select register. Here we can rely on the fact that this register is set to 0 after a reset and so all we need to do is set: /* Assign the address of the GPIO peripheral (Using ARM Physical Address) */ gpio = ( unsigned int * ) GPIO_BASE ; gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); This code looks a bit messy, but we will tidy up and optimise later on. For now we just want to get to the point where we can light an LED and understand why it is lit! The ARM GPIO peripherals have an interesting way of doing IO. It's actually a bit different to most other processor IO implementations. There is a SET register and a CLEAR register. Writing 1 to any bits in the SET register will SET the corresponding GPIO pins to 1 (logic high), and writing 1 to any bits in the CLEAR register will CLEAR the corresponding GPIO pins to 0 (logic low). There are reasons for this implementation over a register where each bit is a pin and the bit value directly relates to the pins output level, but it's beyond the scope of this tutorial. So in order to light the LED we need to output a 0. We need to write a 1 to bit 16 in the CLEAR register: * gpio_clear |= ( 1 << 16 ); Putting what we've learnt into the minimal example above gives us a program that compiles and links into an executable which should provide us with a Raspberry-Pi that lights the OK LED when it is powered. Here's the complete code we'll compile part-1/armc-02 /* The base address of the GPIO peripheral (ARM Physical Address) */ #if defined( RPI0 ) || defined( RPI1 ) #define GPIO_BASE 0x20200000UL #elif defined( RPI2 ) || defined( RPI3 ) #define GPIO_BASE 0x3F200000UL #elif defined( RPI4 ) /* This comes from the linux source code: https://github.com/raspberrypi/linux/blob/rpi-4.19.y/arch/arm/boot/dts/bcm2838.dtsi */ #define GPIO_BASE 0xFE200000UL #else #error Unknown RPI Model! #endif /* TODO: Expand this to RPi4 as necessary */ #if defined( RPIBPLUS ) || defined( RPI2 ) #define LED_GPFSEL GPIO_GPFSEL4 #define LED_GPFBIT 21 #define LED_GPSET GPIO_GPSET1 #define LED_GPCLR GPIO_GPCLR1 #define LED_GPIO_BIT 15 #elif defined( RPI4 ) /* The RPi4 model has the ACT LED attached to GPIO 42 https://github.com/raspberrypi/linux/blob/rpi-4.19.y/arch/arm/boot/dts/bcm2838-rpi-4-b.dts */ #define LED_GPFSEL GPIO_GPFSEL4 #define LED_GPFBIT 6 #define LED_GPSET GPIO_GPSET1 #define LED_GPCLR GPIO_GPCLR1 #define LED_GPIO_BIT 10 #else #define LED_GPFSEL GPIO_GPFSEL1 #define LED_GPFBIT 18 #define LED_GPSET GPIO_GPSET0 #define LED_GPCLR GPIO_GPCLR0 #define LED_GPIO_BIT 16 #endif #define GPIO_GPFSEL0 0 #define GPIO_GPFSEL1 1 #define GPIO_GPFSEL2 2 #define GPIO_GPFSEL3 3 #define GPIO_GPFSEL4 4 #define GPIO_GPFSEL5 5 #define GPIO_GPSET0 7 #define GPIO_GPSET1 8 #define GPIO_GPCLR0 10 #define GPIO_GPCLR1 11 #define GPIO_GPLEV0 13 #define GPIO_GPLEV1 14 #define GPIO_GPEDS0 16 #define GPIO_GPEDS1 17 #define GPIO_GPREN0 19 #define GPIO_GPREN1 20 #define GPIO_GPFEN0 22 #define GPIO_GPFEN1 23 #define GPIO_GPHEN0 25 #define GPIO_GPHEN1 26 #define GPIO_GPLEN0 28 #define GPIO_GPLEN1 29 #define GPIO_GPAREN0 31 #define GPIO_GPAREN1 32 #define GPIO_GPAFEN0 34 #define GPIO_GPAFEN1 35 #define GPIO_GPPUD 37 #define GPIO_GPPUDCLK0 38 #define GPIO_GPPUDCLK1 39 /** GPIO Register set */ volatile unsigned int * gpio ; /** Simple loop variable */ volatile unsigned int tim ; /** Main function - we'll never return from here */ int main ( void ) __attribute__ (( naked )); int main ( void ) { /* Assign the address of the GPIO peripheral (Using ARM Physical Address) */ gpio = ( unsigned int * ) GPIO_BASE ; /* Write 1 to the GPIO16 init nibble in the Function Select 1 GPIO peripheral register to enable GPIO16 as an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin low ( Turn OK LED on for original Pi, and off for plus models )*/ gpio [ LED_GPCLR ] = ( 1 << LED_GPIO_BIT ); for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin high ( Turn OK LED off for original Pi, and on for plus models )*/ gpio [ LED_GPSET ] = ( 1 << LED_GPIO_BIT ); } } We now compile with the no start files option too: part-1/armc-02 $ ./build.sh rpi3 arm-none-eabi-gcc -nostartfiles \\ -mfloat-abi = hard \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a53 \\ armc-02.c \\ -o kernel.armc-02.rpi3.elf The linker gives us a warning, which we'll sort out later, but importantly the linker has resolved the problem for us. This is the warning we'll see and ignore: .../arm-none-eabi/bin/ld: warning: cannot find entry symbol _start ; defaulting to 0000000000008000 As we can see from the compilation, the standard output is ELF format which is essentially an executable wrapped with information that an OS binary loader may need to know. We need a binary ARM executable that only includes machine code. We can extract this using the objcopy utility: arm-none-eabi-objcopy kernel.elf -O binary kernel.img","title":"Visual Output and Running Code"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#a-quick-note-about-the-elf-format","text":"ELF is a file format used by some OS, including Linux which wraps the machine code with meta-data. The meta-data can be useful. In Linux and in fact most OS these days, running an executable doesn't mean the file gets loaded into memory and then the processor starts running from the address at which the file was loaded. There is usually an executable loader which uses formats like ELF to know more about the executable, for example the Function call interface might be different between different executables, this means that code can use different calling conventions which use different registers for different meanings when calling functions within a program. This can determine whether the executable loader will even allow the program to be loaded into memory or not. The ELF format meta-data can also include a list of all of the shared objects (SO, or DLL under Windows) that this executable also needs to have loaded. If any of the required libraries are not available, again the executable loader will not allow the file to be loaded and run. This is all intended (and does) to increase system stability and compatibility. We however, do not have an OS and the bootloader does not have any loader other than a disk read, directly copying the kernel.img file into memory at 0x8000 which is then where the ARM processor starts execution of machine code. Therefore we need to strip off the ELF meta-data and simply leave just the compiled machine code in the kernel.img file ready for execution.","title":"A quick note about the ELF format"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#back-to-our-example","text":"This gives us the kernel.img binary file which should only contain ARM machine code. It should be tens of bytes long. You'll notice that kernel.elf on the otherhand is ~34Kb. Rename the kernel.img on your SD Card to something like old.kernel.img and save your new kernel.img to the SD Card. Booting from this SD Card should now leave the OK LED on permanently. The normal startup is for the OK LED to be on, then extinguish. If it remains extinguished something went wrong with building or linking your program. Otherwise if the LED remains lit, your program has executed successfully. A blinking LED is probably more appropriate to make sure that our code is definitely running. Let's quickly change the code to crudely blink an LED and then we'll look at sorting out the C library issues we had earlier as the C library is far too useful to not have access to it. Compile the code in part-1/armc-03 . The code listing is identical to part-1/armc-02 but the build scripts use objcopy to convert the ELF formatted binary to a raw binary ready to deploy on the SD card. You can see that a binary image is now in the folder and is a much more sane size for some code that does so little: part-1/armc-03 $ ./build.sh rpi3bp arm-none-eabi-gcc -g \\ -nostartfiles \\ -mfloat-abi = hard \\ -O0 \\ -DIOBPLUS \\ -DRPI3 \\ -mfpu = crypto-neon-fp-armv8 \\ -march = armv8-a+crc \\ -mcpu = cortex-a53 \\ armc-03.c \\ -o kernel.armc-03.rpi3bp.elf .../arm-none-eabi/bin/ld: warning: cannot find entry symbol _start ; defaulting to 0000000000008000 arm-none-eabi-objcopy kernel.armc-03.rpi3bp.elf -O binary kernel.img The kernel.img file contains just the ARM machine code and so is just a few hundred bytes. part-1/armc-03 $ ll total 28 drwxr-xr-x 2 brian brian 4096 Sep 21 01 :05 ./ drwxr-xr-x 6 brian brian 4096 Sep 21 00 :19 ../ -rw-r--r-- 1 brian brian 3894 Sep 21 00 :19 armc-03.c -rwxr-xr-x 1 brian brian 2805 Sep 21 01 :05 build.sh* -rwxr-xr-x 1 brian brian 16777216 Sep 21 01 :05 card.armc-03.rpi3bp.img -rwxr-xr-x 1 brian brian 35208 Sep 21 01 :05 kernel.armc-03.rpi3bp.elf* -rwxr-xr-x 1 brian brian 268 Sep 21 01 :05 kernel.armc-03.rpi3bp.img*","title":"Back to our example"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#generating-sd-cards","text":"The next step is how to get this kernel.img file onto an SD Card so we can boot the card and run our newly compiled code. A script, called make_card.sh was run during the build.sh script run. Have a look in the build.sh script to see the call near the end of the script. It does the work of generating an SD Card image that can be written directly to an SD card. The /card/make_card.sh script is worth a look. It can generate a card image without the need to user super user priveleges. It always uses the latest firmware available from the RPi Foundation GitHub repository Writing the image to the card can be done using cat so long as you know what the SD Card device is. If you'd rather, you can use the write_card.sh script in the card directory which you can use interactively to select the SD Card. If you prefer to do things manually you can insert the SD Card and then run dmesg | tail to view messages which will show you which device reference was used for the SD Card or else use lsblk to list all of the block devices available. DON'T GET THE SD CARD DEVICE WRONG OR YOU'LL COMPLETELY WIPE OUT ANOTHER DISK! When you know what disk to use, you can simply cat the image to the disk using cat kernel.armc-03.rpibp.img > /dev/sdg for example","title":"Generating SD Cards"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-1/#provided-binaries","text":"As this is the first example where code should run and give you a visible output on your RPi, I've included the kernel binaries for each Raspberry-Pi board so that you can load the pre-built binary and see the LED flash before compiling your own kernel to make sure the build process is working for you. After this tutorial, you'll have to build your own binaries! Although the code may appear to be written a little odd, please stick with it! There are reasons why it's written how it is. Now you can experiment a bit from a basic starting point, but beware - automatic variables won't work, and nor will initialised variables because we have no C Run Time support yet. That will be where we start with Step 2 of Bare metal programming the Raspberry-Pi !","title":"Provided Binaries"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/","text":"BMC Part 2 - The C Runtime \u00b6 In this part of the tutorial we'll look deeper into the linker and the C-Library so that we end up with a working C-Library link. Exciting stuff, huh?! Let's look further into what the compiler and linker are doing in order to create our bare-metal executable. The C-Runtime (different to the C-Library!) is currently missing from our code. In a lot of embedded systems the C-Runtime is essential, or else things break instantly. The most notable thing that's instantly visible in most embedded systems is that static variables are not initialised. This is why in our previous example, we were working without pre-initialised variables. Instead, we initialise the variable in the code at the start of main from a pre-processor define. Github The code for the tutorials is now on Github . You can either browse the code, checkout the code, fork, branch, or download as a zip from GibHub. Understanding the C-Runtime Startup \u00b6 Let's modify and use a pre-initialised variable instead: part-2/armc-04 \u00b6 #include \"rpi-gpio.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Simple loop variable */ volatile unsigned int tim ; /** Main function - we'll never return from here */ int main ( void ) { /* Write 1 to the GPIO16 init nibble in the Function Select 1 GPIO peripheral register to enable GPIO16 as an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin low ( Turn OK LED on for original Pi, and off for plus models )*/ gpio [ LED_GPCLR ] = ( 1 << LED_GPIO_BIT ); for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin high ( Turn OK LED off for original Pi, and on for plus models )*/ gpio [ LED_GPSET ] = ( 1 << LED_GPIO_BIT ); } } Compile it (using the build.sh script): part-2/armc-04 $ ./build.sh rpi0 arm-none-eabi-gcc -g -nostartfiles -mfloat-abi=hard -O0 -DRPI0 -mfpu=vfp -march=armv6zk \\ -mtune=arm1176jzf-s /.../part-2/armc-04/*.c -o /.../part-2/armc-04/kernel.armc-04.rpi0.elf /.../gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/../../../../\\ arm-none-eabi/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000008000 arm-none-eabi-objcopy /.../part-2/armc-04/kernel.armc-04.rpi0.elf -O binary \\ /.../part-2/armc-04/kernel.armc-04.rpi0.img and we notice a few things: The size of the binary image is now 33k, but the previous version of this code was only a hundred bytes or so! The code, when written to the SDCARD still works - this isn't really expected without a working C-Runtime in place to initialise the variable gpio before calling main!? part-2/armc-04 $ ls -lah total 40K drwxr-xr-x 2 brian brian 4 .0K Oct 11 21 :07 . drwxr-xr-x 8 brian brian 4 .0K Jan 4 2018 .. -rw-r--r-- 1 brian brian 1 .2K Sep 21 00 :19 armc-04.c -rwxr-xr-x 1 brian brian 2 .7K Oct 11 21 :07 build.sh -rwxr-xr-x 1 brian brian 108 Sep 21 00 :19 disassemble.sh -rwxr-xr-x 1 brian brian 35K Oct 11 21 :07 kernel.armc-04.rpi0.elf -rwxr-xr-x 1 brian brian 65K Oct 11 21 :07 kernel.armc-04.rpi0.img -rw-r--r-- 1 brian brian 1 .7K Sep 21 00 :19 rpi-gpio.h In fact, this embedded system is different to a lot because we're loading an entire binary image into RAM and then executing from RAM. The majority of systems have a non-volatile memory section (Flash/ROM) where the executable code resides, and a volatile memory section (RAM) where the variable data resides. Variables exist in RAM, everything has a position in RAM. When we compile for a target that executes from an image in Flash and uses RAM for variables, we need a copy of the initial values for the variables from Flash so that every time the system is started the variables can be initialised to their initial value, and we need the code in Flash to copy these values into the variables before main() is called. This is one of the jobs of the C-Runtime code (CRT). This is a code object that is normally linked in automagically by your tool-chain. This is usually not the only object to get linked to your code behind your back - usually the Interrupt Vector Table gets linked in too, and a Linker Script tells the linker how to organise these additional pieces of code in your memory layout. Normally of course, this happens without you knowing. In general, you'll select your processor or embedded system on the command line and the appropriate linker script and C-Runtime is chosen for you and linked in. I urge you to go and look at your arm-none-gcc-eabi install now to see some of these files. Look under the arm-none-eabi sub-directory and then under the lib sub-directory. The C-Runtime code is a binary object file and is called crt0.o , the C Library for info is an archive of object files called libc.a (there may be several versions with different names), and then you'll have some .ld files. Under the ldscripts subdirectory you'll find the standard linker scripts. It's just worth a look to know they're there. GCC uses a thing called specs files too, which allow specifying system settings so that you can create a machine specification that allows you to target a machine easily. You can select a custom specs file with a command line option for GCC, otherwise gcc uses it's built-in specs. specs files are considered an advanced subject in the world of the GNU tool-chain, but they provide an excellent way of supplying machine-specific compilation settings. For the embedded engineer they're worth knowing about! :D So, now we've got two questions, why does our code work - because the initialisation isn't present in the C-Runtime? and, why has our code size jumped from a 100 bytes or so to 64k? The code works without any initialisation because the variables exist in the same memory space as the code. The bootloading process results in the raspberry-pi kernel being loaded into RAM in order to be executed, the GPU bootloader runs before the ARM processor we're targeting runs, and loads the kernel.img file from disk. Because of this, the variables position within the binary image becomes their variable memory location. The image is loaded by the boot-loader at address 0x8000 and then executed. So the bootloader has essentially done a taskt that the C-Runtime would normally do, copy the initial values of initialised variables from non-volatile memory to volatile memory. Cool. Look at the code produced closer with a disassembler. You've already got a disassembler! It comes with the toolchain; Welcome to the world of objdump (or in our case arm-non-eabi-objdump ). We disassemble the elf file because then objdump knows what processor the binary was built for. It also then has knowledge of the different code sections too. There's a disassemble.sh script so go ahead and disassemble the code to see what the compiler generated. You'll get a kernel*.asm file that looks similar to if not the same as the following (RPI0) code: Disassembly of section .text: 00008000 <main>: 8000: e59f30b8 ldr r3, [pc, #184] ; 80c0 <main+0xc0> 8004: e5933000 ldr r3, [r3] 8008: e2833004 add r3, r3, #4 800c: e5932000 ldr r2, [r3] 8010: e59f30a8 ldr r3, [pc, #168] ; 80c0 <main+0xc0> 8014: e5933000 ldr r3, [r3] 8018: e2833004 add r3, r3, #4 801c: e3822701 orr r2, r2, #262144 ; 0x40000 8020: e5832000 str r2, [r3] 8024: e59f3098 ldr r3, [pc, #152] ; 80c4 <main+0xc4> 8028: e3a02000 mov r2, #0 802c: e5832000 str r2, [r3] 8030: ea000004 b 8048 <main+0x48> 8034: e59f3088 ldr r3, [pc, #136] ; 80c4 <main+0xc4> 8038: e5933000 ldr r3, [r3] 803c: e2833001 add r3, r3, #1 8040: e59f207c ldr r2, [pc, #124] ; 80c4 <main+0xc4> 8044: e5823000 str r3, [r2] 8048: e59f3074 ldr r3, [pc, #116] ; 80c4 <main+0xc4> 804c: e5933000 ldr r3, [r3] 8050: e59f2070 ldr r2, [pc, #112] ; 80c8 <main+0xc8> 8054: e1530002 cmp r3, r2 8058: 9afffff5 bls 8034 <main+0x34> 805c: e59f305c ldr r3, [pc, #92] ; 80c0 <main+0xc0> 8060: e5933000 ldr r3, [r3] 8064: e2833028 add r3, r3, #40 ; 0x28 8068: e3a02801 mov r2, #65536 ; 0x10000 806c: e5832000 str r2, [r3] 8070: e59f304c ldr r3, [pc, #76] ; 80c4 <main+0xc4> 8074: e3a02000 mov r2, #0 8078: e5832000 str r2, [r3] 807c: ea000004 b 8094 <main+0x94> 8080: e59f303c ldr r3, [pc, #60] ; 80c4 <main+0xc4> 8084: e5933000 ldr r3, [r3] 8088: e2833001 add r3, r3, #1 808c: e59f2030 ldr r2, [pc, #48] ; 80c4 <main+0xc4> 8090: e5823000 str r3, [r2] 8094: e59f3028 ldr r3, [pc, #40] ; 80c4 <main+0xc4> 8098: e5933000 ldr r3, [r3] 809c: e59f2024 ldr r2, [pc, #36] ; 80c8 <main+0xc8> 80a0: e1530002 cmp r3, r2 80a4: 9afffff5 bls 8080 <main+0x80> 80a8: e59f3010 ldr r3, [pc, #16] ; 80c0 <main+0xc0> 80ac: e5933000 ldr r3, [r3] 80b0: e283301c add r3, r3, #28 80b4: e3a02801 mov r2, #65536 ; 0x10000 80b8: e5832000 str r2, [r3] 80bc: eaffffd8 b 8024 <main+0x24 > 80c0: 000180cc andeq r8, r1, ip, asr #1 80c4: 000180d0 ldrdeq r8, [r1], -r0 80c8: 0007a11f andeq sl, r7, pc, lsl r1 Disassembly of section .data: 000180cc <gpio>: 180cc: 20200000 eorcs r0, r0, r0 Disassembly of section .bss: 000180d0 <tim>: 180d0: 00000000 andeq r0, r0, r0 NOTE: Unless we're using the exact same compiler, your mileage may vary here. So assume the assembly code above is what's come out of the compiler and follow the text below which goes through it in detail. Let's take it line by line. The toolchain's linker has decided that the entry point for the code should be at memory address 0x8000 . We see from the disassembled listing that this is where the machine code starts. Let's look at what it does. 00008000 <main>: 8000: e59f30b8 ldr r3, [pc, #184] ; 80c0 <main+0xc0> This first line loads r3 with the value at the address contained at the Program Counter (PC) + 184. In this assembler, [] is kind of an equivalent to dereferencing a pointer in C. So instead of loading r3 with the value 80c0 it will instead load r3 with the 32-bit value at memory location 0x80c0 But wait a minute - if you do the maths of 0x8000 + 184 you get 0x80b8 . How come the disassembler is suggesting the data comes from 0x80c0 ? Well PC relative addressing works slightly different to what you may expect and really there's a issue with it, the value of PC is different depending on whether the instruction set is currently ARM or Thumb. Further information is available on the ARM website . The important thing to note here is: In ARM state, the value of the PC is the address of the current instruction plus 8 bytes. In Thumb state: For B, BL, CBNZ, and CBZ instructions, the value of the PC is the address of the current instruction plus 4 bytes. For all other instructions that use labels, the value of the PC is the address of the current instruction plus 4 bytes, with bit[1] of the result cleared to 0 to make it word-aligned. We're in ARM instruction mode here. If you're not sure about ARM and Thumb instruction sets you can do some googling. Thumb (there's more than one Thumb mode!) are smaller width instructions to allow for more compact code which is very useful in heavily embedded systems. So actually the maths here sound be: 0x8000 + 0x8 + 0xb8 = 0x80c0 to get us to a memory address. At 0x80c0 there's the value 0x180cc ( 0x8000 + 0x80cc ): 80c0: 000180cc andeq r8, r1, ip, asr #1 You can ignore the disassembled version of this value as it's not machine code, instead it's merely a data value. The next line of the code loads r3 with the 32-bit value that's in memory at the address currently contained in r3. In c, this would look a bit horrid, but so you get the idea of what I've just explained, imagine something like this: uint32_t r3 = 0x180cc ; r3 = * ( uint32_t * ) r3 ; At the address 0x180cc in our disassembled version there's the 32-bit value 0x20200000 which is the value we want the variable gpio initialised to (for the RPI1, for the RPI2 this will be 0x3F200000 . So this is why the code works without any explicit loading or initialisation, but let's look at exactly what's going on and find out why it works like this. The value at the end of our executable image can be viewed by dumping the hex and having a look at the plain machine code that's in the binary file. The disassemble script does this for you with a tool called hexdump and puts the result into a kernel*.img.hexdump file. It's a plain text file - you can go ahead and crack it open in a text editor or cat it. 0000000 30b8 e59f 3000 e593 3004 e283 2000 e593 0000010 30a8 e59f 3000 e593 3004 e283 2701 e382 0000020 2000 e583 3098 e59f 2000 e3a0 2000 e583 0000030 0004 ea00 3088 e59f 3000 e593 3001 e283 0000040 207c e59f 3000 e582 3074 e59f 3000 e593 0000050 2070 e59f 0002 e153 fff5 9aff 305c e59f 0000060 3000 e593 3028 e283 2801 e3a0 2000 e583 0000070 304c e59f 2000 e3a0 2000 e583 0004 ea00 0000080 303c e59f 3000 e593 3001 e283 2030 e59f 0000090 3000 e582 3028 e59f 3000 e593 2024 e59f 00000a0 0002 e153 fff5 9aff 3010 e59f 3000 e593 00000b0 301c e283 2801 e3a0 2000 e583 ffd8 eaff 00000c0 80cc 0001 80d0 0001 a11f 0007 0000 0000 00000d0 0000 0000 0000 0000 0000 0000 0000 0000 * 00100c0 0000 0000 0000 0000 0000 0000 0000 2020 00100d0 The binary is in little-endian format because the processor is little endian. Adjust the GPIO_BASE value, recompile and disassemble again so you can see the value change. Sure the code won't work properly, but you can prove to yourself you're looking (and making sense of) the right thing. The thing to note here is that our binary image ends at 0x100cf . After the bootloader has placed this binary image in memory at 0x8000 the last memory location we touch is 0x180cf . Let's have a quick look at what happens next: 8008: e2833004 add r3, r3, #4 Increase the value in r3 from 0x20200000 to 0x20200004 and store it in r3. This is part of the C line: gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); LED_GPFSEL for this compilation for the RPI Zero is set by: #define LED_GPFSEL GPIO_GPFSEL1 #define GPIO_GPFSEL1 1 From the definition of gpio as volatile unsigned int* each item pointed to is an unsigned int which is 32-bit wide. That's 4 bytes, so we increase the pointer into gpio by 4 bytes to get the register address we require in r3. 800c: e5932000 ldr r2, [r3] Load the value of gpio[LED_GPFSEL] into r2. This is common for read-modify-write operations such as the |= operator we're using in this example. We need to do exactly that, read the value, modify the value and then write the new value. 8010: e59f30a8 ldr r3, [pc, #168] ; 80c0 <main+0xc0> 8014: e5933000 ldr r3, [r3] 8018: e2833004 add r3, r3, #4 The compiler being rather inefficient here. It's preparing r3 again to be the memory write destination which is exactly the same read memory location. Any sort of compiler optimisations should be able to get rid of the above three lines. They're really not required, but we understand what's going on still. 801c: e3822701 orr r2, r2, #262144 ; 0x40000 The modify part of |= . In this case (1 << LED_GPFBIT) has been reduced to a constant. The original gpio[LED_GPFSEL] value is still in r2. We OR that value with the constant to set the bit and store the new value in r2. The ARM architecture cannot modify a register value and store it to a memory location in a single instruction BTW in case you're thinking that would serve us better. 8020: e5832000 str r2, [r3] Finally, the write part of the read-modify-write operation is to write the new value back to the destination gpio[LED_GPFSEL] 8024: e59f3098 ldr r3, [pc, #152] ; 80c4 <main+0xc4> ... 80c4: 000180d0 ldrdeq r8, [r1], -r0 Loads the value 0x180d0 into r3. This value is a problem! It is outside our binary image space. If we were to use this value it would be a random value that isn't within our control. How come? This memory location relates to the C variable tim in our program. This variable is determined by the C standard to have automatic storage duration and according to the C standard should therefore have a initialised value of 0, but we know here that this is not the case, instead we'll have a random value. Actually what happens in the code next is the for loop starts by setting the tim variable to 0 . 8028: e3a02000 mov r2, #0 802c: e5832000 str r2, [r3] Let's do a sanity check and make sure we're right by assuming that this is the tim variable: 000180d4 B __bss_end__ 000180d4 B _bss_end__ 000180d0 B __bss_start 000180d0 B __bss_start__ 000180cc D __data_start 000180d0 D _edata 000180d4 B _end 000180d4 B __end__ 000180cc D gpio 00008000 T main 00080000 N _stack U _start 000180d0 B tim Yep! We're talking the same as nm . That's good at least! Now let's do an experiment. There's a reason I decoded the value 0x100cc which is the address of the gpio variable as 0x8000 + 0x80cc earlier: part-2/armc05.c \u00b6 #include \"rpi-gpio.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Simple loop variable */ volatile unsigned int tim ; /** Main function - we'll never return from here */ int main ( void ) __attribute__ (( naked )); int main ( void ) { /* Write 1 to the GPIO16 init nibble in the Function Select 1 GPIO peripheral register to enable GPIO16 as an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin low ( Turn OK LED on for original Pi, and off for plus models )*/ gpio [ LED_GPCLR ] = ( 1 << LED_GPIO_BIT ); for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin high ( Turn OK LED off for original Pi, and on for plus models )*/ gpio [ LED_GPSET ] = ( 1 << LED_GPIO_BIT ); for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin low ( Turn OK LED on for original Pi, and off for plus models )*/ gpio [ LED_GPCLR ] = ( 1 << LED_GPIO_BIT ); } } armc-05.c varies only slightly from armc-04.c in that it adds in some code. When we look at this with nm we see that the __data_start section shifts by the same amount as the code we've added: part-2/armc-05 $ ./build.sh rpi0 ... part-2/armc-05 $ ./disassemble.sh ... part-2/armc-05 $ cat kernel.armc-05.rpi0.elf.nm 00018120 B __bss_end__ 00018120 B _bss_end__ 0001811c B __bss_start 0001811c B __bss_start__ 00018118 D __data_start 0001811c D _edata 00018120 B _end 00018120 B __end__ 00018118 D gpio 00008000 T main 00080000 N _stack U _start 0001811c B tim If we go back to the original disassembled output above, we see that address 0x80cc (0x180cc - (0x8000 * 2)) is the next available memory address after the constants data which is itself immediately after the code section. I hope you're following this, we're really seeing a \"bug\" in the linker script. There's no need for us to have this offset. The offset load is correct because when we load this image in RAM the data is indeed going to be + 0x8000 because that's where the boot-loader is going to place the image, but something is spacing the data section away from the constants data. There's a lot more output when building this code. That's because we've added an option ( -Wl,-verbose ) to get verbose output from the linker to see what's going on. As you see from the start of the ld verbose output: GNU ld (GNU Tools for Arm Embedded Processors 7-2017-q4-major) 2.29.51.20171128 Supported emulations: armelf using internal linker script: LD is using an internal linker script. That means the linker script it's using is compiled into the ld executable. part-2/armc-06.c \u00b6 The code is identical to armc-04.c . (So the original code without the additional loop in armc-05.c ) However, we add -Wl,-T,rpi.x to the compilation command to instruct LD to use a different linker script to the one it was using. We've retained -Wl,verbose so we can see what happens. When passing options to the linker using GCC to compile and link, check the gcc documentation which details the options you can pass. Now we have control of the linker script. We can try to find out what's \"wrong\". I quote wrong, because technically this works, but we've got an annoying 0x8000 offset. It'll be a pain to debug one day, I know it. Let's find out what we need to do to fix it instead. You can also see how complicated a linker script can get when it needs to deal with C++ sections! I hope you're staying with me! I know this may seem far removed from C development on the Raspberry-Pi bare-metal, but in fact knowing how your tools work to construct the code is essential later on down the line - heck you wouldn't be getting it up and running on your own from scratch unless you knew at least some of this stuff! Whilst I'm scan-reading the linker script I'm looking for things that stick out. Most of these sections are not used in our basic example so far, so whatever is messing with us must have a size set, and must be present only when we have something in the initialised variables section which we know from our investigations with nm is the __data_start section (it aligns with the gpio symbol which we initialised). The \"problem\" must be between the __data_start section and end of the text section (the symbol main indicated the start of the text section). After a little bit of hunting, I see a comment and an alignment pertaining to the data section on line 107: /* Adjust the address for the data segment. We want to adjust up to the same address within the page on the next page up. */ . = ALIGN ( CONSTANT ( MAXPAGESIZE )) + (. & ( CONSTANT ( MAXPAGESIZE ) - 1 )); Interesting, we apparently \"want\" to adjust up to the next page. If I comment this out with a standard C-style comment as can be seen in the rest of the file, we get back down to a size of a few hundred bytes with initialised data. Check again with the output of: part-2/armc-06 $ ll -rwxr-xr-x 1 brian brian 284 Oct 14 22:17 kernel.armc-06.rpi0.img* When we disassemble the kernel code, we end up with something similar to the following: part-2/armc-06 $ ./disassemble.sh Disassembly of section .text: 00008000 <main>: 8000: e59f30b8 ldr r3, [pc, #184] ; 80c0 <main+0xc0> 8004: e5933000 ldr r3, [r3] 8008: e2833010 add r3, r3, #16 800c: e5932000 ldr r2, [r3] 8010: e59f30a8 ldr r3, [pc, #168] ; 80c0 <main+0xc0> 8014: e5933000 ldr r3, [r3] 8018: e2833010 add r3, r3, #16 801c: e3822602 orr r2, r2, #2097152 ; 0x200000 8020: e5832000 str r2, [r3] 8024: e59f3098 ldr r3, [pc, #152] ; 80c4 <main+0xc4> 8028: e3a02000 mov r2, #0 802c: e5832000 str r2, [r3] 8030: ea000004 b 8048 <main+0x48> 8034: e59f3088 ldr r3, [pc, #136] ; 80c4 <main+0xc4> 8038: e5933000 ldr r3, [r3] 803c: e2833001 add r3, r3, #1 8040: e59f207c ldr r2, [pc, #124] ; 80c4 <main+0xc4> 8044: e5823000 str r3, [r2] 8048: e59f3074 ldr r3, [pc, #116] ; 80c4 <main+0xc4> 804c: e5933000 ldr r3, [r3] 8050: e59f2070 ldr r2, [pc, #112] ; 80c8 <main+0xc8> 8054: e1530002 cmp r3, r2 8058: 9afffff5 bls 8034 <main+0x34> 805c: e59f305c ldr r3, [pc, #92] ; 80c0 <main+0xc0> 8060: e5933000 ldr r3, [r3] 8064: e283302c add r3, r3, #44 ; 0x2c 8068: e3a02902 mov r2, #32768 ; 0x8000 806c: e5832000 str r2, [r3] 8070: e59f304c ldr r3, [pc, #76] ; 80c4 <main+0xc4> 8074: e3a02000 mov r2, #0 8078: e5832000 str r2, [r3] 807c: ea000004 b 8094 <main+0x94> 8080: e59f303c ldr r3, [pc, #60] ; 80c4 <main+0xc4> 8084: e5933000 ldr r3, [r3] 8088: e2833001 add r3, r3, #1 808c: e59f2030 ldr r2, [pc, #48] ; 80c4 <main+0xc4> 8090: e5823000 str r3, [r2] 8094: e59f3028 ldr r3, [pc, #40] ; 80c4 <main+0xc4> 8098: e5933000 ldr r3, [r3] 809c: e59f2024 ldr r2, [pc, #36] ; 80c8 <main+0xc8> 80a0: e1530002 cmp r3, r2 80a4: 9afffff5 bls 8080 <main+0x80> 80a8: e59f3010 ldr r3, [pc, #16] ; 80c0 <main+0xc0> 80ac: e5933000 ldr r3, [r3] 80b0: e2833020 add r3, r3, #32 80b4: e3a02902 mov r2, #32768 ; 0x8000 80b8: e5832000 str r2, [r3] 80bc: eaffffd8 b 8024 <main+0x24> 80c0: 000080cc andeq r8, r0, ip, asr #1 80c4: 000080d0 ldrdeq r8, [r0], -r0 80c8: 0007a11f andeq sl, r7, pc, lsl r1 Disassembly of section .data: 000080cc <gpio>: 80cc: 20200000 eorcs r0, r0, r0 Disassembly of section .bss: 000080d0 <tim>: 80d0: 00000000 andeq r0, r0, r0 Use the ARM instruction set quick reference card to decypher if you're not familiar with ARM assembler. By the way, as a quick note - the comment in the linker script is entirely useless as it only describes what the code is doing, the worst type of comment! There is no WHY in the comment. Why are we wanting to do this? What's the reason for forcing the alignment? Anyway this alignment was forcing the 0x8000 additional offset to our rodata (initialised data) section. Cool, now the initialised data is tagged immediately on the end of the data and the values look sane too! I'll leave you to decode the assembly. part-2/armc-07 \u00b6 The code here is the same as armc-06.c . Nothing has changed, we'll just modify our linker script. At this point, we can get rid of the annoying _start undefined symbol warning. At the top of the linker script, on line 9 you'll see a line that says ENTRY(_start) In armc-07 we've changed this to read ENTRY(main) The warning will go away at last! But we'll soon learn why we need that _start section for the C-Runtime anyway! Have a quick check of the sections with nm again, now there's no Undefined sections! part-2/armc-07 $ ./build.sh rpi0 arm-none-eabi-gcc -g -nostartfiles -mfloat-abi=hard -O0 -DRPI0 -mfpu=vfp -march=armv6zk \\ -mtune=arm1176jzf-s part-2/armc-07/*.c -o part-2/armc-07/kernel.armc-07.rpi0.elf arm-none-eabi-objcopy part-2/armc-07/kernel.armc-07.rpi0.elf -O binary \\ part-2/armc-07/kernel.armc-07.rpi0.img part-2/armc-07 $ ./disassemble.sh part-2/armc-07 $ cat ./kernel.armc-07.rpi0.elf.nm 000080d4 B __bss_end__ 000080d4 B _bss_end__ 000080d0 B __bss_start 000080d0 B __bss_start__ 000080cc D __data_start 000080d0 D _edata 000080d4 B _end 000080d4 B __end__ 000080cc D gpio 00008000 T main 00080000 N _stack 000080d0 B tim Sections and C Startup \u00b6 As we've found out, there are a lot of sections, some which you may not know the meaning of. The .bss section is used for data that is implicitly initialised to 0 at startup (This is mandated by the C Standard). This means that all variables that are statically declared are set to zero initially. Statically declared essentially means global, so local (automatic) variables in a function that are not marked as static do not get initialised to zero if you do not explicitly add an initial value. It's easier with an example, take for example the following C file: unsigned int var1 ; unsigned int var2 ; unsigned int var3 = 10 ; void function ( void ) { unsigned int funcvar1 ; static unsigned int funcvar2 ; /* ... */ } In the above example var1, var2 and funcvar2 are in the bss section, the rest are not. For more information on the bss section, see the wikipedia page on it The linker organises the data and sorts it out into the different sections. In the above, var3 for example goes into the data section. The code is compiled into machine code and then put in the .text section. See here for \"a little!\" more information about the text section. There can be many text sections and there can be many data sections too. These sections are wild-carded in the linker script to ensure different sections can be defined whilst still knowing whether they are code or data sections. In our current code (armc-07) the bss section is not valid because it is not being initialised. That's because the C-Startup is missing. This is the importance of the _start symbol! The _start section is run before the c main() entry point and one of it's jobs is to initialise the bss section. The linker provides us with a couple of symbols for the sections so we know where they start and end. In the startup code all we need to do is loop between the addresses defined by bss_start and bss_end and set all locations to zero. It's easy when you know what you're meant to do! The _startup code should also setup the stack pointer. We'll need a working stack to get anything useful up and working! The stack is temporary memory space available for functions to use. The compiler tries to use registers for local (automatic) function variables, but if the size of data required by the local variables exceeds the amount of registers available, the compiler uses the stack for the local variables. So lets go ahead and setup the stack pointer to a sane value and initialise the bss section. Firstly, we'll set the linker script back to standard so the entry point is the _start symbol again, we'll have to generate this symbol and generally we'll need to do this is assembler. We need to setup the stack pointer before we enter the C code so that we're safe to write C which may attempt to use the stack straight away. Normally the complete startup is done in assembler, including zeroing the bss section, but it doesn't have to! I prefer to get into C as soon as possible, so let's see how little assembler we can get away with, and see what trips us up next! armc-08-start.S \u00b6 .section \".text.startup\" .global _start _start: // Set the stack pointer, which progresses downwards through memory // Set it at 64MB which we know our application will not crash into // and we also know will be available to the ARM CPU. No matter what // settings we use to split the memory between the GPU and ARM CPU ldr sp, =0x8000 // Run the c startup function - should not return and will call kernel_main b _cstartup _inf_loop: b _inf_loop Not bad! There's not exactly a lot there to set up the stack pointer. The stack is placed at the start of our program and grows downwards through memory. You don't need a large amount of memory for the stack. Some important information about the .section declaration. With the linker script, I can see in rpi.x that the following text sections are available: .text : { *(.text.unlikely .text.*_unlikely .text.unlikely.*) *(.text.exit .text.exit.*) *(.text.startup .text.startup.*) *(.text.hot .text.hot.*) *(.text .stub .text.* .gnu.linkonce.t.*) /* .gnu.warning sections are handled specially by elf32.em. */ *(.gnu.warning) *(.glue_7t) *(.glue_7) *(.vfp11_veneer) *(.v4_bx) } This is also the order in which the text section is linked together by the linker. The standard functions generally go in the standard .text section. Therefore, we can put our _startup function before the main .text section by putting it in the .text.startup section. Other than .text.unlikely and text.exit which we won't use, _startup will be the first thing to go into the text segment which is where execution will start at 0x8000 Then, we're in C for initialising the bss section by running the cstartup function: armc-08-cstartup.c \u00b6 extern int __bss_start__ ; extern int __bss_end__ ; extern void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ); void _cstartup ( unsigned int r0 , unsigned int r1 , unsigned int r2 ) { /*__bss_start__ and __bss_end__ are defined in the linker script */ int * bss = & __bss_start__ ; int * bss_end = & __bss_end__ ; /* Clear the BSS section See http://en.wikipedia.org/wiki/.bss for further information on the BSS section See https://sourceware.org/newlib/libc.html#Stubs for further information on the c-library stubs */ while ( bss < bss_end ) * bss ++ = 0 ; /* We should never return from main ... */ kernel_main ( r0 , r1 , r2 ); /* ... but if we do, safely trap here */ while ( 1 ) { /* EMPTY! */ } } Again, not that bad and pretty reasonable. NOTE: We've now changed from main to kernel_main , and there's a reason for this - the bootloader is actually expecting a slightly different entry definition compared to the standard C main function. So as we're setting up our own C-Runtime anyway, we can define the correct entry format. The correct bootloader entry point defines a couple of values which we can check to know what system we're booting. The actual C code hasn't really changed apart from the kernel_main difference: armc-08.c \u00b6 #include \"rpi-gpio.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Simple loop variable */ volatile unsigned int tim ; /** Main function - we'll never return from here */ void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ) { /* Write 1 to the GPIO16 init nibble in the Function Select 1 GPIO peripheral register to enable GPIO16 as an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin low ( Turn OK LED on for original Pi, and off for plus models )*/ gpio [ LED_GPCLR ] = ( 1 << LED_GPIO_BIT ); for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin high ( Turn OK LED off for original Pi, and on for plus models )*/ gpio [ LED_GPSET ] = ( 1 << LED_GPIO_BIT ); } } We again confirm with nm that everything is ordered at least something like sensible: part-2/armc-08 $ ./build.sh rpi0 arm-none-eabi-gcc -g -nostartfiles -mfloat-abi=hard -O0 -DRPI0 -mfpu=vfp -march=armv6zk \\ -mtune=arm1176jzf-s part-2/armc-08/*.S part-2/armc-08/*.c -o part-2/armc-08/kernel.armc-08.rpi0.elf arm-none-eabi-objcopy part-2/armc-08/kernel.armc-08.rpi0.elf -O binary \\ part-2/armc-08/kernel.armc-08.rpi0.img part-2/armc-08 $ ./disassemble.sh part-2/armc-08 $ cat ./kernel.armc-08.rpi0.elf.nm 00008164 B __bss_end__ 00008164 B _bss_end__ 00008160 B __bss_start 00008160 B __bss_start__ 0000800c T _cstartup 0000815c D __data_start 00008160 D _edata 00008164 B _end 00008164 B __end__ 0000815c D gpio 00008008 t _inf_loop 00008078 T kernel_main 00080000 N _stack 00008000 T _start 00008160 B tim Yup, looks good - _start is at 0x8000 where execution will start. Stick it on the card and make sure the OK LED is blinking still. I appreciate that we're doing a lot of work where you can't see more interesting results - but it'll get better soon, I promise! For now we're getting a great foundation for developing in C for the bare metal Raspberry-Pi. Knowing what your tools are doing is pretty essential! part-2/armc-08 $ ./make_card.sh rpi0 part-2/armc-08 $ cat ./card.armc-08.rpi0.img > /dev/sdg && sync && eject /dev/sdg The C-Library stubs \u00b6 Now that we've got the C-Runtime pretty much setup, we can implement the C-Library again with our own C-Runtime startup and C-Library stubs. This is where we want to get to - easy compiling with the C-Library being linked in so that we can make use of the C-Library functions on the Raspberry-Pi without an operating system. We are actually linking against the C-Library, but we're not using anything from within it. Therefore, the linker disregards the whole of the C-Library because there are no references to it within the code. Let's jump straight in and malloc some memory as I know that requires a stub. Compile armc-09 without the *-cstubs.c and you'll see the error: .../arm-none-eabi/lib/fpu\\libg.a(lib_a-sbrkr.o): In function `_sbrk_r': sbrkr.c:(.text._sbrk_r+0x18): undefined reference to `_sbrk' collect2.exe: error: ld returned 1 exit status So the malloc call is calling something in the c library called _sbrk_r which is a re-entrant safe (or multi-thread/interrupt safe) C library function all called _sbrk . This is the C-stub function that we must implement as it is operating-system dependant. It's worth looking at how other people have implemented these function calls. Look at them to see what they're doing. Generally you can look at other kernel code, or embedded system code: http://www.opensource.apple.com/source/Libc/Libc-763.12/emulated/brk.c http://linux.die.net/man/2/sbrk However, the best place is if examples are in the C-Library you're using! Newlib is well documented and includes example minimal systemc calls/stubs . We implement this in the next tutorial armc-09 armc-09-cstubs.c \u00b6 #include <sys/stat.h> /* A helper function written in assembler to aid us in allocating memory */ extern caddr_t _get_stack_pointer ( void ); /* Increase program data space. As malloc and related functions depend on this, it is useful to have a working implementation. The following suffices for a standalone system; it exploits the symbol _end automatically defined by the GNU linker. */ caddr_t _sbrk ( int incr ) { extern char _end ; static char * heap_end = 0 ; char * prev_heap_end ; if ( heap_end == 0 ) heap_end = & _end ; prev_heap_end = heap_end ; heap_end += incr ; return ( caddr_t ) prev_heap_end ; } armc-09-start.S \u00b6 .section \".text.startup\" .global _start .global _get_stack_pointer _start: // Set it at 64MB which we know our application will not crash into // and we also know will be available to the ARM CPU. No matter what // settings we use to split the memory between the GPU and ARM CPU // ldr sp, =0x8000 ldr sp, =(64 * 1024 * 1024) // Run the c startup function - should not return and will call kernel_main b _cstartup _inf_loop: b _inf_loop armc-09-cstartup.c \u00b6 extern int __bss_start__ ; extern int __bss_end__ ; extern void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ); void _cstartup ( unsigned int r0 , unsigned int r1 , unsigned int r2 ) { /*__bss_start__ and __bss_end__ are defined in the linker script */ int * bss = & __bss_start__ ; int * bss_end = & __bss_end__ ; /* Clear the BSS section See http://en.wikipedia.org/wiki/.bss for further information on the BSS section See https://sourceware.org/newlib/libc.html#Stubs for further information on the c-library stubs */ while ( bss < bss_end ) * bss ++ = 0 ; /* We should never return from main ... */ kernel_main ( r0 , r1 , r2 ); /* ... but if we do, safely trap here */ while ( 1 ) { /* EMPTY! */ } } part-2/armc-09.c \u00b6 #include <string.h> #include <stdlib.h> #include \"rpi-gpio.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Main function - we'll never return from here */ void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ) { int loop ; unsigned int * counters ; /* Set the LED GPIO pin to an output to drive the LED */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Allocate a block of memory for counters */ counters = malloc ( 1024 * sizeof ( unsigned int ) ); /* Failed to allocate memory! */ if ( counters == NULL ) while ( 1 ) { LED_ON (); /* Trap here */ } for ( loop = 0 ; loop < 1024 ; loop ++ ) counters [ loop ] = 0 ; /* Never exit as there is no OS to exit to! */ while ( 1 ) { /* Light the LED */ LED_ON (); for ( counters [ 0 ] = 0 ; counters [ 0 ] < 500000 ; counters [ 0 ] ++ ) ; /* Set the GPIO16 output low ( Turn OK LED on )*/ LED_OFF (); for ( counters [ 1 ] = 0 ; counters [ 1 ] < 500000 ; counters [ 1 ] ++ ) ; } } Build the example and program, now the counter variable is from malloc'd memory - usually malloc is the most mysterious of the c library stubs, but as you can see from the example, you can implement it easily and also implement it in C easily too! Of course occasionally it's necessary to drop down to assembler to get certain register values or talk to some special hardware features. Keep the cheat-sheet close at hand while you're working with the C-Stubs. Part 3 \u00b6 In the next part of the bare metal tutorial, we'll add on a build system so that we're not using a silly single command-line, and we can harness the power of a full build system for our bare-metal environment. We'll then fall back to the Cambridge ASM tutorials and progress to using the timer for flashing the LED rather than the incrementing loop counter we've used so far. So, what are you waiting for? Head off to Part3 now!","title":"BMC Part 2 - The C Runtime"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#bmc-part-2-the-c-runtime","text":"In this part of the tutorial we'll look deeper into the linker and the C-Library so that we end up with a working C-Library link. Exciting stuff, huh?! Let's look further into what the compiler and linker are doing in order to create our bare-metal executable. The C-Runtime (different to the C-Library!) is currently missing from our code. In a lot of embedded systems the C-Runtime is essential, or else things break instantly. The most notable thing that's instantly visible in most embedded systems is that static variables are not initialised. This is why in our previous example, we were working without pre-initialised variables. Instead, we initialise the variable in the code at the start of main from a pre-processor define. Github The code for the tutorials is now on Github . You can either browse the code, checkout the code, fork, branch, or download as a zip from GibHub.","title":"BMC Part 2 - The C Runtime"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#understanding-the-c-runtime-startup","text":"Let's modify and use a pre-initialised variable instead:","title":"Understanding the C-Runtime Startup"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#part-2armc-04","text":"#include \"rpi-gpio.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Simple loop variable */ volatile unsigned int tim ; /** Main function - we'll never return from here */ int main ( void ) { /* Write 1 to the GPIO16 init nibble in the Function Select 1 GPIO peripheral register to enable GPIO16 as an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin low ( Turn OK LED on for original Pi, and off for plus models )*/ gpio [ LED_GPCLR ] = ( 1 << LED_GPIO_BIT ); for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin high ( Turn OK LED off for original Pi, and on for plus models )*/ gpio [ LED_GPSET ] = ( 1 << LED_GPIO_BIT ); } } Compile it (using the build.sh script): part-2/armc-04 $ ./build.sh rpi0 arm-none-eabi-gcc -g -nostartfiles -mfloat-abi=hard -O0 -DRPI0 -mfpu=vfp -march=armv6zk \\ -mtune=arm1176jzf-s /.../part-2/armc-04/*.c -o /.../part-2/armc-04/kernel.armc-04.rpi0.elf /.../gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/../../../../\\ arm-none-eabi/bin/ld: warning: cannot find entry symbol _start; defaulting to 0000000000008000 arm-none-eabi-objcopy /.../part-2/armc-04/kernel.armc-04.rpi0.elf -O binary \\ /.../part-2/armc-04/kernel.armc-04.rpi0.img and we notice a few things: The size of the binary image is now 33k, but the previous version of this code was only a hundred bytes or so! The code, when written to the SDCARD still works - this isn't really expected without a working C-Runtime in place to initialise the variable gpio before calling main!? part-2/armc-04 $ ls -lah total 40K drwxr-xr-x 2 brian brian 4 .0K Oct 11 21 :07 . drwxr-xr-x 8 brian brian 4 .0K Jan 4 2018 .. -rw-r--r-- 1 brian brian 1 .2K Sep 21 00 :19 armc-04.c -rwxr-xr-x 1 brian brian 2 .7K Oct 11 21 :07 build.sh -rwxr-xr-x 1 brian brian 108 Sep 21 00 :19 disassemble.sh -rwxr-xr-x 1 brian brian 35K Oct 11 21 :07 kernel.armc-04.rpi0.elf -rwxr-xr-x 1 brian brian 65K Oct 11 21 :07 kernel.armc-04.rpi0.img -rw-r--r-- 1 brian brian 1 .7K Sep 21 00 :19 rpi-gpio.h In fact, this embedded system is different to a lot because we're loading an entire binary image into RAM and then executing from RAM. The majority of systems have a non-volatile memory section (Flash/ROM) where the executable code resides, and a volatile memory section (RAM) where the variable data resides. Variables exist in RAM, everything has a position in RAM. When we compile for a target that executes from an image in Flash and uses RAM for variables, we need a copy of the initial values for the variables from Flash so that every time the system is started the variables can be initialised to their initial value, and we need the code in Flash to copy these values into the variables before main() is called. This is one of the jobs of the C-Runtime code (CRT). This is a code object that is normally linked in automagically by your tool-chain. This is usually not the only object to get linked to your code behind your back - usually the Interrupt Vector Table gets linked in too, and a Linker Script tells the linker how to organise these additional pieces of code in your memory layout. Normally of course, this happens without you knowing. In general, you'll select your processor or embedded system on the command line and the appropriate linker script and C-Runtime is chosen for you and linked in. I urge you to go and look at your arm-none-gcc-eabi install now to see some of these files. Look under the arm-none-eabi sub-directory and then under the lib sub-directory. The C-Runtime code is a binary object file and is called crt0.o , the C Library for info is an archive of object files called libc.a (there may be several versions with different names), and then you'll have some .ld files. Under the ldscripts subdirectory you'll find the standard linker scripts. It's just worth a look to know they're there. GCC uses a thing called specs files too, which allow specifying system settings so that you can create a machine specification that allows you to target a machine easily. You can select a custom specs file with a command line option for GCC, otherwise gcc uses it's built-in specs. specs files are considered an advanced subject in the world of the GNU tool-chain, but they provide an excellent way of supplying machine-specific compilation settings. For the embedded engineer they're worth knowing about! :D So, now we've got two questions, why does our code work - because the initialisation isn't present in the C-Runtime? and, why has our code size jumped from a 100 bytes or so to 64k? The code works without any initialisation because the variables exist in the same memory space as the code. The bootloading process results in the raspberry-pi kernel being loaded into RAM in order to be executed, the GPU bootloader runs before the ARM processor we're targeting runs, and loads the kernel.img file from disk. Because of this, the variables position within the binary image becomes their variable memory location. The image is loaded by the boot-loader at address 0x8000 and then executed. So the bootloader has essentially done a taskt that the C-Runtime would normally do, copy the initial values of initialised variables from non-volatile memory to volatile memory. Cool. Look at the code produced closer with a disassembler. You've already got a disassembler! It comes with the toolchain; Welcome to the world of objdump (or in our case arm-non-eabi-objdump ). We disassemble the elf file because then objdump knows what processor the binary was built for. It also then has knowledge of the different code sections too. There's a disassemble.sh script so go ahead and disassemble the code to see what the compiler generated. You'll get a kernel*.asm file that looks similar to if not the same as the following (RPI0) code: Disassembly of section .text: 00008000 <main>: 8000: e59f30b8 ldr r3, [pc, #184] ; 80c0 <main+0xc0> 8004: e5933000 ldr r3, [r3] 8008: e2833004 add r3, r3, #4 800c: e5932000 ldr r2, [r3] 8010: e59f30a8 ldr r3, [pc, #168] ; 80c0 <main+0xc0> 8014: e5933000 ldr r3, [r3] 8018: e2833004 add r3, r3, #4 801c: e3822701 orr r2, r2, #262144 ; 0x40000 8020: e5832000 str r2, [r3] 8024: e59f3098 ldr r3, [pc, #152] ; 80c4 <main+0xc4> 8028: e3a02000 mov r2, #0 802c: e5832000 str r2, [r3] 8030: ea000004 b 8048 <main+0x48> 8034: e59f3088 ldr r3, [pc, #136] ; 80c4 <main+0xc4> 8038: e5933000 ldr r3, [r3] 803c: e2833001 add r3, r3, #1 8040: e59f207c ldr r2, [pc, #124] ; 80c4 <main+0xc4> 8044: e5823000 str r3, [r2] 8048: e59f3074 ldr r3, [pc, #116] ; 80c4 <main+0xc4> 804c: e5933000 ldr r3, [r3] 8050: e59f2070 ldr r2, [pc, #112] ; 80c8 <main+0xc8> 8054: e1530002 cmp r3, r2 8058: 9afffff5 bls 8034 <main+0x34> 805c: e59f305c ldr r3, [pc, #92] ; 80c0 <main+0xc0> 8060: e5933000 ldr r3, [r3] 8064: e2833028 add r3, r3, #40 ; 0x28 8068: e3a02801 mov r2, #65536 ; 0x10000 806c: e5832000 str r2, [r3] 8070: e59f304c ldr r3, [pc, #76] ; 80c4 <main+0xc4> 8074: e3a02000 mov r2, #0 8078: e5832000 str r2, [r3] 807c: ea000004 b 8094 <main+0x94> 8080: e59f303c ldr r3, [pc, #60] ; 80c4 <main+0xc4> 8084: e5933000 ldr r3, [r3] 8088: e2833001 add r3, r3, #1 808c: e59f2030 ldr r2, [pc, #48] ; 80c4 <main+0xc4> 8090: e5823000 str r3, [r2] 8094: e59f3028 ldr r3, [pc, #40] ; 80c4 <main+0xc4> 8098: e5933000 ldr r3, [r3] 809c: e59f2024 ldr r2, [pc, #36] ; 80c8 <main+0xc8> 80a0: e1530002 cmp r3, r2 80a4: 9afffff5 bls 8080 <main+0x80> 80a8: e59f3010 ldr r3, [pc, #16] ; 80c0 <main+0xc0> 80ac: e5933000 ldr r3, [r3] 80b0: e283301c add r3, r3, #28 80b4: e3a02801 mov r2, #65536 ; 0x10000 80b8: e5832000 str r2, [r3] 80bc: eaffffd8 b 8024 <main+0x24 > 80c0: 000180cc andeq r8, r1, ip, asr #1 80c4: 000180d0 ldrdeq r8, [r1], -r0 80c8: 0007a11f andeq sl, r7, pc, lsl r1 Disassembly of section .data: 000180cc <gpio>: 180cc: 20200000 eorcs r0, r0, r0 Disassembly of section .bss: 000180d0 <tim>: 180d0: 00000000 andeq r0, r0, r0 NOTE: Unless we're using the exact same compiler, your mileage may vary here. So assume the assembly code above is what's come out of the compiler and follow the text below which goes through it in detail. Let's take it line by line. The toolchain's linker has decided that the entry point for the code should be at memory address 0x8000 . We see from the disassembled listing that this is where the machine code starts. Let's look at what it does. 00008000 <main>: 8000: e59f30b8 ldr r3, [pc, #184] ; 80c0 <main+0xc0> This first line loads r3 with the value at the address contained at the Program Counter (PC) + 184. In this assembler, [] is kind of an equivalent to dereferencing a pointer in C. So instead of loading r3 with the value 80c0 it will instead load r3 with the 32-bit value at memory location 0x80c0 But wait a minute - if you do the maths of 0x8000 + 184 you get 0x80b8 . How come the disassembler is suggesting the data comes from 0x80c0 ? Well PC relative addressing works slightly different to what you may expect and really there's a issue with it, the value of PC is different depending on whether the instruction set is currently ARM or Thumb. Further information is available on the ARM website . The important thing to note here is: In ARM state, the value of the PC is the address of the current instruction plus 8 bytes. In Thumb state: For B, BL, CBNZ, and CBZ instructions, the value of the PC is the address of the current instruction plus 4 bytes. For all other instructions that use labels, the value of the PC is the address of the current instruction plus 4 bytes, with bit[1] of the result cleared to 0 to make it word-aligned. We're in ARM instruction mode here. If you're not sure about ARM and Thumb instruction sets you can do some googling. Thumb (there's more than one Thumb mode!) are smaller width instructions to allow for more compact code which is very useful in heavily embedded systems. So actually the maths here sound be: 0x8000 + 0x8 + 0xb8 = 0x80c0 to get us to a memory address. At 0x80c0 there's the value 0x180cc ( 0x8000 + 0x80cc ): 80c0: 000180cc andeq r8, r1, ip, asr #1 You can ignore the disassembled version of this value as it's not machine code, instead it's merely a data value. The next line of the code loads r3 with the 32-bit value that's in memory at the address currently contained in r3. In c, this would look a bit horrid, but so you get the idea of what I've just explained, imagine something like this: uint32_t r3 = 0x180cc ; r3 = * ( uint32_t * ) r3 ; At the address 0x180cc in our disassembled version there's the 32-bit value 0x20200000 which is the value we want the variable gpio initialised to (for the RPI1, for the RPI2 this will be 0x3F200000 . So this is why the code works without any explicit loading or initialisation, but let's look at exactly what's going on and find out why it works like this. The value at the end of our executable image can be viewed by dumping the hex and having a look at the plain machine code that's in the binary file. The disassemble script does this for you with a tool called hexdump and puts the result into a kernel*.img.hexdump file. It's a plain text file - you can go ahead and crack it open in a text editor or cat it. 0000000 30b8 e59f 3000 e593 3004 e283 2000 e593 0000010 30a8 e59f 3000 e593 3004 e283 2701 e382 0000020 2000 e583 3098 e59f 2000 e3a0 2000 e583 0000030 0004 ea00 3088 e59f 3000 e593 3001 e283 0000040 207c e59f 3000 e582 3074 e59f 3000 e593 0000050 2070 e59f 0002 e153 fff5 9aff 305c e59f 0000060 3000 e593 3028 e283 2801 e3a0 2000 e583 0000070 304c e59f 2000 e3a0 2000 e583 0004 ea00 0000080 303c e59f 3000 e593 3001 e283 2030 e59f 0000090 3000 e582 3028 e59f 3000 e593 2024 e59f 00000a0 0002 e153 fff5 9aff 3010 e59f 3000 e593 00000b0 301c e283 2801 e3a0 2000 e583 ffd8 eaff 00000c0 80cc 0001 80d0 0001 a11f 0007 0000 0000 00000d0 0000 0000 0000 0000 0000 0000 0000 0000 * 00100c0 0000 0000 0000 0000 0000 0000 0000 2020 00100d0 The binary is in little-endian format because the processor is little endian. Adjust the GPIO_BASE value, recompile and disassemble again so you can see the value change. Sure the code won't work properly, but you can prove to yourself you're looking (and making sense of) the right thing. The thing to note here is that our binary image ends at 0x100cf . After the bootloader has placed this binary image in memory at 0x8000 the last memory location we touch is 0x180cf . Let's have a quick look at what happens next: 8008: e2833004 add r3, r3, #4 Increase the value in r3 from 0x20200000 to 0x20200004 and store it in r3. This is part of the C line: gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); LED_GPFSEL for this compilation for the RPI Zero is set by: #define LED_GPFSEL GPIO_GPFSEL1 #define GPIO_GPFSEL1 1 From the definition of gpio as volatile unsigned int* each item pointed to is an unsigned int which is 32-bit wide. That's 4 bytes, so we increase the pointer into gpio by 4 bytes to get the register address we require in r3. 800c: e5932000 ldr r2, [r3] Load the value of gpio[LED_GPFSEL] into r2. This is common for read-modify-write operations such as the |= operator we're using in this example. We need to do exactly that, read the value, modify the value and then write the new value. 8010: e59f30a8 ldr r3, [pc, #168] ; 80c0 <main+0xc0> 8014: e5933000 ldr r3, [r3] 8018: e2833004 add r3, r3, #4 The compiler being rather inefficient here. It's preparing r3 again to be the memory write destination which is exactly the same read memory location. Any sort of compiler optimisations should be able to get rid of the above three lines. They're really not required, but we understand what's going on still. 801c: e3822701 orr r2, r2, #262144 ; 0x40000 The modify part of |= . In this case (1 << LED_GPFBIT) has been reduced to a constant. The original gpio[LED_GPFSEL] value is still in r2. We OR that value with the constant to set the bit and store the new value in r2. The ARM architecture cannot modify a register value and store it to a memory location in a single instruction BTW in case you're thinking that would serve us better. 8020: e5832000 str r2, [r3] Finally, the write part of the read-modify-write operation is to write the new value back to the destination gpio[LED_GPFSEL] 8024: e59f3098 ldr r3, [pc, #152] ; 80c4 <main+0xc4> ... 80c4: 000180d0 ldrdeq r8, [r1], -r0 Loads the value 0x180d0 into r3. This value is a problem! It is outside our binary image space. If we were to use this value it would be a random value that isn't within our control. How come? This memory location relates to the C variable tim in our program. This variable is determined by the C standard to have automatic storage duration and according to the C standard should therefore have a initialised value of 0, but we know here that this is not the case, instead we'll have a random value. Actually what happens in the code next is the for loop starts by setting the tim variable to 0 . 8028: e3a02000 mov r2, #0 802c: e5832000 str r2, [r3] Let's do a sanity check and make sure we're right by assuming that this is the tim variable: 000180d4 B __bss_end__ 000180d4 B _bss_end__ 000180d0 B __bss_start 000180d0 B __bss_start__ 000180cc D __data_start 000180d0 D _edata 000180d4 B _end 000180d4 B __end__ 000180cc D gpio 00008000 T main 00080000 N _stack U _start 000180d0 B tim Yep! We're talking the same as nm . That's good at least! Now let's do an experiment. There's a reason I decoded the value 0x100cc which is the address of the gpio variable as 0x8000 + 0x80cc earlier:","title":"part-2/armc-04"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#part-2armc05c","text":"#include \"rpi-gpio.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Simple loop variable */ volatile unsigned int tim ; /** Main function - we'll never return from here */ int main ( void ) __attribute__ (( naked )); int main ( void ) { /* Write 1 to the GPIO16 init nibble in the Function Select 1 GPIO peripheral register to enable GPIO16 as an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin low ( Turn OK LED on for original Pi, and off for plus models )*/ gpio [ LED_GPCLR ] = ( 1 << LED_GPIO_BIT ); for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin high ( Turn OK LED off for original Pi, and on for plus models )*/ gpio [ LED_GPSET ] = ( 1 << LED_GPIO_BIT ); for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin low ( Turn OK LED on for original Pi, and off for plus models )*/ gpio [ LED_GPCLR ] = ( 1 << LED_GPIO_BIT ); } } armc-05.c varies only slightly from armc-04.c in that it adds in some code. When we look at this with nm we see that the __data_start section shifts by the same amount as the code we've added: part-2/armc-05 $ ./build.sh rpi0 ... part-2/armc-05 $ ./disassemble.sh ... part-2/armc-05 $ cat kernel.armc-05.rpi0.elf.nm 00018120 B __bss_end__ 00018120 B _bss_end__ 0001811c B __bss_start 0001811c B __bss_start__ 00018118 D __data_start 0001811c D _edata 00018120 B _end 00018120 B __end__ 00018118 D gpio 00008000 T main 00080000 N _stack U _start 0001811c B tim If we go back to the original disassembled output above, we see that address 0x80cc (0x180cc - (0x8000 * 2)) is the next available memory address after the constants data which is itself immediately after the code section. I hope you're following this, we're really seeing a \"bug\" in the linker script. There's no need for us to have this offset. The offset load is correct because when we load this image in RAM the data is indeed going to be + 0x8000 because that's where the boot-loader is going to place the image, but something is spacing the data section away from the constants data. There's a lot more output when building this code. That's because we've added an option ( -Wl,-verbose ) to get verbose output from the linker to see what's going on. As you see from the start of the ld verbose output: GNU ld (GNU Tools for Arm Embedded Processors 7-2017-q4-major) 2.29.51.20171128 Supported emulations: armelf using internal linker script: LD is using an internal linker script. That means the linker script it's using is compiled into the ld executable.","title":"part-2/armc05.c"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#part-2armc-06c","text":"The code is identical to armc-04.c . (So the original code without the additional loop in armc-05.c ) However, we add -Wl,-T,rpi.x to the compilation command to instruct LD to use a different linker script to the one it was using. We've retained -Wl,verbose so we can see what happens. When passing options to the linker using GCC to compile and link, check the gcc documentation which details the options you can pass. Now we have control of the linker script. We can try to find out what's \"wrong\". I quote wrong, because technically this works, but we've got an annoying 0x8000 offset. It'll be a pain to debug one day, I know it. Let's find out what we need to do to fix it instead. You can also see how complicated a linker script can get when it needs to deal with C++ sections! I hope you're staying with me! I know this may seem far removed from C development on the Raspberry-Pi bare-metal, but in fact knowing how your tools work to construct the code is essential later on down the line - heck you wouldn't be getting it up and running on your own from scratch unless you knew at least some of this stuff! Whilst I'm scan-reading the linker script I'm looking for things that stick out. Most of these sections are not used in our basic example so far, so whatever is messing with us must have a size set, and must be present only when we have something in the initialised variables section which we know from our investigations with nm is the __data_start section (it aligns with the gpio symbol which we initialised). The \"problem\" must be between the __data_start section and end of the text section (the symbol main indicated the start of the text section). After a little bit of hunting, I see a comment and an alignment pertaining to the data section on line 107: /* Adjust the address for the data segment. We want to adjust up to the same address within the page on the next page up. */ . = ALIGN ( CONSTANT ( MAXPAGESIZE )) + (. & ( CONSTANT ( MAXPAGESIZE ) - 1 )); Interesting, we apparently \"want\" to adjust up to the next page. If I comment this out with a standard C-style comment as can be seen in the rest of the file, we get back down to a size of a few hundred bytes with initialised data. Check again with the output of: part-2/armc-06 $ ll -rwxr-xr-x 1 brian brian 284 Oct 14 22:17 kernel.armc-06.rpi0.img* When we disassemble the kernel code, we end up with something similar to the following: part-2/armc-06 $ ./disassemble.sh Disassembly of section .text: 00008000 <main>: 8000: e59f30b8 ldr r3, [pc, #184] ; 80c0 <main+0xc0> 8004: e5933000 ldr r3, [r3] 8008: e2833010 add r3, r3, #16 800c: e5932000 ldr r2, [r3] 8010: e59f30a8 ldr r3, [pc, #168] ; 80c0 <main+0xc0> 8014: e5933000 ldr r3, [r3] 8018: e2833010 add r3, r3, #16 801c: e3822602 orr r2, r2, #2097152 ; 0x200000 8020: e5832000 str r2, [r3] 8024: e59f3098 ldr r3, [pc, #152] ; 80c4 <main+0xc4> 8028: e3a02000 mov r2, #0 802c: e5832000 str r2, [r3] 8030: ea000004 b 8048 <main+0x48> 8034: e59f3088 ldr r3, [pc, #136] ; 80c4 <main+0xc4> 8038: e5933000 ldr r3, [r3] 803c: e2833001 add r3, r3, #1 8040: e59f207c ldr r2, [pc, #124] ; 80c4 <main+0xc4> 8044: e5823000 str r3, [r2] 8048: e59f3074 ldr r3, [pc, #116] ; 80c4 <main+0xc4> 804c: e5933000 ldr r3, [r3] 8050: e59f2070 ldr r2, [pc, #112] ; 80c8 <main+0xc8> 8054: e1530002 cmp r3, r2 8058: 9afffff5 bls 8034 <main+0x34> 805c: e59f305c ldr r3, [pc, #92] ; 80c0 <main+0xc0> 8060: e5933000 ldr r3, [r3] 8064: e283302c add r3, r3, #44 ; 0x2c 8068: e3a02902 mov r2, #32768 ; 0x8000 806c: e5832000 str r2, [r3] 8070: e59f304c ldr r3, [pc, #76] ; 80c4 <main+0xc4> 8074: e3a02000 mov r2, #0 8078: e5832000 str r2, [r3] 807c: ea000004 b 8094 <main+0x94> 8080: e59f303c ldr r3, [pc, #60] ; 80c4 <main+0xc4> 8084: e5933000 ldr r3, [r3] 8088: e2833001 add r3, r3, #1 808c: e59f2030 ldr r2, [pc, #48] ; 80c4 <main+0xc4> 8090: e5823000 str r3, [r2] 8094: e59f3028 ldr r3, [pc, #40] ; 80c4 <main+0xc4> 8098: e5933000 ldr r3, [r3] 809c: e59f2024 ldr r2, [pc, #36] ; 80c8 <main+0xc8> 80a0: e1530002 cmp r3, r2 80a4: 9afffff5 bls 8080 <main+0x80> 80a8: e59f3010 ldr r3, [pc, #16] ; 80c0 <main+0xc0> 80ac: e5933000 ldr r3, [r3] 80b0: e2833020 add r3, r3, #32 80b4: e3a02902 mov r2, #32768 ; 0x8000 80b8: e5832000 str r2, [r3] 80bc: eaffffd8 b 8024 <main+0x24> 80c0: 000080cc andeq r8, r0, ip, asr #1 80c4: 000080d0 ldrdeq r8, [r0], -r0 80c8: 0007a11f andeq sl, r7, pc, lsl r1 Disassembly of section .data: 000080cc <gpio>: 80cc: 20200000 eorcs r0, r0, r0 Disassembly of section .bss: 000080d0 <tim>: 80d0: 00000000 andeq r0, r0, r0 Use the ARM instruction set quick reference card to decypher if you're not familiar with ARM assembler. By the way, as a quick note - the comment in the linker script is entirely useless as it only describes what the code is doing, the worst type of comment! There is no WHY in the comment. Why are we wanting to do this? What's the reason for forcing the alignment? Anyway this alignment was forcing the 0x8000 additional offset to our rodata (initialised data) section. Cool, now the initialised data is tagged immediately on the end of the data and the values look sane too! I'll leave you to decode the assembly.","title":"part-2/armc-06.c"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#part-2armc-07","text":"The code here is the same as armc-06.c . Nothing has changed, we'll just modify our linker script. At this point, we can get rid of the annoying _start undefined symbol warning. At the top of the linker script, on line 9 you'll see a line that says ENTRY(_start) In armc-07 we've changed this to read ENTRY(main) The warning will go away at last! But we'll soon learn why we need that _start section for the C-Runtime anyway! Have a quick check of the sections with nm again, now there's no Undefined sections! part-2/armc-07 $ ./build.sh rpi0 arm-none-eabi-gcc -g -nostartfiles -mfloat-abi=hard -O0 -DRPI0 -mfpu=vfp -march=armv6zk \\ -mtune=arm1176jzf-s part-2/armc-07/*.c -o part-2/armc-07/kernel.armc-07.rpi0.elf arm-none-eabi-objcopy part-2/armc-07/kernel.armc-07.rpi0.elf -O binary \\ part-2/armc-07/kernel.armc-07.rpi0.img part-2/armc-07 $ ./disassemble.sh part-2/armc-07 $ cat ./kernel.armc-07.rpi0.elf.nm 000080d4 B __bss_end__ 000080d4 B _bss_end__ 000080d0 B __bss_start 000080d0 B __bss_start__ 000080cc D __data_start 000080d0 D _edata 000080d4 B _end 000080d4 B __end__ 000080cc D gpio 00008000 T main 00080000 N _stack 000080d0 B tim","title":"part-2/armc-07"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#sections-and-c-startup","text":"As we've found out, there are a lot of sections, some which you may not know the meaning of. The .bss section is used for data that is implicitly initialised to 0 at startup (This is mandated by the C Standard). This means that all variables that are statically declared are set to zero initially. Statically declared essentially means global, so local (automatic) variables in a function that are not marked as static do not get initialised to zero if you do not explicitly add an initial value. It's easier with an example, take for example the following C file: unsigned int var1 ; unsigned int var2 ; unsigned int var3 = 10 ; void function ( void ) { unsigned int funcvar1 ; static unsigned int funcvar2 ; /* ... */ } In the above example var1, var2 and funcvar2 are in the bss section, the rest are not. For more information on the bss section, see the wikipedia page on it The linker organises the data and sorts it out into the different sections. In the above, var3 for example goes into the data section. The code is compiled into machine code and then put in the .text section. See here for \"a little!\" more information about the text section. There can be many text sections and there can be many data sections too. These sections are wild-carded in the linker script to ensure different sections can be defined whilst still knowing whether they are code or data sections. In our current code (armc-07) the bss section is not valid because it is not being initialised. That's because the C-Startup is missing. This is the importance of the _start symbol! The _start section is run before the c main() entry point and one of it's jobs is to initialise the bss section. The linker provides us with a couple of symbols for the sections so we know where they start and end. In the startup code all we need to do is loop between the addresses defined by bss_start and bss_end and set all locations to zero. It's easy when you know what you're meant to do! The _startup code should also setup the stack pointer. We'll need a working stack to get anything useful up and working! The stack is temporary memory space available for functions to use. The compiler tries to use registers for local (automatic) function variables, but if the size of data required by the local variables exceeds the amount of registers available, the compiler uses the stack for the local variables. So lets go ahead and setup the stack pointer to a sane value and initialise the bss section. Firstly, we'll set the linker script back to standard so the entry point is the _start symbol again, we'll have to generate this symbol and generally we'll need to do this is assembler. We need to setup the stack pointer before we enter the C code so that we're safe to write C which may attempt to use the stack straight away. Normally the complete startup is done in assembler, including zeroing the bss section, but it doesn't have to! I prefer to get into C as soon as possible, so let's see how little assembler we can get away with, and see what trips us up next!","title":"Sections and C Startup"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#armc-08-starts","text":".section \".text.startup\" .global _start _start: // Set the stack pointer, which progresses downwards through memory // Set it at 64MB which we know our application will not crash into // and we also know will be available to the ARM CPU. No matter what // settings we use to split the memory between the GPU and ARM CPU ldr sp, =0x8000 // Run the c startup function - should not return and will call kernel_main b _cstartup _inf_loop: b _inf_loop Not bad! There's not exactly a lot there to set up the stack pointer. The stack is placed at the start of our program and grows downwards through memory. You don't need a large amount of memory for the stack. Some important information about the .section declaration. With the linker script, I can see in rpi.x that the following text sections are available: .text : { *(.text.unlikely .text.*_unlikely .text.unlikely.*) *(.text.exit .text.exit.*) *(.text.startup .text.startup.*) *(.text.hot .text.hot.*) *(.text .stub .text.* .gnu.linkonce.t.*) /* .gnu.warning sections are handled specially by elf32.em. */ *(.gnu.warning) *(.glue_7t) *(.glue_7) *(.vfp11_veneer) *(.v4_bx) } This is also the order in which the text section is linked together by the linker. The standard functions generally go in the standard .text section. Therefore, we can put our _startup function before the main .text section by putting it in the .text.startup section. Other than .text.unlikely and text.exit which we won't use, _startup will be the first thing to go into the text segment which is where execution will start at 0x8000 Then, we're in C for initialising the bss section by running the cstartup function:","title":"armc-08-start.S"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#armc-08-cstartupc","text":"extern int __bss_start__ ; extern int __bss_end__ ; extern void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ); void _cstartup ( unsigned int r0 , unsigned int r1 , unsigned int r2 ) { /*__bss_start__ and __bss_end__ are defined in the linker script */ int * bss = & __bss_start__ ; int * bss_end = & __bss_end__ ; /* Clear the BSS section See http://en.wikipedia.org/wiki/.bss for further information on the BSS section See https://sourceware.org/newlib/libc.html#Stubs for further information on the c-library stubs */ while ( bss < bss_end ) * bss ++ = 0 ; /* We should never return from main ... */ kernel_main ( r0 , r1 , r2 ); /* ... but if we do, safely trap here */ while ( 1 ) { /* EMPTY! */ } } Again, not that bad and pretty reasonable. NOTE: We've now changed from main to kernel_main , and there's a reason for this - the bootloader is actually expecting a slightly different entry definition compared to the standard C main function. So as we're setting up our own C-Runtime anyway, we can define the correct entry format. The correct bootloader entry point defines a couple of values which we can check to know what system we're booting. The actual C code hasn't really changed apart from the kernel_main difference:","title":"armc-08-cstartup.c"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#armc-08c","text":"#include \"rpi-gpio.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Simple loop variable */ volatile unsigned int tim ; /** Main function - we'll never return from here */ void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ) { /* Write 1 to the GPIO16 init nibble in the Function Select 1 GPIO peripheral register to enable GPIO16 as an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin low ( Turn OK LED on for original Pi, and off for plus models )*/ gpio [ LED_GPCLR ] = ( 1 << LED_GPIO_BIT ); for ( tim = 0 ; tim < 500000 ; tim ++ ) ; /* Set the LED GPIO pin high ( Turn OK LED off for original Pi, and on for plus models )*/ gpio [ LED_GPSET ] = ( 1 << LED_GPIO_BIT ); } } We again confirm with nm that everything is ordered at least something like sensible: part-2/armc-08 $ ./build.sh rpi0 arm-none-eabi-gcc -g -nostartfiles -mfloat-abi=hard -O0 -DRPI0 -mfpu=vfp -march=armv6zk \\ -mtune=arm1176jzf-s part-2/armc-08/*.S part-2/armc-08/*.c -o part-2/armc-08/kernel.armc-08.rpi0.elf arm-none-eabi-objcopy part-2/armc-08/kernel.armc-08.rpi0.elf -O binary \\ part-2/armc-08/kernel.armc-08.rpi0.img part-2/armc-08 $ ./disassemble.sh part-2/armc-08 $ cat ./kernel.armc-08.rpi0.elf.nm 00008164 B __bss_end__ 00008164 B _bss_end__ 00008160 B __bss_start 00008160 B __bss_start__ 0000800c T _cstartup 0000815c D __data_start 00008160 D _edata 00008164 B _end 00008164 B __end__ 0000815c D gpio 00008008 t _inf_loop 00008078 T kernel_main 00080000 N _stack 00008000 T _start 00008160 B tim Yup, looks good - _start is at 0x8000 where execution will start. Stick it on the card and make sure the OK LED is blinking still. I appreciate that we're doing a lot of work where you can't see more interesting results - but it'll get better soon, I promise! For now we're getting a great foundation for developing in C for the bare metal Raspberry-Pi. Knowing what your tools are doing is pretty essential! part-2/armc-08 $ ./make_card.sh rpi0 part-2/armc-08 $ cat ./card.armc-08.rpi0.img > /dev/sdg && sync && eject /dev/sdg","title":"armc-08.c"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#the-c-library-stubs","text":"Now that we've got the C-Runtime pretty much setup, we can implement the C-Library again with our own C-Runtime startup and C-Library stubs. This is where we want to get to - easy compiling with the C-Library being linked in so that we can make use of the C-Library functions on the Raspberry-Pi without an operating system. We are actually linking against the C-Library, but we're not using anything from within it. Therefore, the linker disregards the whole of the C-Library because there are no references to it within the code. Let's jump straight in and malloc some memory as I know that requires a stub. Compile armc-09 without the *-cstubs.c and you'll see the error: .../arm-none-eabi/lib/fpu\\libg.a(lib_a-sbrkr.o): In function `_sbrk_r': sbrkr.c:(.text._sbrk_r+0x18): undefined reference to `_sbrk' collect2.exe: error: ld returned 1 exit status So the malloc call is calling something in the c library called _sbrk_r which is a re-entrant safe (or multi-thread/interrupt safe) C library function all called _sbrk . This is the C-stub function that we must implement as it is operating-system dependant. It's worth looking at how other people have implemented these function calls. Look at them to see what they're doing. Generally you can look at other kernel code, or embedded system code: http://www.opensource.apple.com/source/Libc/Libc-763.12/emulated/brk.c http://linux.die.net/man/2/sbrk However, the best place is if examples are in the C-Library you're using! Newlib is well documented and includes example minimal systemc calls/stubs . We implement this in the next tutorial armc-09","title":"The C-Library stubs"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#armc-09-cstubsc","text":"#include <sys/stat.h> /* A helper function written in assembler to aid us in allocating memory */ extern caddr_t _get_stack_pointer ( void ); /* Increase program data space. As malloc and related functions depend on this, it is useful to have a working implementation. The following suffices for a standalone system; it exploits the symbol _end automatically defined by the GNU linker. */ caddr_t _sbrk ( int incr ) { extern char _end ; static char * heap_end = 0 ; char * prev_heap_end ; if ( heap_end == 0 ) heap_end = & _end ; prev_heap_end = heap_end ; heap_end += incr ; return ( caddr_t ) prev_heap_end ; }","title":"armc-09-cstubs.c"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#armc-09-starts","text":".section \".text.startup\" .global _start .global _get_stack_pointer _start: // Set it at 64MB which we know our application will not crash into // and we also know will be available to the ARM CPU. No matter what // settings we use to split the memory between the GPU and ARM CPU // ldr sp, =0x8000 ldr sp, =(64 * 1024 * 1024) // Run the c startup function - should not return and will call kernel_main b _cstartup _inf_loop: b _inf_loop","title":"armc-09-start.S"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#armc-09-cstartupc","text":"extern int __bss_start__ ; extern int __bss_end__ ; extern void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ); void _cstartup ( unsigned int r0 , unsigned int r1 , unsigned int r2 ) { /*__bss_start__ and __bss_end__ are defined in the linker script */ int * bss = & __bss_start__ ; int * bss_end = & __bss_end__ ; /* Clear the BSS section See http://en.wikipedia.org/wiki/.bss for further information on the BSS section See https://sourceware.org/newlib/libc.html#Stubs for further information on the c-library stubs */ while ( bss < bss_end ) * bss ++ = 0 ; /* We should never return from main ... */ kernel_main ( r0 , r1 , r2 ); /* ... but if we do, safely trap here */ while ( 1 ) { /* EMPTY! */ } }","title":"armc-09-cstartup.c"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#part-2armc-09c","text":"#include <string.h> #include <stdlib.h> #include \"rpi-gpio.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Main function - we'll never return from here */ void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ) { int loop ; unsigned int * counters ; /* Set the LED GPIO pin to an output to drive the LED */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Allocate a block of memory for counters */ counters = malloc ( 1024 * sizeof ( unsigned int ) ); /* Failed to allocate memory! */ if ( counters == NULL ) while ( 1 ) { LED_ON (); /* Trap here */ } for ( loop = 0 ; loop < 1024 ; loop ++ ) counters [ loop ] = 0 ; /* Never exit as there is no OS to exit to! */ while ( 1 ) { /* Light the LED */ LED_ON (); for ( counters [ 0 ] = 0 ; counters [ 0 ] < 500000 ; counters [ 0 ] ++ ) ; /* Set the GPIO16 output low ( Turn OK LED on )*/ LED_OFF (); for ( counters [ 1 ] = 0 ; counters [ 1 ] < 500000 ; counters [ 1 ] ++ ) ; } } Build the example and program, now the counter variable is from malloc'd memory - usually malloc is the most mysterious of the c library stubs, but as you can see from the example, you can implement it easily and also implement it in C easily too! Of course occasionally it's necessary to drop down to assembler to get certain register values or talk to some special hardware features. Keep the cheat-sheet close at hand while you're working with the C-Stubs.","title":"part-2/armc-09.c"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-2/#part-3","text":"In the next part of the bare metal tutorial, we'll add on a build system so that we're not using a silly single command-line, and we can harness the power of a full build system for our bare-metal environment. We'll then fall back to the Cambridge ASM tutorials and progress to using the timer for flashing the LED rather than the incrementing loop counter we've used so far. So, what are you waiting for? Head off to Part3 now!","title":"Part 3"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-3/","text":"BMC Part 3 - CMake Build System \u00b6 If you really don't want to know anything about the CMake build system, just skip this section of the tutorial. There's no ARM bare metal in it - just compiling the same armc-09 tutorial with a build system! However, to continue with the tutorials, you'll need CMake installed to configure + build the tutorials. The one move we do make in this part of the turotial is move from delay loops to using the system timer peripheral. So the code does change a bit if you want to follow along. CMake is an excellent build system, I much prefer it to autotools and certainly prefer it in comparison to hand-crafting Makefile's! CMake's documentation is great, so feel free to peruse it whilst reading this tutorial. The tutorial isn't going to cover CMake, other than showing how it can help and some rudimentary stuff which shows how CMake can be setup to do exactly what we were doing in our simple command-line build. CMake generally detects the host information, that is the computer you're compiling on and will assume that the target is the same as the host. However, it's very easy to tell CMake not to use that assumption and instead use a system that we're describing or hinting at. We can hint for example that the target is MinGW when the host is Linux and CMake will setup a lot of settings, knowing that they are useful for targetting Windows. On embedded systems we're describing the system ourself. It's very easy to describe to CMake because it doesn't need to know much. It needs to know what the toolchain filename's are and where they're located. Let's look at the toolchain-arm-none-eabi-rpi.cmake that I've added to the compiler/cmake-toolchains directory: toolchain-arm-none-eabi-rpi.cmake \u00b6 # Part of the Raspberry-Pi Bare Metal Tutorials # https://www.valvers.com/rpi/bare-metal/ # Copyright (c) 2013, Brian Sidebotham # This software is licensed under the MIT License. # Please see the LICENSE file included with this software. # A CMake toolchain file so we can cross-compile for the Rapsberry-Pi bare-metal include ( CMakeForceCompiler ) # usage # cmake -DCMAKE_TOOLCHAIN_FILE=../toolchain-arm-none-eabi.cmake ../ # The Generic system name is used for embedded targets (targets without OS) in # CMake set ( CMAKE_SYSTEM_NAME Generic ) set ( CMAKE_SYSTEM_PROCESSOR BCM2835 ) # Set a toolchain path. You only need to set this if the toolchain isn't in # your system path. Don't forget a trailing path separator! #set( TC_PATH \"\" ) # The toolchain prefix for all toolchain executables set ( CROSS_COMPILE arm-none-eabi- ) # specify the cross compiler. We force the compiler so that CMake doesn't # attempt to build a simple test program as this will fail without us using # the -nostartfiles option on the command line CMAKE_FORCE_C_COMPILER ( \"${TC_PATH}${CROSS_COMPILE}gcc\" GNU ) SET ( CMAKE_ASM_COMPILER \"${TC_PATH}${CROSS_COMPILE}gcc\" ) # We must set the OBJCOPY setting into cache so that it's available to the # whole project. Otherwise, this does not get set into the CACHE and therefore # the build doesn't know what the OBJCOPY filepath is set ( CMAKE_OBJCOPY ${ TC_PATH }${ CROSS_COMPILE } objcopy CACHE FILEPATH \"The toolchain objcopy command \" FORCE ) set ( CMAKE_OBJDUMP ${ TC_PATH }${ CROSS_COMPILE } objdump CACHE FILEPATH \"The toolchain objdump command \" FORCE ) # Set the common build flags set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mfpu=vfp\" ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -march=armv6zk\" ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mtune=arm1176jzf-s\" ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\" CACHE STRING \"\" ) set ( CMAKE_ASM_FLAGS \"${CMAKE_C_FLAGS}\" CACHE STRING \"\" ) add_definitions ( -DRPI1=1 ) set ( BOARD rpi1 ) If you've not used CMake before, some things may look a bit strange - but it's only syntatical. I think you can read CMake files relatively easily even when you've never seen it before. The toolchain file describes our toolchain. The CMAKE_SYSTEM_NAME is essential, and Generic is used by CMake to essentially set the system type to something CMake doesn't yet know about. The CMAKE_SYSTEM_PROCESSOR is just a string describing the processor type, CMake doesn't use this setting on a system it doesn't know. The TC_PATH (toolchain path) is blank because the toolchain is expected to be in the path. If it's not, then set TC_PATH to something sensible. If you do have to set this - make sure you add a trailing path separator! The CROSS_COMPILE settings is simply the toolchain executable prefix. The CMAKE_FORCE_C_COMPILER setting is the executable name of the c compiler and it's type (GNU), it's mainly built up of variables that we set earlier. We use the FORCE c compiler variable to tell CMake that it shouldn't try to use the compiler before we tell it to. Normally CMake trys to build a blank test program with the compiler to make sure it's working correctly. However, we need the -nostartfiles flag in order to build something that succeeds and so CMake's test would fail and it would not it would think the compiler was broken. The CMAKE_OBJCOPY setting looks a bit fancier doesn't it!? CMake knows that CMAKE_C_COMPILER needs to be accessible by the entire project, so it adds it automatically to the CACHE. The CACHE is available to all of the CMake files in the build system. If we set a variable in this toolchain file it only has local scope (meaning only this file can see the value we set to this variable). Therefore we force CMake to add this to the cache. The cache requires a \"type\" for the variable so CMake knows how to use it. In fact most things in CMake are strings. See the documentation for further information on these settings (Look at commands->set->CACHE in the documentation). The CMAKE_C_FLAGS settings creates a list of flags that are passed to the compiler when compiling a c source file. Here, we just use the processor-specific flags and again as with OBJCOPY we want to put the CMAKE_C_FLAGS setting from here in the CACHE so that the entire project has this variable. We can add more generic flags like optimisation level to the c flags later on because they're not specific to a particular processor. So, notice that we also have toolchain-arm-none-eabi-rpibplus and toolchain-arm-none-eabi-rpi2 for the other board types. As with autotools, CMake uses a configuration step which works out what should be built and how. The result of the configuration step, if successful, is a Makefile which we can use with make (On Windows you must use mingw32-make ) to build our project. CMake uses a file in each directory that needs building called CMakeLists.txt. It's a simple text file as it's extension suggests. Here's the CMakeLists.txt file for armc-010 : CMakeLists.txt \u00b6 # Part of the Raspberry-Pi Bare Metal Tutorials # https://www.valvers.com/rpi/bare-metal/ # Copyright (c) 2013, Brian Sidebotham # This software is licensed under the MIT License. # Please see the LICENSE file included with this software. # CMake build environment for the Valvers Raspberry-Pi bare metal tutorials # CMake 2.8.10 Documentation: http://www.cmake.org/cmake/help/v2.8.10/cmake.html cmake_minimum_required ( VERSION 2.8 ) # Mark the language as C so that CMake doesn't try to test the C++ # cross-compiler's ability to compile a simple program because that will fail project ( valvers- ${ TUTORIAL } C ASM ) # We had to adjust the CMAKE_C_FLAGS variable in the toolchain file to make sure # the compiler would work with CMake's simple program compilation test. So unset # it explicitly before re-setting it correctly for our system set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -O0\" ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g\" ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -nostartfiles\" ) add_executable ( kernel. ${ TUTORIAL } . ${ BOARD } ${ TUTORIAL } .c ${ TUTORIAL } -cstartup.c ${ TUTORIAL } -cstubs.c ${ TUTORIAL } -start.S ) add_custom_command ( TARGET kernel. ${ TUTORIAL } . ${ BOARD } POST_BUILD COMMAND ${ CMAKE_OBJCOPY } ./kernel. ${ TUTORIAL } . ${ BOARD }${ CMAKE_EXECUTABLE_SUFFIX } -O binary ./kernel. ${ TUTORIAL } . ${ BOARD } .img COMMAND ${ CMAKE_OBJDUMP } -l -S -D ./kernel. ${ TUTORIAL } . ${ BOARD }${ CMAKE_EXECUTABLE_SUFFIX } > ./kernel. ${ TUTORIAL } . ${ BOARD } .asm WORKING_DIRECTORY ${ CMAKE_BINARY_DIR } COMMENT \"Convert the ELF output file to a binary image\" ) We specify a minimum version required, I just tend to start at 2.8 because most people have it, but our simple examples in this tutorial can most probably be used with earlier versions than that. The project() call tells CMake what the project is called and what languages are required. The languages can be left out, and frequently are - but there's a few reasons why we need to tell CMake explicitly what languages we're using here. If we don't do this, CMake tests the C++ compiler to make sure it can compile a simple program to validate the C++ compiler. However, as our system is bare metal and requires specific linker steps this fails and CMake falls over at the first hurdle. CMake assumes that C and C++ are the project's languages if you do not tell it any languages explicitly. Assembler files (.S) in the source list are ignored completely by CMake unless we \"enable\" the assembler by telling CMake in the project definition that we're using assembly files. When we enable assembler, CMake detects gcc as the assembler rather than as - this is good for us because we then only need one set of compilation flags. As we'll see in a bit, to successfully configure, we need to pass some C flags to CMake when configuring. This is so that the C compiler sanity check passes by enabling the C compiler to successfully compile a small C program. We then set the C flags that CMake will use when compiling C ( and assembler! ) files. These are exactly the same as we were passing to the gcc invocation in our bat or sh file to compile. We set the linker flags for when CMake links an executable. Again, this is the same as we were passing to the Linker through gcc when compiling and linking in one command. So CMake will pass this setting to the linker which will make sure we're using our linker script. Then we add an executable target. A target in CMake is basically something to build. An executable means that CMake knows this target is an executable. If we don't apply any special settings to the executable, the target name becomes the output filename for the target, plus any default prefix or suffix (for example Windows executables have the .exe suffix added). After the target name, we simply list the source files (including header files so that CMake can work out the dependencies for the build process). Finally we add a custom command associated with the executable target we've just defined. We declare it as being required to be run after building the executable target. This uses objcopy from our toolchain file to extract the binary image from the ELF file to a kernel image. Building \u00b6 So now building the example is slightly different. Navigate into the build sub-directory of the tutorial and run the batch file or bash script called configure. You can look in the script file to see how the configure call is done with CMake. The result of this configure command will be a CodeBlocks project file that you can use to edit, and build the tutorial, and there's a Makefile which the CodeBlocks project uses. You can use this Makefile directly to build the tutorial. From now on, when I use the term ${MAKE} I mean on Linux use the make command, and on Windows use the mingw32-make command. If you've not got mingw32-make on Windows then you best go get it now. I suggest getting the a copy from the mingw-builds project - just download one of the latest toolchains and it will come with mingw32-make. Build the project - it's the same as the arm009 tutorial, but built with the CMake build system instead. So long as it works for you, this is all then CMake I want to go into - this is an ARM bare metal tutorial, not a build-systems tutorial. However, it's important because soon the number of files we'll have will increase and we do not want to be having a hugely complicated command line to build each tutorial ( or at least, I don't! ) System Timer Blinking LED \u00b6 Let's now look at using another peripheral in the Raspberry-Pi processor. We've so far used the GPIO controller to turn an LED on and off, we'll keep that going, but the rate at which we've been turning it on and off is unknown to us. We've just used a volatile loop so the processor takes some amount of time to do the work we've requested (loop and increment a variable!) and then it changes the state of the LED. It'd be much better if we could request that the processor pause for a certain amount of time that is easy to determine in software. The Raspberry-Pi processor (both BCM2835/6) has a peripheral called the System Clock. It's a 64-bit counter that continuously runs at a fixed rate. It's the introduction of this timer in ARM cores that made porting operating systems (which all need to be time-aware for thread context switching, etc.) easy!! Previously porting an operating system to a new processor, even in the same family of parts could require considerable re-writes. Again, referring to the BCM2835-ARM-Peripherals.pdf , on page 172 is the System Timer peripheral. This is a free-running 64-bit counter as we've already seen. We need to access these registers, and of the whole peripheral all we have to do is keep an eye on the counter value as it increases. Each increment takes 1us, so keeping track of time using the System Timer is very easy. In C, we can write a \"driver\" for this peripheral very easily for this basic functionality. We don't even have to initialise the peripheral. Firstly, we'll need the base address of the system timer: #define RPI_SYSTIMER_BASE 0x20003000 Remember from Pt1 of the tutorial that the physical address 0x7E000000 is mapped to the ARM physical address 0x2000000 , so 0x7E003000 becomes 0x20003000 to the processor! Then we can generate a struct which is structured the same as the registers for the peripheral: typedef struct { volatile uint32_t control_status ; volatile uint32_t counter_lo ; volatile uint32_t counter_hi ; volatile uint32_t compare0 ; volatile uint32_t compare1 ; volatile uint32_t compare2 ; volatile uint32_t compare3 ; } rpi_sys_timer_t ; In the driver code, we can declare this type of structure at memory address RPI_SYSTIMER_BASE by using a variable: static rpi_sys_timer_t * rpiSystemTimer = ( rpi_sys_timer_t * ) RPI_SYSTIMER_BASE ; and then finally, we can implement our delay function: void RPI_WaitMicroSeconds ( uint32_t us ) { volatile uint32_t ts = rpiSystemTimer -> counter_lo ; while ( ( rpiSystemTimer -> counter_lo - ts ) < us ) { // BLANK } } Here, all we do is get the current value of the counter wait until the counter is the required number of us higher than when the function was called before returning. As per the Cambridge tutorials, this version ignores the upper 32-bits of the counter. It will take over an hour before the timer increases above 32-bits anyway, so I'm not expecting us to test a blinking LED for that long! armc-011.c \u00b6 #include <string.h> #include <stdlib.h> #include \"rpi-gpio.h\" #include \"rpi-systimer.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Main function - we'll never return from here */ void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ) { int loop ; /* Write 1 to the GPIO init nibble in the Function Select GPIO peripheral register to enable the LED pin an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { /* Set the GPIO16 output high ( Turn OK LED off )*/ LED_OFF (); /* Wait half a second */ RPI_WaitMicroSeconds ( 500000 ); /* Set the GPIO16 output low ( Turn OK LED on )*/ LED_ON (); /* Wait half a second */ RPI_WaitMicroSeconds ( 500000 ); } } Now we have a slightly slower blinking LED where the time is known - 0.5 seconds before toggling the LED. The system timer can be extremely useful. This is definitely the easiest way to get using a timer on the Raspberry-Pi! Don't forget to build armc-011 tutorial you need CMake installed. Then you can build with: cd part-3/armc-011/ ./build.sh [ RPI MODEL ] armc-012.c \u00b6 In this example, we can introduce something a bit more fun. Instead of simply pulsing the LED on and off we can go ahead and do some software PWM of the LED brightness. #include <string.h> #include <stdlib.h> #include \"rpi-gpio.h\" #include \"rpi-systimer.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Main function - we'll never return from here */ void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ) { int brightness = 255 ; int speed = 16 ; int up = 0 ; /* Write 1 to the GPIO init nibble in the Function Select GPIO peripheral register to enable the LED pin an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { if ( brightness > 0 ) { /* Set the GPIO16 output high ( Turn OK LED off )*/ LED_OFF (); /* Wait half a second */ RPI_WaitMicroSeconds ( brightness ); } if ( ( 255 - brightness ) >= 0 ) { /* Set the GPIO16 output low ( Turn OK LED on )*/ LED_ON (); /* Wait half a second */ RPI_WaitMicroSeconds ( 255 - brightness ); } speed -- ; if ( speed == 0 ) { speed = 16 ; if ( up ) { if ( brightness < 255 ) brightness ++ ; if ( brightness == 255 ) up = 0 ; } else { if ( brightness ) brightness -- ; if ( brightness == 0 ) up = 1 ; } } } } The output is quite nifty as we get a fading ACK LED. Here is an example of it running on a pi-zero: I think in the next tutorial part we'll introduce interrupts. The code in this tutorial is far from ideal. Function calls that wait half a second before returning are not what we want. Interrupts can help keep our system more responsive so in that 0.5s we can get on and do other stuff and just let the processor interrupt the code when the 0.5s is up. When you're ready, head over to Pt4...","title":"BMC Part 3 - CMake Build System"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-3/#bmc-part-3-cmake-build-system","text":"If you really don't want to know anything about the CMake build system, just skip this section of the tutorial. There's no ARM bare metal in it - just compiling the same armc-09 tutorial with a build system! However, to continue with the tutorials, you'll need CMake installed to configure + build the tutorials. The one move we do make in this part of the turotial is move from delay loops to using the system timer peripheral. So the code does change a bit if you want to follow along. CMake is an excellent build system, I much prefer it to autotools and certainly prefer it in comparison to hand-crafting Makefile's! CMake's documentation is great, so feel free to peruse it whilst reading this tutorial. The tutorial isn't going to cover CMake, other than showing how it can help and some rudimentary stuff which shows how CMake can be setup to do exactly what we were doing in our simple command-line build. CMake generally detects the host information, that is the computer you're compiling on and will assume that the target is the same as the host. However, it's very easy to tell CMake not to use that assumption and instead use a system that we're describing or hinting at. We can hint for example that the target is MinGW when the host is Linux and CMake will setup a lot of settings, knowing that they are useful for targetting Windows. On embedded systems we're describing the system ourself. It's very easy to describe to CMake because it doesn't need to know much. It needs to know what the toolchain filename's are and where they're located. Let's look at the toolchain-arm-none-eabi-rpi.cmake that I've added to the compiler/cmake-toolchains directory:","title":"BMC Part 3 - CMake Build System"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-3/#toolchain-arm-none-eabi-rpicmake","text":"# Part of the Raspberry-Pi Bare Metal Tutorials # https://www.valvers.com/rpi/bare-metal/ # Copyright (c) 2013, Brian Sidebotham # This software is licensed under the MIT License. # Please see the LICENSE file included with this software. # A CMake toolchain file so we can cross-compile for the Rapsberry-Pi bare-metal include ( CMakeForceCompiler ) # usage # cmake -DCMAKE_TOOLCHAIN_FILE=../toolchain-arm-none-eabi.cmake ../ # The Generic system name is used for embedded targets (targets without OS) in # CMake set ( CMAKE_SYSTEM_NAME Generic ) set ( CMAKE_SYSTEM_PROCESSOR BCM2835 ) # Set a toolchain path. You only need to set this if the toolchain isn't in # your system path. Don't forget a trailing path separator! #set( TC_PATH \"\" ) # The toolchain prefix for all toolchain executables set ( CROSS_COMPILE arm-none-eabi- ) # specify the cross compiler. We force the compiler so that CMake doesn't # attempt to build a simple test program as this will fail without us using # the -nostartfiles option on the command line CMAKE_FORCE_C_COMPILER ( \"${TC_PATH}${CROSS_COMPILE}gcc\" GNU ) SET ( CMAKE_ASM_COMPILER \"${TC_PATH}${CROSS_COMPILE}gcc\" ) # We must set the OBJCOPY setting into cache so that it's available to the # whole project. Otherwise, this does not get set into the CACHE and therefore # the build doesn't know what the OBJCOPY filepath is set ( CMAKE_OBJCOPY ${ TC_PATH }${ CROSS_COMPILE } objcopy CACHE FILEPATH \"The toolchain objcopy command \" FORCE ) set ( CMAKE_OBJDUMP ${ TC_PATH }${ CROSS_COMPILE } objdump CACHE FILEPATH \"The toolchain objdump command \" FORCE ) # Set the common build flags set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mfpu=vfp\" ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -march=armv6zk\" ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -mtune=arm1176jzf-s\" ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\" CACHE STRING \"\" ) set ( CMAKE_ASM_FLAGS \"${CMAKE_C_FLAGS}\" CACHE STRING \"\" ) add_definitions ( -DRPI1=1 ) set ( BOARD rpi1 ) If you've not used CMake before, some things may look a bit strange - but it's only syntatical. I think you can read CMake files relatively easily even when you've never seen it before. The toolchain file describes our toolchain. The CMAKE_SYSTEM_NAME is essential, and Generic is used by CMake to essentially set the system type to something CMake doesn't yet know about. The CMAKE_SYSTEM_PROCESSOR is just a string describing the processor type, CMake doesn't use this setting on a system it doesn't know. The TC_PATH (toolchain path) is blank because the toolchain is expected to be in the path. If it's not, then set TC_PATH to something sensible. If you do have to set this - make sure you add a trailing path separator! The CROSS_COMPILE settings is simply the toolchain executable prefix. The CMAKE_FORCE_C_COMPILER setting is the executable name of the c compiler and it's type (GNU), it's mainly built up of variables that we set earlier. We use the FORCE c compiler variable to tell CMake that it shouldn't try to use the compiler before we tell it to. Normally CMake trys to build a blank test program with the compiler to make sure it's working correctly. However, we need the -nostartfiles flag in order to build something that succeeds and so CMake's test would fail and it would not it would think the compiler was broken. The CMAKE_OBJCOPY setting looks a bit fancier doesn't it!? CMake knows that CMAKE_C_COMPILER needs to be accessible by the entire project, so it adds it automatically to the CACHE. The CACHE is available to all of the CMake files in the build system. If we set a variable in this toolchain file it only has local scope (meaning only this file can see the value we set to this variable). Therefore we force CMake to add this to the cache. The cache requires a \"type\" for the variable so CMake knows how to use it. In fact most things in CMake are strings. See the documentation for further information on these settings (Look at commands->set->CACHE in the documentation). The CMAKE_C_FLAGS settings creates a list of flags that are passed to the compiler when compiling a c source file. Here, we just use the processor-specific flags and again as with OBJCOPY we want to put the CMAKE_C_FLAGS setting from here in the CACHE so that the entire project has this variable. We can add more generic flags like optimisation level to the c flags later on because they're not specific to a particular processor. So, notice that we also have toolchain-arm-none-eabi-rpibplus and toolchain-arm-none-eabi-rpi2 for the other board types. As with autotools, CMake uses a configuration step which works out what should be built and how. The result of the configuration step, if successful, is a Makefile which we can use with make (On Windows you must use mingw32-make ) to build our project. CMake uses a file in each directory that needs building called CMakeLists.txt. It's a simple text file as it's extension suggests. Here's the CMakeLists.txt file for armc-010 :","title":"toolchain-arm-none-eabi-rpi.cmake"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-3/#cmakeliststxt","text":"# Part of the Raspberry-Pi Bare Metal Tutorials # https://www.valvers.com/rpi/bare-metal/ # Copyright (c) 2013, Brian Sidebotham # This software is licensed under the MIT License. # Please see the LICENSE file included with this software. # CMake build environment for the Valvers Raspberry-Pi bare metal tutorials # CMake 2.8.10 Documentation: http://www.cmake.org/cmake/help/v2.8.10/cmake.html cmake_minimum_required ( VERSION 2.8 ) # Mark the language as C so that CMake doesn't try to test the C++ # cross-compiler's ability to compile a simple program because that will fail project ( valvers- ${ TUTORIAL } C ASM ) # We had to adjust the CMAKE_C_FLAGS variable in the toolchain file to make sure # the compiler would work with CMake's simple program compilation test. So unset # it explicitly before re-setting it correctly for our system set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -O0\" ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g\" ) set ( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -nostartfiles\" ) add_executable ( kernel. ${ TUTORIAL } . ${ BOARD } ${ TUTORIAL } .c ${ TUTORIAL } -cstartup.c ${ TUTORIAL } -cstubs.c ${ TUTORIAL } -start.S ) add_custom_command ( TARGET kernel. ${ TUTORIAL } . ${ BOARD } POST_BUILD COMMAND ${ CMAKE_OBJCOPY } ./kernel. ${ TUTORIAL } . ${ BOARD }${ CMAKE_EXECUTABLE_SUFFIX } -O binary ./kernel. ${ TUTORIAL } . ${ BOARD } .img COMMAND ${ CMAKE_OBJDUMP } -l -S -D ./kernel. ${ TUTORIAL } . ${ BOARD }${ CMAKE_EXECUTABLE_SUFFIX } > ./kernel. ${ TUTORIAL } . ${ BOARD } .asm WORKING_DIRECTORY ${ CMAKE_BINARY_DIR } COMMENT \"Convert the ELF output file to a binary image\" ) We specify a minimum version required, I just tend to start at 2.8 because most people have it, but our simple examples in this tutorial can most probably be used with earlier versions than that. The project() call tells CMake what the project is called and what languages are required. The languages can be left out, and frequently are - but there's a few reasons why we need to tell CMake explicitly what languages we're using here. If we don't do this, CMake tests the C++ compiler to make sure it can compile a simple program to validate the C++ compiler. However, as our system is bare metal and requires specific linker steps this fails and CMake falls over at the first hurdle. CMake assumes that C and C++ are the project's languages if you do not tell it any languages explicitly. Assembler files (.S) in the source list are ignored completely by CMake unless we \"enable\" the assembler by telling CMake in the project definition that we're using assembly files. When we enable assembler, CMake detects gcc as the assembler rather than as - this is good for us because we then only need one set of compilation flags. As we'll see in a bit, to successfully configure, we need to pass some C flags to CMake when configuring. This is so that the C compiler sanity check passes by enabling the C compiler to successfully compile a small C program. We then set the C flags that CMake will use when compiling C ( and assembler! ) files. These are exactly the same as we were passing to the gcc invocation in our bat or sh file to compile. We set the linker flags for when CMake links an executable. Again, this is the same as we were passing to the Linker through gcc when compiling and linking in one command. So CMake will pass this setting to the linker which will make sure we're using our linker script. Then we add an executable target. A target in CMake is basically something to build. An executable means that CMake knows this target is an executable. If we don't apply any special settings to the executable, the target name becomes the output filename for the target, plus any default prefix or suffix (for example Windows executables have the .exe suffix added). After the target name, we simply list the source files (including header files so that CMake can work out the dependencies for the build process). Finally we add a custom command associated with the executable target we've just defined. We declare it as being required to be run after building the executable target. This uses objcopy from our toolchain file to extract the binary image from the ELF file to a kernel image.","title":"CMakeLists.txt"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-3/#building","text":"So now building the example is slightly different. Navigate into the build sub-directory of the tutorial and run the batch file or bash script called configure. You can look in the script file to see how the configure call is done with CMake. The result of this configure command will be a CodeBlocks project file that you can use to edit, and build the tutorial, and there's a Makefile which the CodeBlocks project uses. You can use this Makefile directly to build the tutorial. From now on, when I use the term ${MAKE} I mean on Linux use the make command, and on Windows use the mingw32-make command. If you've not got mingw32-make on Windows then you best go get it now. I suggest getting the a copy from the mingw-builds project - just download one of the latest toolchains and it will come with mingw32-make. Build the project - it's the same as the arm009 tutorial, but built with the CMake build system instead. So long as it works for you, this is all then CMake I want to go into - this is an ARM bare metal tutorial, not a build-systems tutorial. However, it's important because soon the number of files we'll have will increase and we do not want to be having a hugely complicated command line to build each tutorial ( or at least, I don't! )","title":"Building"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-3/#system-timer-blinking-led","text":"Let's now look at using another peripheral in the Raspberry-Pi processor. We've so far used the GPIO controller to turn an LED on and off, we'll keep that going, but the rate at which we've been turning it on and off is unknown to us. We've just used a volatile loop so the processor takes some amount of time to do the work we've requested (loop and increment a variable!) and then it changes the state of the LED. It'd be much better if we could request that the processor pause for a certain amount of time that is easy to determine in software. The Raspberry-Pi processor (both BCM2835/6) has a peripheral called the System Clock. It's a 64-bit counter that continuously runs at a fixed rate. It's the introduction of this timer in ARM cores that made porting operating systems (which all need to be time-aware for thread context switching, etc.) easy!! Previously porting an operating system to a new processor, even in the same family of parts could require considerable re-writes. Again, referring to the BCM2835-ARM-Peripherals.pdf , on page 172 is the System Timer peripheral. This is a free-running 64-bit counter as we've already seen. We need to access these registers, and of the whole peripheral all we have to do is keep an eye on the counter value as it increases. Each increment takes 1us, so keeping track of time using the System Timer is very easy. In C, we can write a \"driver\" for this peripheral very easily for this basic functionality. We don't even have to initialise the peripheral. Firstly, we'll need the base address of the system timer: #define RPI_SYSTIMER_BASE 0x20003000 Remember from Pt1 of the tutorial that the physical address 0x7E000000 is mapped to the ARM physical address 0x2000000 , so 0x7E003000 becomes 0x20003000 to the processor! Then we can generate a struct which is structured the same as the registers for the peripheral: typedef struct { volatile uint32_t control_status ; volatile uint32_t counter_lo ; volatile uint32_t counter_hi ; volatile uint32_t compare0 ; volatile uint32_t compare1 ; volatile uint32_t compare2 ; volatile uint32_t compare3 ; } rpi_sys_timer_t ; In the driver code, we can declare this type of structure at memory address RPI_SYSTIMER_BASE by using a variable: static rpi_sys_timer_t * rpiSystemTimer = ( rpi_sys_timer_t * ) RPI_SYSTIMER_BASE ; and then finally, we can implement our delay function: void RPI_WaitMicroSeconds ( uint32_t us ) { volatile uint32_t ts = rpiSystemTimer -> counter_lo ; while ( ( rpiSystemTimer -> counter_lo - ts ) < us ) { // BLANK } } Here, all we do is get the current value of the counter wait until the counter is the required number of us higher than when the function was called before returning. As per the Cambridge tutorials, this version ignores the upper 32-bits of the counter. It will take over an hour before the timer increases above 32-bits anyway, so I'm not expecting us to test a blinking LED for that long!","title":"System Timer Blinking LED"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-3/#armc-011c","text":"#include <string.h> #include <stdlib.h> #include \"rpi-gpio.h\" #include \"rpi-systimer.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Main function - we'll never return from here */ void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ) { int loop ; /* Write 1 to the GPIO init nibble in the Function Select GPIO peripheral register to enable the LED pin an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { /* Set the GPIO16 output high ( Turn OK LED off )*/ LED_OFF (); /* Wait half a second */ RPI_WaitMicroSeconds ( 500000 ); /* Set the GPIO16 output low ( Turn OK LED on )*/ LED_ON (); /* Wait half a second */ RPI_WaitMicroSeconds ( 500000 ); } } Now we have a slightly slower blinking LED where the time is known - 0.5 seconds before toggling the LED. The system timer can be extremely useful. This is definitely the easiest way to get using a timer on the Raspberry-Pi! Don't forget to build armc-011 tutorial you need CMake installed. Then you can build with: cd part-3/armc-011/ ./build.sh [ RPI MODEL ]","title":"armc-011.c"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-3/#armc-012c","text":"In this example, we can introduce something a bit more fun. Instead of simply pulsing the LED on and off we can go ahead and do some software PWM of the LED brightness. #include <string.h> #include <stdlib.h> #include \"rpi-gpio.h\" #include \"rpi-systimer.h\" /** GPIO Register set */ volatile unsigned int * gpio = ( unsigned int * ) GPIO_BASE ; /** Main function - we'll never return from here */ void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ) { int brightness = 255 ; int speed = 16 ; int up = 0 ; /* Write 1 to the GPIO init nibble in the Function Select GPIO peripheral register to enable the LED pin an output */ gpio [ LED_GPFSEL ] |= ( 1 << LED_GPFBIT ); /* Never exit as there is no OS to exit to! */ while ( 1 ) { if ( brightness > 0 ) { /* Set the GPIO16 output high ( Turn OK LED off )*/ LED_OFF (); /* Wait half a second */ RPI_WaitMicroSeconds ( brightness ); } if ( ( 255 - brightness ) >= 0 ) { /* Set the GPIO16 output low ( Turn OK LED on )*/ LED_ON (); /* Wait half a second */ RPI_WaitMicroSeconds ( 255 - brightness ); } speed -- ; if ( speed == 0 ) { speed = 16 ; if ( up ) { if ( brightness < 255 ) brightness ++ ; if ( brightness == 255 ) up = 0 ; } else { if ( brightness ) brightness -- ; if ( brightness == 0 ) up = 1 ; } } } } The output is quite nifty as we get a fading ACK LED. Here is an example of it running on a pi-zero: I think in the next tutorial part we'll introduce interrupts. The code in this tutorial is far from ideal. Function calls that wait half a second before returning are not what we want. Interrupts can help keep our system more responsive so in that 0.5s we can get on and do other stuff and just let the processor interrupt the code when the 0.5s is up. When you're ready, head over to Pt4...","title":"armc-012.c"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/","text":"BMC Part 4 - Interrupts \u00b6 In this tutorial, we're going to look at using interrupts to generate the LED flash. Interrupts are an essential ingredient in embedded programming. We're going to investigate the BCM2835/6 interrupt process and implement an interrupt for the ARM Timer peripheral to blink the LED. I appreciate that blinking an LED is probably starting to get boring, but small steps are the way to learn a big system, and learning how to handle interrupts will be enough of a learning curve without having to change what we're doing at the same time. In the next tutorial we'll move away from blinking an LED. Reference Material \u00b6 We need some reading material for this tutorial - this is how I put the tutorial together, by reading and studying the manuals available for the processor. Yes there's a lot of text and more than one manual - but that's the only way you learn! The material that's useful: ARM1176JZF-S Technical Reference Manual BCM2385 ARM Peripherals ARMv6 Architecture Reference Manual This requires agreeing to an NDA to get hold of the PDF version of the document, but it's at least free and easy to get! This document also describes the ARMv7 architecture which the Cortex A7 uses in the BCM2836 (Raspberry-pi 2) All of those documents, and an ARM instruction set reference are useful for this tutorial. The Code \u00b6 The code for the tutorial is hosted on GitHub . The best thing to do to get the code is to clone the repo if you haven't already. Otherwise you can grab the zip of the latest code instead - but you won't be able to get fixes when they're released! ;) Some of the code that's specific to the tutorial and differs from the last tutorial will be discussed here. This tutorial only uses the part-4/armc-013 folder. Interrupts \u00b6 Let's get straight what an interrupt is. In terms of the ARM processor we're using an interrupt is simply a type of exception. An exception in the processor causes the PC (Program Counter) to be set to a pre-defined value. This pre-defined value will cause code execution to be interrupted and for code execution to run an exception handler put the pre-defined position. At the end of this exception handler control is generally returned to the previously executing code. Exception handlers should be quick and concise as they can occur frequently and obviously take time away from the main code. Interrupt signals are generally created by hardware. The exception we all know, possibly without realising it is the reset signal. If we strobe the reset line the PC is set to 0 and execution starts from this address. Reset is a bit special though, there's no way to return from the reset exception! All other exceptions can be returned from because the previous PC value has been saved. Although I've stated above that when resetting a processor, execution starts at address 0, this is not always correct. For example in many processors that support bootloaders the reset value can be different so that the application code starts at address 0 and the bootloader code starts somewhere else. Upon strobing the reset line execution will start at the reset vector, which can be different to 0. The important thing here is simply the term vector . A vector is a value that will be loaded into the processors PC when a given condition occurs. Each exception type has a vector, and these vectors reside next to each other in memory in what's termed the vector table. See, it's all pretty easy really! The base address of the vector table is 0. Vector tables come in a few varieties, either each vector is simply a value to be loaded into the PC to start execution at a linker-determined position, or else the vector is code that will be executed straight away without any need to do another PC load. For the ARMv6 architecture the vector table is at memory address 0 and is organised like below, from section A2.6 of the ARM Architecture Reference Manual covering ARMv5 and ARMv6. Please note, that on the ARM documentation website all you'll see is a reference to ARMv6-M or ARMv5. ARMv6-M is for the Cortex-M range of processors which are designed to be more heavily embedded than the application processors (The Cortex-A range), so make sure you get the ARMv5 document which also covers the ARMv6 architecture (which is what the ARM1176JZF-S is). For the Raspberry-pi 2 which uses the Cortex A7 processor the same table can be found in the ARMv7 reference manual in section B1.8.1 (Table B1-3). It is essentially the same. Exception Type Mode VE Normal Address High Vector Address Reset Supervisor 0x00 0xFFFF0000 Undefined Instruction Undefined 0x04 0xFFFF0004 Software Interrupt (SWI) Supervisor 0x08 0xFFFF0008 Prefetch Abort Abort 0x0C 0xFFFF000C Data Abort Abort 0x10 0xFFFF0010 IRQ (Interrupt) IRQ 0 0x18 0xFFFF0018 IRQ (Interrupt) IRQ 1 Implementation Defined FIQ (Fast Interrupt) FIQ 0 0x1C 0xFFFF001C FIQ (Fast Interrupt) FIQ 1 Implementation Defined As you can see, as we've been discussing, the reset vector is at address 0. The next vector is for us to deal with an undefined instruction exception, an unlikely scenario, but something we can at least trap and debug at some point. Following that we have the Software Interrupt, Pre-fetch abort, Data Abort, IRQ (Interrupt) and FIQ (Fast Interrupt) exception vectors. The vectors are sequential except between Data Abort and IRQ where there is an 4-byte gap. The note above the table in the document reads: NOTE : The normal vector at address 0x00000014 and the high vector at address 0xFFFF0014 are reserved for future expansion. Vectors are only 4-bytes (one 32-bit instruction) apart. We know therefore the reset vector is simply going to be a branch instruction to the start of our actual code so that the undefined instruction exception can be implemented too. In fact, each of these vectors is simply a branch instruction to a handler somewhere else in memory. The Normal Address is what we're interested in on the Raspberry-Pi. The High Vector Address is selected in hardware, and that hardware doesn't exist, so the vectors reside at the normal addresses. It's useful, as I've said before to have another place to start executing code if we need a different application installed such as another bootloader or something. We can ignore the High Vector Addresses. Then we have the Mode column - this is going to be very important. If we look at the vector table, the mode listed for the reset vector is Supervisor. Processor Modes \u00b6 Further back in section A2.2 of the ARM Architecture Reference Manual the documentation covers processors modes. When the processor is reset it is running in Supervisor mode, which is known as a privileged mode. From this operating mode we can write to most of the processors registers and can also change the processors current mode. The only mode that cannot change modes is User - this is designed to execute applications, whereas the privileged modes are meant for operating system tasks. There is basically a mode per exception. As was mentioned previously we start at the reset vector in Supervisor mode, so far all of our code has operating in that single mode. However, when an exception occurs the processor changes mode to the exception-specific mode. The mode can also be changed in software too if necessary. The next section of the Architecture Reference Manual describes the registers available. This is again, another important section. Look at Figure A2-1 (Register Organization) and you'll see something interesting... As seen by the small icon and note at the bottom of the table, some of the registers are mode-specific. This can be useful, for example in the Fast Interrupt exception a lot of registers have been replaced by mode-specific registers. This means that we can use these registers without fear of altering the behaviour of code that was operating in User or Supervisor mode before the Fast Interrupt Exception occurred. Normally, the first thing we would need to do in an interrupt handler would be to save the registers we're going to use and the last thing we'd do in an interrupt handler would be to restore those registers values to what they were before the interrupt handler executed. The code like this at the start of a function or interrupt handler is called the prologue and the code at the end of the function or handler is known as the epilogue. The shadow register implementation means that many times there's no need to save and restore registers in a Fast Interrupt service routine. Coding Interrupt Handlers \u00b6 Providing interrupt handlers can be a bit tricky. It's generally entirely non-portable and you'll have to read the manual for your toolchain in order to understand how to write them. This generally involves informing the compiler that a function you declare should be used to handle a type of interrupt. The toolchain can them fill the vector table with the necessary information. The vector table is usually present in the linker script which defines the memory layout of the target device. because normally these vectors are read-only. For gcc and ld we can look at the gcc manual on function attributes relating to ARM. https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html It reads: Use this attribute on the ARC, ARM, AVR, CR16, ... ports to indicate that the specified function is an interrupt handler. The compiler generates function entry and exit sequences suitable for use in an interrupt handler when this attribute is present. NOTE, for the ARM, you can specify the kind of interrupt to be handled by adding an optional parameter to the interrupt attribute like this: void f () __attribute__ ((interrupt (\"IRQ\"))); Permissible values for this parameter are: IRQ, FIQ, SWI, ABORT and UNDEF. The parameter options align well with the vector table we got from the manual. Reset is an ABORT type, and everything else has a parameter available. Therefore to write a very basic \"undefined instruction\" handler we can define declare and implement our handler like this: /** @brief The undefined instruction interrupt handler If an undefined instruction is encountered, the CPU will start executing this function. Just trap here as a debug solution. */ void __attribute__ (( interrupt ( \"UNDEF\" ))) undefined_instruction_vector ( void ) { while ( 1 ) { /* Do Nothing! */ } } While it looks like this is useless code, it is actually pretty useful. We can set a breakpoint on the while(1) and debug whilst looking out for this breakpoint to trip. Usually then we can do some stack unwinding (manually!) to find where the source of the undefined instruction. Coding Vector Tables \u00b6 A strange title that, Coding Vector Tables. With many embedded processors there's no coding or runtime setup of vector tables - instead the vector table is defined in the linker script and the toolchain fills in those locations with the address or jump instruction necessary to execute the relevant handler. The Raspberry-Pi vector table is extremely small, and it can be like this because some extra work is required in the Interrupt handler compared to more embedded processors such as the Cortex M range. No matter what the Interrupt source is, the same function is called. Inside the Interrupt handler we must work out what the source of the interrupt was before handling that interrupt. Essentially you end up with a large switch structure inside the interrupt handler. You can of course call other functions from the interrupt handler, but again think about the cost of the prologue and epilogue before you do! When the raspberry-pi starts running our code, as we've discovered earlier in the turotials it loads the code from the SD card to RAM at address 0x00008000 and then starts executing the code. So how can we possibly code the vector table and get the correct jump instructions into the vector table? Well, everything is in RAM and that's the key - this is read/write memory and in supervisor mode we can write to any location we want. So at runtime when our code is being executed we can overwrite the vector table at runtime. All we need is a vector table to write. Let's have a look at what needs to be done to implement the vector table. It's easiest if we drop down to assembler to do this. It really could do with being done as the very first thing in our code anyway so it's setup right from the start. Here is some modified assembler for our _statup: label which is where our linker knows we want to start execution. The linker makes sure this is at the start of our binary: At fist, I thought this was going to be easy - we just hard-code some values into a table and copy that table to the start of RAM where the vector table resides. Here's some initial code: _start: ldr pc, =_reset_ ldr pc, =undefined_instruction_vector ldr pc, =software_interrupt_vector ldr pc, =prefetch_abort_vector ldr pc, =_reset_ ldr pc, =_reset_ ldr pc, =interrupt_vector ldr pc, =fast_interrupt_vector _reset_: // Copy the vector table to the active table at 0x00000000 ldr r0, =_start ldr r1, #0x0000 ldmia r0!,{r2, r3, r4, r5, r6, r7, r8, r9} stmia r1!,{r2, r3, r4, r5, r6, r7, r8, r9} There are only a few assembler instructions here, so don't panic! The labels refer to C functions that have been implemented with the correct attributes for each exception type. See the file rpi-interrupts.c to see these C functions. The Loading of addresses to a register with LDR is documented here reset and undefined_instruction_vector, etc. are the labels used as the function addresses. So we have a table at the very start of our code. A neat side-effect of having this table right at the start of our code is that the first thing we do is run the reset vector code which jumps to the reset label and starts the execution of our code, thus jumping the vector table we don't want it to try and execute. Excellent! The ldmia and stmia instructions can load and store 32 bytes of data at a time, so are quick at shifting data about. Each register can load a 4-byte (32-bit) value, so using eight registers lets us move 32-bytes, and there are 8 32-bit vectors in our table, so one load and one store instruction later we've moved the whole of our vector table to 0x00000000 . See the documentation for this on the ARM website But, before we go too much further, let me show you why this doesn't work! It's all relative \u00b6 Compilation of the vector table is successful, but as always just a successful compilation doesn't get you a working application. Earlier in the tutorials I introduced the online disassembler - a great tool, but there's something else in our toolchain's toolbag already, objdump! [~]$ arm-none-eabi-objdump --help That's your friend, and even more friendly is running this from the build directory of the part-4/armc-013/ tutorial folder once you've built the tutorial: [~]$ arm-none-eabi-objdump -S armc-013 > armc-013.disasm This tells objdump to disassemble the executable and we then redirect objdumps output to the armc-013.diasm file which we can then look at in a text editor. Here's what we get at the start of that file with the vector table implementation I described above: Disassembly of section .text: 00008000 <_start>: 8000: e59ff064 ldr pc, [pc, #100] ; 806c <_enable_interrupts+0x10> 8004: e59ff064 ldr pc, [pc, #100] ; 8070 <_enable_interrupts+0x14> 8008: e59ff064 ldr pc, [pc, #100] ; 8074 <_enable_interrupts+0x18> 800c: e59ff064 ldr pc, [pc, #100] ; 8078 <_enable_interrupts+0x1c> 8010: e59ff054 ldr pc, [pc, #84] ; 806c <_enable_interrupts+0x10> 8014: e59ff050 ldr pc, [pc, #80] ; 806c <_enable_interrupts+0x10> 8018: e59ff05c ldr pc, [pc, #92] ; 807c <_enable_interrupts+0x20> 801c: e59ff05c ldr pc, [pc, #92] ; 8080 <_enable_interrupts+0x24> 00008020 <_reset_>: 8020: e3a00902 mov r0, #32768 ; 0x8000 Hmmm, well that doesn't look right, what we'd expect from the first line is an equivalent of ldr pc, #0x8020 which is the reset label is. The toolchain appears to be loading a value far away from where we'd expect. Further down the file we can find the location 0x806C : 0000805c <_enable_interrupts>: 805c: e10f0000 mrs r0, CPSR 8060: e3c00080 bic r0, r0, #128 ; 0x80 8064: e121f000 msr CPSR_c, r0 8068: e1a0f00e mov pc, lr 806c: 00008020 .word 0x00008020 8070: 000085e8 .word 0x000085e8 8074: 000085f4 .word 0x000085f4 8078: 00008600 .word 0x00008600 807c: 00008628 .word 0x00008628 8080: 0000869c .word 0x0000869c Some light at the end of the tunnel, the compiler has inserted some constants which are being loaded into the PC so actually, loading the PC with the value at PC + 0x6C is correct for the vector because the value at that location is 0x8020 which is the location of the reset label. Again, we think this could work after all. But of course, it doesn't. The first part of our code now moves the code from 0x8000 to 0x0000 and the constants have not moved from 0x806C to 0x006C ; Neither can we move these constants easily either because the compiler inserts these at the next available space, there's no position we can predict. The answer is to keep everything relative, but to create some constants of our own. We can keep these constants relative to the LDR PC instruction so that the relative offset still works. We need to create a table of constant addresses after the vector table loads. This way we can copy both tables and the constants will still be in the same position relative to the LDR instructions. Let's set that up: _start: ldr pc, _reset_h ldr pc, _undefined_instruction_vector_h ldr pc, _software_interrupt_vector_h ldr pc, _prefetch_abort_vector_h ldr pc, _data_abort_vector_h ldr pc, _unused_handler_h ldr pc, _interrupt_vector_h ldr pc, _fast_interrupt_vector_h _reset_h: .word _reset_ _undefined_instruction_vector_h: .word undefined_instruction_vector _software_interrupt_vector_h: .word software_interrupt_vector _prefetch_abort_vector_h: .word prefetch_abort_vector _data_abort_vector_h: .word data_abort_vector _unused_handler_h: .word _reset_ _interrupt_vector_h: .word interrupt_vector _fast_interrupt_vector_h: .word fast_interrupt_vector _reset_: mov r0, #0x8000 mov r1, #0x0000 ldmia r0!,{r2, r3, r4, r5, r6, r7, r8, r9} stmia r1!,{r2, r3, r4, r5, r6, r7, r8, r9} ldmia r0!,{r2, r3, r4, r5, r6, r7, r8, r9} stmia r1!,{r2, r3, r4, r5, r6, r7, r8, r9} Note that we've now had to double the amount of data we copy so that we get the constants copied along with the relative PC loads of those constants. This feels like a bit of a cludge but as objdump will show us, this gets the job done and relocates the vector table as required. The vector table now references the labels directly suffixed to the vector table itself and so the relative position remains constant so long as both are copied as-is. The output of objdump -S shows us the workable solution: Disassembly of section .text: 00008000 <_start>: 8000: e59ff018 ldr pc, [pc, #24] ; 8020 <_reset_h> 8004: e59ff018 ldr pc, [pc, #24] ; 8024 <_undefined_instruction_vector_h> 8008: e59ff018 ldr pc, [pc, #24] ; 8028 <_software_interrupt_vector_h> 800c: e59ff018 ldr pc, [pc, #24] ; 802c <_prefetch_abort_vector_h> 8010: e59ff018 ldr pc, [pc, #24] ; 8030 <_data_abort_vector_h> 8014: e59ff018 ldr pc, [pc, #24] ; 8034 <_unused_handler_h> 8018: e59ff018 ldr pc, [pc, #24] ; 8038 <_interrupt_vector_h> 801c: e59ff018 ldr pc, [pc, #24] ; 803c <_fast_interrupt_vector_h> 00008020 <_reset_h>: 8020: 00008040 .word 0x00008040 00008024 <_undefined_instruction_vector_h>: 8024: 000085f8 .word 0x000085f8 00008028 <_software_interrupt_vector_h>: 8028: 00008604 .word 0x00008604 0000802c <_prefetch_abort_vector_h>: 802c: 00008610 .word 0x00008610 00008030 <_data_abort_vector_h>: 8030: 00008624 .word 0x00008624 00008034 <_unused_handler_h>: 8034: 00008040 .word 0x00008040 00008038 <_interrupt_vector_h>: 8038: 00008638 .word 0x00008638 0000803c <_fast_interrupt_vector_h>: 803c: 000086ac .word 0x000086ac 00008040 <_reset_>: 8040: e3a00902 mov r0, #32768 ; 0x8000 You can go ahead and see that the armc-013 tutorial is in fact using this solution to provide the exception vector table at run time. The Interrupt Controller \u00b6 So now we have the exception vectors tied to our exception handlers (which are implemented in C) but the processor still doesn't know when to interrupt. Interrupts on a processor are enabled per interrupt source and then globally enabled and disabled. This way we can select which interrupt sources we're interested in and also whether to allow interrupts or not. Sometimes we want to temporarily disable interrupts to guard a non-atomic memory operation if the same memory is used in an interrupt handler for example. The Raspberry-Pi ARM has an interrupt controller where we can set up the enable and disable the interrupt sources we're interested in. From the BCM2835 ARM peripherals datasheet we can see section 7 describe the interrupt controller present. The documentation here is a bit lacking - but see the section that says ARM peripherals interrupts table. These are basically the interrupt sources we have control over. We're blinking an LED and so we just want to capture the ARM Timer interrupt source. In the tutorial code, we will map a C structure to the address of the interrupt controller to give us access to the registers. This is how we define the struct for the interrupt controller registers and implement an instance at the base address, again this information is from section 7.5 of the document above: In rpi-interrupts.h : /** @brief See Section 7.5 of the BCM2835 ARM Peripherals documentation, the base address of the controller is actually xxxxB000, but there is a 0x200 offset to the first addressable register for the interrupt controller, so offset the base to the first register */ #define RPI_INTERRUPT_CONTROLLER_BASE ( PERIPHERAL_BASE + 0xB200 ) /** @brief The interrupt controller memory mapped register set */ typedef struct { volatile uint32_t IRQ_basic_pending ; volatile uint32_t IRQ_pending_1 ; volatile uint32_t IRQ_pending_2 ; volatile uint32_t FIQ_control ; volatile uint32_t Enable_IRQs_1 ; volatile uint32_t Enable_IRQs_2 ; volatile uint32_t Enable_Basic_IRQs ; volatile uint32_t Disable_IRQs_1 ; volatile uint32_t Disable_IRQs_2 ; volatile uint32_t Disable_Basic_IRQs ; } rpi_irq_controller_t ; and in rpi-interrupts.c : /** @brief The BCM2835 Interupt controller peripheral at it's base address */ static rpi_irq_controller_t * rpiIRQController = ( rpi_irq_controller_t * ) RPI_INTERRUPT_CONTROLLER_BASE ; /** @brief Return the IRQ Controller register set */ rpi_irq_controller_t * RPI_GetIrqController ( void ) { return rpiIRQController ; } The ARM Timer Peripheral \u00b6 The ARM timer is in the Basic interrupt set. So to tell the processor we want to enable interrupts from the ARM Timer peripheral we set the relevant bit in the Basic Interrupt enable register: Also in rpi-interrupts.h: /** @brief Bits in the Enable_Basic_IRQs register to enable various interrupts. See the BCM2835 ARM Peripherals manual, section 7.5 */ #define RPI_BASIC_ARM_TIMER_IRQ (1 << 0) #define RPI_BASIC_ARM_MAILBOX_IRQ (1 << 1) #define RPI_BASIC_ARM_DOORBELL_0_IRQ (1 << 2) #define RPI_BASIC_ARM_DOORBELL_1_IRQ (1 << 3) #define RPI_BASIC_GPU_0_HALTED_IRQ (1 << 4) #define RPI_BASIC_GPU_1_HALTED_IRQ (1 << 5) #define RPI_BASIC_ACCESS_ERROR_1_IRQ (1 << 6) #define RPI_BASIC_ACCESS_ERROR_0_IRQ (1 << 7) and in our main C code to enable the ARM Timer IRQ: /* Enable the timer interrupt IRQ */ RPI_GetIrqController () -> Enable_Basic_IRQs = RPI_BASIC_ARM_TIMER_IRQ ; The ARM Timer interrupt source is now enabled. However, the processor still needs to have interrupts globally enabled for any interrupt to execute the Interrupt handler, and the ARM Timer peripheral also needs to be enabled and configured to generate the interrupts! The ARM Timer peripheral is documented in the same BCM2835 ARM peripherals datasheet in section 14. Again, we map the peripherals register set to a C struct to give us access to the registers: In rpi-armtimer.h: /** @brief See the documentation for the ARM side timer (Section 14 of the BCM2835 Peripherals PDF) */ #define RPI_ARMTIMER_BASE ( PERIPHERAL_BASE + 0xB400 ) /** @brief 0 : 16-bit counters - 1 : 23-bit counter */ #define RPI_ARMTIMER_CTRL_23BIT ( 1 << 1 ) #define RPI_ARMTIMER_CTRL_PRESCALE_1 ( 0 << 2 ) #define RPI_ARMTIMER_CTRL_PRESCALE_16 ( 1 << 2 ) #define RPI_ARMTIMER_CTRL_PRESCALE_256 ( 2 << 2 ) /** @brief 0 : Timer interrupt disabled - 1 : Timer interrupt enabled */ #define RPI_ARMTIMER_CTRL_INT_ENABLE ( 1 << 5 ) #define RPI_ARMTIMER_CTRL_INT_DISABLE ( 0 << 5 ) /** @brief 0 : Timer disabled - 1 : Timer enabled */ #define RPI_ARMTIMER_CTRL_ENABLE ( 1 << 7 ) #define RPI_ARMTIMER_CTRL_DISABLE ( 0 << 7 ) /** @brief Section 14.2 of the BCM2835 Peripherals documentation details the register layout for the ARM side timer */ typedef struct { /** The timer load register sets the time for the timer to count down. This value is loaded into the timer value register after the load register has been written or if the timer-value register has counted down to 0. */ volatile uint32_t Load ; /** This register holds the current timer value and is counted down when the counter is running. It is counted down each timer clock until the value 0 is reached. Then the value register is re-loaded from the timer load register and the interrupt pending bit is set. The timer count down speed is set by the timer pre-divide register. */ volatile uint32_t Value ; /** The standard SP804 timer control register consist of 8 bits but in the BCM implementation there are more control bits for the extra features. Control bits 0-7 are identical to the SP804 bits, albeit some functionality of the SP804 is not implemented. All new control bits start from bit 8 upwards. */ volatile uint32_t Control ; /** The timer IRQ clear register is write only. When writing this register the interrupt-pending bit is cleared. When reading this register it returns 0x544D5241 which is the ASCII reversed value for \"ARMT\". */ volatile uint32_t IRQClear ; /** The raw IRQ register is a read-only register. It shows the status of the interrupt pending bit. 0 : The interrupt pending bits is clear. 1 : The interrupt pending bit is set. The interrupt pending bits is set each time the value register is counted down to zero. The interrupt pending bit can not by itself generates interrupts. Interrupts can only be generated if the interrupt enable bit is set. */ volatile uint32_t RAWIRQ ; /** The masked IRQ register is a read-only register. It shows the status of the interrupt signal. It is simply a logical AND of the interrupt pending bit and the interrupt enable bit. 0 : Interrupt line not asserted. 1 :Interrupt line is asserted, (the interrupt pending and the interrupt enable bit are set.) */ volatile uint32_t MaskedIRQ ; /** This register is a copy of the timer load register. The difference is that a write to this register does not trigger an immediate reload of the timer value register. Instead the timer load register value is only accessed if the value register has finished counting down to zero. */ volatile uint32_t Reload ; /** The Pre-divider register is not present in the SP804. The pre-divider register is 10 bits wide and can be written or read from. This register has been added as the SP804 expects a 1MHz clock which we do not have. Instead the pre-divider takes the APB clock and divides it down according to: timer_clock = apb_clock/(pre_divider+1) The reset value of this register is 0x7D so gives a divide by 126. */ volatile uint32_t PreDivider ; /** The free running counter is not present in the SP804. The free running counter is a 32 bits wide read only register. The register is enabled by setting bit 9 of the Timer control register. The free running counter is incremented immediately after it is enabled. The timer can not be reset but when enabled, will always increment and roll-over. The free running counter is also running from the APB clock and has its own clock pre-divider controlled by bits 16-23 of the timer control register. This register will be halted too if bit 8 of the control register is set and the ARM is in Debug Halt mode. */ volatile uint32_t FreeRunningCounter ; } rpi_arm_timer_t ; and the same in rpi-armtimer.c : static rpi_arm_timer_t * rpiArmTimer = ( rpi_arm_timer_t * ) RPI_ARMTIMER_BASE ; rpi_arm_timer_t * RPI_GetArmTimer ( void ) { return rpiArmTimer ; } Then, we can setup the ARM Timer peripheral from the main C code with something like: /* Setup the system timer interrupt */ /* Timer frequency = Clk/256 * 0x400 */ RPI_GetArmTimer () -> Load = 0x400 ; /* Setup the ARM Timer */ RPI_GetArmTimer () -> Control = RPI_ARMTIMER_CTRL_23BIT | RPI_ARMTIMER_CTRL_ENABLE | RPI_ARMTIMER_CTRL_INT_ENABLE | RPI_ARMTIMER_CTRL_PRESCALE_256 ; As documented the load register is the value loaded into the timer each time the timer elapses. This value is loaded into the Value register either when the register is written, or else when the Value register has counted down to 0. The timer decrements the Value register at a frequency dervied from the system clock. When the Value register reaches 0 the Value register is re-loaded with the Load value and the interrupt pending bit is set. It's at this point our interrupt handler should get called. The bits in the Control register that we're setting should be reasonably self-explanatory. Although the documentation says CTRL_23BIT I suspect (as do others) that this is a typo and it's meant to read CTRL_32BIT ! All that's left after configuring the ARM Timer and the Interrupt controller is to globally enable interrupts. This is a function that I wrote in assembler again because the instructions to enable the registers are not available through any C instructions: In armc-013-start.S: _enable_interrupts: mrs r0, cpsr bic r0, r0, #0x80 msr cpsr_c, r0 cpsie i mov pc, lr This code is pretty straight forward. Section A1.1.3 of the ARM ARM describes the Status registers in the processor and describes the Current Program Status Register (CPSR). Some information is covered in this section and of important note is \"The CPSR is accessed with special instructions\". Section A2.5 of the ARM ARM describes the format of the CPSR register in more detail and details the exact layout of the CPSR register. Section A2.5.6 describes the interrupt disable bits, and that gets us the last bit of information we need. Section A4.1.38 MRS describes the Move Program Status Register to general purpose register instruction which is the special instruction referred to in Section A1.1.3 of the manual. So, we copy the contents of the Current Program Status Register into R0. Then we clear bit 7 ( Remember (1 << 7) == 0x80 ) in the R0 to enable interrupts. Section A2.5.6 and A2.5 gave us the details for that instruction. Then we copy r0 back to the Current Program Status Register which is the point at which interrupts become enabled. Finally we load the Program Counter with the Link Register contents to return from enabling interrupts. The last thing to do is to write something in the interrupt handler to deal with toggling the LED and to clear the interrupt pending bit. Clearing the interrupt pending bit for the ARM Timer is essential otherwise the processor will not know we have dealt with that interrupt and as soon as it exits from the interrupt handler it will immediately enter it again because the interrupt pending bit of an enabled interrupt source is still set. The interrupt handler is in rpi-interrupts.c: void __attribute__ (( interrupt ( \"IRQ\" ))) interrupt_vector ( void ) { static int lit = 0 ; if ( RPI_GetArmTimer () -> MaskedIRQ ) { /* Clear the ARM Timer interrupt - it's the only interrupt we have enabled, so we want don't have to work out which interrupt source caused us to interrupt */ RPI_GetArmTimer () -> IRQClear = 1 ; /* Flip the LED */ if ( lit ) { RPI_SetGpioHi ( LED_GPIO ); lit = 0 ; } else { RPI_SetGpioLo ( LED_GPIO ); lit = 1 ; } } } Simples! Our main code now has no code in the main while(1) {} loop because everything is being done in the interrupt handler. In part-4/armc-013/armc-013.c : void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ) { /* Write 1 to the LED init nibble in the Function Select GPIO peripheral register to enable LED pin as an output */ RPI_SetGpioPinFunction ( LED_GPIO , FS_OUTPUT ); RPI_SetGpioHi ( LED_GPIO ); #ifdef RPI4 gic400_init ( 0xFF840000UL ); #endif RPI_EnableARMTimerInterrupt (); /* Setup the system timer interrupt Timer frequency = Clk/256 * 0x400 NOTE: If the system decides to alter the clock, the frequency of these interrupts will also change. The system timer remains consistent. */ #if defined ( RPI4 ) RPI_GetArmTimer () -> Load = 0x4000 ; #else RPI_GetArmTimer () -> Load = 0x400 ; #endif /* Setup the ARM Timer */ RPI_GetArmTimer () -> Control = RPI_ARMTIMER_CTRL_23BIT | RPI_ARMTIMER_CTRL_ENABLE | RPI_ARMTIMER_CTRL_INT_ENABLE | RPI_ARMTIMER_CTRL_PRESCALE_256 ; /* Enable interrupts! */ _enable_interrupts (); /* Never exit as there is no OS to exit to! */ while ( 1 ) { } } We now have interrupts up and working and in the exceptions you can do different things with the LED to use them to debug any nasty situations. We'll get onto JTAG debug in a future tutorial, but the next tutorial has to be the mailbox and GPU to get something more interesting happening, and what's more interesting than graphics!? RPI 4 Interrupts \u00b6 The Raspberry pi 4 was another shift in architecture. It features a common General Interrupt Controller (GIC) which is a v2 GIC-400 peripheral. This was added to considerably improve the performance of virtualisation. Running Containers on a RPI4 is much more efficient compared to earlier models. Thankfully, the RPI foundation have said this will be the last revision of the same RPI format. It's a nightmare trying to support all of these model differences in a basic tutorial! The same interrupt controller as the rest of the Broadcom BCM SoCs is still in place and is configured in the same way, except the interrupt line from that controller is fed into the GIC. At reset this means the interrupt signal will not be routed to the CPU running code in order to be able to respond to the interrupt. We will have to add RPI4-specific code which allows us to configure the GIC peripheral to pass the interrupt signal on to one of the CPU cores. As we're not doing any multi-core work at the moment we can configure the GIC to route all interrupt signals to CPU0 which has our interrupt service routines. To find where the peripheral is located in memory - we turn to the linux source code: Knowing that the RPI4 uses the BCM2711 (linked in the kernel source code as BCM2838 ) processor, in keeping with the RPI series helps: An excerpt from the device tree for the BCM2838 shows the GIC, along with the other interrupt controller: soc { ranges = <0x7e000000 0x0 0xfe000000 0x01800000>, <0x7c000000 0x0 0xfc000000 0x02000000>, <0x40000000 0x0 0xff800000 0x00800000>; /* Emulate a contiguous 30-bit address range for DMA */ dma-ranges = <0xc0000000 0x0 0x00000000 0x3c000000>; /delete-node/ interrupt-controller@7e00f300; /delete-node/ v3d@7ec00000; local_intc: local_intc@40000000 { compatible = \"brcm,bcm2836-l1-intc\"; reg = <0x40000000 0x100>; }; gicv2: gic400@40041000 { interrupt-controller; #interrupt-cells = <3>; compatible = \"arm,gic-400\"; reg = <0x40041000 0x1000>, <0x40042000 0x2000>, <0x40044000 0x2000>, <0x40046000 0x2000>; interrupts = <GIC_PPI 9 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_HIGH)>; }; The physical address is 0x40041000 - but we can see from the device tree configuration just above that the physical address 0x40000000 is mapped to 0xFF800000 so the GIC400 is available to us at 0xFF841000 - it has four sets of registers define by the reg tag. In order for CPU0 to receive any interrupt signals, we're going to have to go ahead and configure this peripheral. In keeping with this tutorial series, let's not get bogged down with trying to over-complicate a driver. All we want to do is configure this peripheral from it's reset state to send all interrupts to CPU0 . Documetation \u00b6 There is GIC-400 documentation available from ARM. There is also the ARM GIC Architecture documentation to consider too. There's a lot of information around secure and non-secure access to the GIC. For now, we don't need to delve too deep. Our task is simple - get interrupts routed to CPU0 . Register Map \u00b6 The GIC-400 register map is available under the Programmer's Model section of the CoreLink-400 Generic Interrupt Controller documentation . The Register Map is divided up into function blocks. The functional blocks are defined in section 3.2 as: GICD_ Distributor GICC_ CPU Interfaces GICH_ Virtual Interface control blocks GICV_ Virtual CPU Interfaces We're not interested in the Virtual blocks, but we are of course interested in the other blocks. The functional block offsets are shown in the table and align with the device tree reg tags above. Offset Block 0x0000 - 0x0FFF Reserved 0x1000 - 0x1FFF Distributor ( GICD_ ) 0x2000 - 0x2FFF CPU Interfaces ( GICC_ ) 0x4000 - 0x4FFF Virtual interface control for the process that is performing the access 0x5000 - 0x5FFF Virtual interface control for the processor selected by address bits 11:9 Later on in the same section is breakdown of all registers in those blocks. It's this information that can be put into code. Then, in order to do a simple enablement of the peripheral, we will configure all available interrupts to be enabled and routed to CPU0 . We have a function that initialises this peripheral in the new gic-400.c file. This file is not rpi-specific because gic-400 interrupt controllers are used by a lot of different SoCs. This function is conditionally called immediately before configuring the ARM Timer peripheral and the global enabling of interrupts. ... #ifdef RPI4 gic400_init ( 0xFF840000UL ); #endif RPI_EnableARMTimerInterrupt (); ... We should obviously make this code better, but for now we just know that we need to initialise this controller to get any interrupts working. When you're ready head over to Pt5...","title":"BMC Part 4 - Interrupts"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#bmc-part-4-interrupts","text":"In this tutorial, we're going to look at using interrupts to generate the LED flash. Interrupts are an essential ingredient in embedded programming. We're going to investigate the BCM2835/6 interrupt process and implement an interrupt for the ARM Timer peripheral to blink the LED. I appreciate that blinking an LED is probably starting to get boring, but small steps are the way to learn a big system, and learning how to handle interrupts will be enough of a learning curve without having to change what we're doing at the same time. In the next tutorial we'll move away from blinking an LED.","title":"BMC Part 4 - Interrupts"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#reference-material","text":"We need some reading material for this tutorial - this is how I put the tutorial together, by reading and studying the manuals available for the processor. Yes there's a lot of text and more than one manual - but that's the only way you learn! The material that's useful: ARM1176JZF-S Technical Reference Manual BCM2385 ARM Peripherals ARMv6 Architecture Reference Manual This requires agreeing to an NDA to get hold of the PDF version of the document, but it's at least free and easy to get! This document also describes the ARMv7 architecture which the Cortex A7 uses in the BCM2836 (Raspberry-pi 2) All of those documents, and an ARM instruction set reference are useful for this tutorial.","title":"Reference Material"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#the-code","text":"The code for the tutorial is hosted on GitHub . The best thing to do to get the code is to clone the repo if you haven't already. Otherwise you can grab the zip of the latest code instead - but you won't be able to get fixes when they're released! ;) Some of the code that's specific to the tutorial and differs from the last tutorial will be discussed here. This tutorial only uses the part-4/armc-013 folder.","title":"The Code"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#interrupts","text":"Let's get straight what an interrupt is. In terms of the ARM processor we're using an interrupt is simply a type of exception. An exception in the processor causes the PC (Program Counter) to be set to a pre-defined value. This pre-defined value will cause code execution to be interrupted and for code execution to run an exception handler put the pre-defined position. At the end of this exception handler control is generally returned to the previously executing code. Exception handlers should be quick and concise as they can occur frequently and obviously take time away from the main code. Interrupt signals are generally created by hardware. The exception we all know, possibly without realising it is the reset signal. If we strobe the reset line the PC is set to 0 and execution starts from this address. Reset is a bit special though, there's no way to return from the reset exception! All other exceptions can be returned from because the previous PC value has been saved. Although I've stated above that when resetting a processor, execution starts at address 0, this is not always correct. For example in many processors that support bootloaders the reset value can be different so that the application code starts at address 0 and the bootloader code starts somewhere else. Upon strobing the reset line execution will start at the reset vector, which can be different to 0. The important thing here is simply the term vector . A vector is a value that will be loaded into the processors PC when a given condition occurs. Each exception type has a vector, and these vectors reside next to each other in memory in what's termed the vector table. See, it's all pretty easy really! The base address of the vector table is 0. Vector tables come in a few varieties, either each vector is simply a value to be loaded into the PC to start execution at a linker-determined position, or else the vector is code that will be executed straight away without any need to do another PC load. For the ARMv6 architecture the vector table is at memory address 0 and is organised like below, from section A2.6 of the ARM Architecture Reference Manual covering ARMv5 and ARMv6. Please note, that on the ARM documentation website all you'll see is a reference to ARMv6-M or ARMv5. ARMv6-M is for the Cortex-M range of processors which are designed to be more heavily embedded than the application processors (The Cortex-A range), so make sure you get the ARMv5 document which also covers the ARMv6 architecture (which is what the ARM1176JZF-S is). For the Raspberry-pi 2 which uses the Cortex A7 processor the same table can be found in the ARMv7 reference manual in section B1.8.1 (Table B1-3). It is essentially the same. Exception Type Mode VE Normal Address High Vector Address Reset Supervisor 0x00 0xFFFF0000 Undefined Instruction Undefined 0x04 0xFFFF0004 Software Interrupt (SWI) Supervisor 0x08 0xFFFF0008 Prefetch Abort Abort 0x0C 0xFFFF000C Data Abort Abort 0x10 0xFFFF0010 IRQ (Interrupt) IRQ 0 0x18 0xFFFF0018 IRQ (Interrupt) IRQ 1 Implementation Defined FIQ (Fast Interrupt) FIQ 0 0x1C 0xFFFF001C FIQ (Fast Interrupt) FIQ 1 Implementation Defined As you can see, as we've been discussing, the reset vector is at address 0. The next vector is for us to deal with an undefined instruction exception, an unlikely scenario, but something we can at least trap and debug at some point. Following that we have the Software Interrupt, Pre-fetch abort, Data Abort, IRQ (Interrupt) and FIQ (Fast Interrupt) exception vectors. The vectors are sequential except between Data Abort and IRQ where there is an 4-byte gap. The note above the table in the document reads: NOTE : The normal vector at address 0x00000014 and the high vector at address 0xFFFF0014 are reserved for future expansion. Vectors are only 4-bytes (one 32-bit instruction) apart. We know therefore the reset vector is simply going to be a branch instruction to the start of our actual code so that the undefined instruction exception can be implemented too. In fact, each of these vectors is simply a branch instruction to a handler somewhere else in memory. The Normal Address is what we're interested in on the Raspberry-Pi. The High Vector Address is selected in hardware, and that hardware doesn't exist, so the vectors reside at the normal addresses. It's useful, as I've said before to have another place to start executing code if we need a different application installed such as another bootloader or something. We can ignore the High Vector Addresses. Then we have the Mode column - this is going to be very important. If we look at the vector table, the mode listed for the reset vector is Supervisor.","title":"Interrupts"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#processor-modes","text":"Further back in section A2.2 of the ARM Architecture Reference Manual the documentation covers processors modes. When the processor is reset it is running in Supervisor mode, which is known as a privileged mode. From this operating mode we can write to most of the processors registers and can also change the processors current mode. The only mode that cannot change modes is User - this is designed to execute applications, whereas the privileged modes are meant for operating system tasks. There is basically a mode per exception. As was mentioned previously we start at the reset vector in Supervisor mode, so far all of our code has operating in that single mode. However, when an exception occurs the processor changes mode to the exception-specific mode. The mode can also be changed in software too if necessary. The next section of the Architecture Reference Manual describes the registers available. This is again, another important section. Look at Figure A2-1 (Register Organization) and you'll see something interesting... As seen by the small icon and note at the bottom of the table, some of the registers are mode-specific. This can be useful, for example in the Fast Interrupt exception a lot of registers have been replaced by mode-specific registers. This means that we can use these registers without fear of altering the behaviour of code that was operating in User or Supervisor mode before the Fast Interrupt Exception occurred. Normally, the first thing we would need to do in an interrupt handler would be to save the registers we're going to use and the last thing we'd do in an interrupt handler would be to restore those registers values to what they were before the interrupt handler executed. The code like this at the start of a function or interrupt handler is called the prologue and the code at the end of the function or handler is known as the epilogue. The shadow register implementation means that many times there's no need to save and restore registers in a Fast Interrupt service routine.","title":"Processor Modes"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#coding-interrupt-handlers","text":"Providing interrupt handlers can be a bit tricky. It's generally entirely non-portable and you'll have to read the manual for your toolchain in order to understand how to write them. This generally involves informing the compiler that a function you declare should be used to handle a type of interrupt. The toolchain can them fill the vector table with the necessary information. The vector table is usually present in the linker script which defines the memory layout of the target device. because normally these vectors are read-only. For gcc and ld we can look at the gcc manual on function attributes relating to ARM. https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html It reads: Use this attribute on the ARC, ARM, AVR, CR16, ... ports to indicate that the specified function is an interrupt handler. The compiler generates function entry and exit sequences suitable for use in an interrupt handler when this attribute is present. NOTE, for the ARM, you can specify the kind of interrupt to be handled by adding an optional parameter to the interrupt attribute like this: void f () __attribute__ ((interrupt (\"IRQ\"))); Permissible values for this parameter are: IRQ, FIQ, SWI, ABORT and UNDEF. The parameter options align well with the vector table we got from the manual. Reset is an ABORT type, and everything else has a parameter available. Therefore to write a very basic \"undefined instruction\" handler we can define declare and implement our handler like this: /** @brief The undefined instruction interrupt handler If an undefined instruction is encountered, the CPU will start executing this function. Just trap here as a debug solution. */ void __attribute__ (( interrupt ( \"UNDEF\" ))) undefined_instruction_vector ( void ) { while ( 1 ) { /* Do Nothing! */ } } While it looks like this is useless code, it is actually pretty useful. We can set a breakpoint on the while(1) and debug whilst looking out for this breakpoint to trip. Usually then we can do some stack unwinding (manually!) to find where the source of the undefined instruction.","title":"Coding Interrupt Handlers"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#coding-vector-tables","text":"A strange title that, Coding Vector Tables. With many embedded processors there's no coding or runtime setup of vector tables - instead the vector table is defined in the linker script and the toolchain fills in those locations with the address or jump instruction necessary to execute the relevant handler. The Raspberry-Pi vector table is extremely small, and it can be like this because some extra work is required in the Interrupt handler compared to more embedded processors such as the Cortex M range. No matter what the Interrupt source is, the same function is called. Inside the Interrupt handler we must work out what the source of the interrupt was before handling that interrupt. Essentially you end up with a large switch structure inside the interrupt handler. You can of course call other functions from the interrupt handler, but again think about the cost of the prologue and epilogue before you do! When the raspberry-pi starts running our code, as we've discovered earlier in the turotials it loads the code from the SD card to RAM at address 0x00008000 and then starts executing the code. So how can we possibly code the vector table and get the correct jump instructions into the vector table? Well, everything is in RAM and that's the key - this is read/write memory and in supervisor mode we can write to any location we want. So at runtime when our code is being executed we can overwrite the vector table at runtime. All we need is a vector table to write. Let's have a look at what needs to be done to implement the vector table. It's easiest if we drop down to assembler to do this. It really could do with being done as the very first thing in our code anyway so it's setup right from the start. Here is some modified assembler for our _statup: label which is where our linker knows we want to start execution. The linker makes sure this is at the start of our binary: At fist, I thought this was going to be easy - we just hard-code some values into a table and copy that table to the start of RAM where the vector table resides. Here's some initial code: _start: ldr pc, =_reset_ ldr pc, =undefined_instruction_vector ldr pc, =software_interrupt_vector ldr pc, =prefetch_abort_vector ldr pc, =_reset_ ldr pc, =_reset_ ldr pc, =interrupt_vector ldr pc, =fast_interrupt_vector _reset_: // Copy the vector table to the active table at 0x00000000 ldr r0, =_start ldr r1, #0x0000 ldmia r0!,{r2, r3, r4, r5, r6, r7, r8, r9} stmia r1!,{r2, r3, r4, r5, r6, r7, r8, r9} There are only a few assembler instructions here, so don't panic! The labels refer to C functions that have been implemented with the correct attributes for each exception type. See the file rpi-interrupts.c to see these C functions. The Loading of addresses to a register with LDR is documented here reset and undefined_instruction_vector, etc. are the labels used as the function addresses. So we have a table at the very start of our code. A neat side-effect of having this table right at the start of our code is that the first thing we do is run the reset vector code which jumps to the reset label and starts the execution of our code, thus jumping the vector table we don't want it to try and execute. Excellent! The ldmia and stmia instructions can load and store 32 bytes of data at a time, so are quick at shifting data about. Each register can load a 4-byte (32-bit) value, so using eight registers lets us move 32-bytes, and there are 8 32-bit vectors in our table, so one load and one store instruction later we've moved the whole of our vector table to 0x00000000 . See the documentation for this on the ARM website But, before we go too much further, let me show you why this doesn't work!","title":"Coding Vector Tables"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#its-all-relative","text":"Compilation of the vector table is successful, but as always just a successful compilation doesn't get you a working application. Earlier in the tutorials I introduced the online disassembler - a great tool, but there's something else in our toolchain's toolbag already, objdump! [~]$ arm-none-eabi-objdump --help That's your friend, and even more friendly is running this from the build directory of the part-4/armc-013/ tutorial folder once you've built the tutorial: [~]$ arm-none-eabi-objdump -S armc-013 > armc-013.disasm This tells objdump to disassemble the executable and we then redirect objdumps output to the armc-013.diasm file which we can then look at in a text editor. Here's what we get at the start of that file with the vector table implementation I described above: Disassembly of section .text: 00008000 <_start>: 8000: e59ff064 ldr pc, [pc, #100] ; 806c <_enable_interrupts+0x10> 8004: e59ff064 ldr pc, [pc, #100] ; 8070 <_enable_interrupts+0x14> 8008: e59ff064 ldr pc, [pc, #100] ; 8074 <_enable_interrupts+0x18> 800c: e59ff064 ldr pc, [pc, #100] ; 8078 <_enable_interrupts+0x1c> 8010: e59ff054 ldr pc, [pc, #84] ; 806c <_enable_interrupts+0x10> 8014: e59ff050 ldr pc, [pc, #80] ; 806c <_enable_interrupts+0x10> 8018: e59ff05c ldr pc, [pc, #92] ; 807c <_enable_interrupts+0x20> 801c: e59ff05c ldr pc, [pc, #92] ; 8080 <_enable_interrupts+0x24> 00008020 <_reset_>: 8020: e3a00902 mov r0, #32768 ; 0x8000 Hmmm, well that doesn't look right, what we'd expect from the first line is an equivalent of ldr pc, #0x8020 which is the reset label is. The toolchain appears to be loading a value far away from where we'd expect. Further down the file we can find the location 0x806C : 0000805c <_enable_interrupts>: 805c: e10f0000 mrs r0, CPSR 8060: e3c00080 bic r0, r0, #128 ; 0x80 8064: e121f000 msr CPSR_c, r0 8068: e1a0f00e mov pc, lr 806c: 00008020 .word 0x00008020 8070: 000085e8 .word 0x000085e8 8074: 000085f4 .word 0x000085f4 8078: 00008600 .word 0x00008600 807c: 00008628 .word 0x00008628 8080: 0000869c .word 0x0000869c Some light at the end of the tunnel, the compiler has inserted some constants which are being loaded into the PC so actually, loading the PC with the value at PC + 0x6C is correct for the vector because the value at that location is 0x8020 which is the location of the reset label. Again, we think this could work after all. But of course, it doesn't. The first part of our code now moves the code from 0x8000 to 0x0000 and the constants have not moved from 0x806C to 0x006C ; Neither can we move these constants easily either because the compiler inserts these at the next available space, there's no position we can predict. The answer is to keep everything relative, but to create some constants of our own. We can keep these constants relative to the LDR PC instruction so that the relative offset still works. We need to create a table of constant addresses after the vector table loads. This way we can copy both tables and the constants will still be in the same position relative to the LDR instructions. Let's set that up: _start: ldr pc, _reset_h ldr pc, _undefined_instruction_vector_h ldr pc, _software_interrupt_vector_h ldr pc, _prefetch_abort_vector_h ldr pc, _data_abort_vector_h ldr pc, _unused_handler_h ldr pc, _interrupt_vector_h ldr pc, _fast_interrupt_vector_h _reset_h: .word _reset_ _undefined_instruction_vector_h: .word undefined_instruction_vector _software_interrupt_vector_h: .word software_interrupt_vector _prefetch_abort_vector_h: .word prefetch_abort_vector _data_abort_vector_h: .word data_abort_vector _unused_handler_h: .word _reset_ _interrupt_vector_h: .word interrupt_vector _fast_interrupt_vector_h: .word fast_interrupt_vector _reset_: mov r0, #0x8000 mov r1, #0x0000 ldmia r0!,{r2, r3, r4, r5, r6, r7, r8, r9} stmia r1!,{r2, r3, r4, r5, r6, r7, r8, r9} ldmia r0!,{r2, r3, r4, r5, r6, r7, r8, r9} stmia r1!,{r2, r3, r4, r5, r6, r7, r8, r9} Note that we've now had to double the amount of data we copy so that we get the constants copied along with the relative PC loads of those constants. This feels like a bit of a cludge but as objdump will show us, this gets the job done and relocates the vector table as required. The vector table now references the labels directly suffixed to the vector table itself and so the relative position remains constant so long as both are copied as-is. The output of objdump -S shows us the workable solution: Disassembly of section .text: 00008000 <_start>: 8000: e59ff018 ldr pc, [pc, #24] ; 8020 <_reset_h> 8004: e59ff018 ldr pc, [pc, #24] ; 8024 <_undefined_instruction_vector_h> 8008: e59ff018 ldr pc, [pc, #24] ; 8028 <_software_interrupt_vector_h> 800c: e59ff018 ldr pc, [pc, #24] ; 802c <_prefetch_abort_vector_h> 8010: e59ff018 ldr pc, [pc, #24] ; 8030 <_data_abort_vector_h> 8014: e59ff018 ldr pc, [pc, #24] ; 8034 <_unused_handler_h> 8018: e59ff018 ldr pc, [pc, #24] ; 8038 <_interrupt_vector_h> 801c: e59ff018 ldr pc, [pc, #24] ; 803c <_fast_interrupt_vector_h> 00008020 <_reset_h>: 8020: 00008040 .word 0x00008040 00008024 <_undefined_instruction_vector_h>: 8024: 000085f8 .word 0x000085f8 00008028 <_software_interrupt_vector_h>: 8028: 00008604 .word 0x00008604 0000802c <_prefetch_abort_vector_h>: 802c: 00008610 .word 0x00008610 00008030 <_data_abort_vector_h>: 8030: 00008624 .word 0x00008624 00008034 <_unused_handler_h>: 8034: 00008040 .word 0x00008040 00008038 <_interrupt_vector_h>: 8038: 00008638 .word 0x00008638 0000803c <_fast_interrupt_vector_h>: 803c: 000086ac .word 0x000086ac 00008040 <_reset_>: 8040: e3a00902 mov r0, #32768 ; 0x8000 You can go ahead and see that the armc-013 tutorial is in fact using this solution to provide the exception vector table at run time.","title":"It's all relative"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#the-interrupt-controller","text":"So now we have the exception vectors tied to our exception handlers (which are implemented in C) but the processor still doesn't know when to interrupt. Interrupts on a processor are enabled per interrupt source and then globally enabled and disabled. This way we can select which interrupt sources we're interested in and also whether to allow interrupts or not. Sometimes we want to temporarily disable interrupts to guard a non-atomic memory operation if the same memory is used in an interrupt handler for example. The Raspberry-Pi ARM has an interrupt controller where we can set up the enable and disable the interrupt sources we're interested in. From the BCM2835 ARM peripherals datasheet we can see section 7 describe the interrupt controller present. The documentation here is a bit lacking - but see the section that says ARM peripherals interrupts table. These are basically the interrupt sources we have control over. We're blinking an LED and so we just want to capture the ARM Timer interrupt source. In the tutorial code, we will map a C structure to the address of the interrupt controller to give us access to the registers. This is how we define the struct for the interrupt controller registers and implement an instance at the base address, again this information is from section 7.5 of the document above: In rpi-interrupts.h : /** @brief See Section 7.5 of the BCM2835 ARM Peripherals documentation, the base address of the controller is actually xxxxB000, but there is a 0x200 offset to the first addressable register for the interrupt controller, so offset the base to the first register */ #define RPI_INTERRUPT_CONTROLLER_BASE ( PERIPHERAL_BASE + 0xB200 ) /** @brief The interrupt controller memory mapped register set */ typedef struct { volatile uint32_t IRQ_basic_pending ; volatile uint32_t IRQ_pending_1 ; volatile uint32_t IRQ_pending_2 ; volatile uint32_t FIQ_control ; volatile uint32_t Enable_IRQs_1 ; volatile uint32_t Enable_IRQs_2 ; volatile uint32_t Enable_Basic_IRQs ; volatile uint32_t Disable_IRQs_1 ; volatile uint32_t Disable_IRQs_2 ; volatile uint32_t Disable_Basic_IRQs ; } rpi_irq_controller_t ; and in rpi-interrupts.c : /** @brief The BCM2835 Interupt controller peripheral at it's base address */ static rpi_irq_controller_t * rpiIRQController = ( rpi_irq_controller_t * ) RPI_INTERRUPT_CONTROLLER_BASE ; /** @brief Return the IRQ Controller register set */ rpi_irq_controller_t * RPI_GetIrqController ( void ) { return rpiIRQController ; }","title":"The Interrupt Controller"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#the-arm-timer-peripheral","text":"The ARM timer is in the Basic interrupt set. So to tell the processor we want to enable interrupts from the ARM Timer peripheral we set the relevant bit in the Basic Interrupt enable register: Also in rpi-interrupts.h: /** @brief Bits in the Enable_Basic_IRQs register to enable various interrupts. See the BCM2835 ARM Peripherals manual, section 7.5 */ #define RPI_BASIC_ARM_TIMER_IRQ (1 << 0) #define RPI_BASIC_ARM_MAILBOX_IRQ (1 << 1) #define RPI_BASIC_ARM_DOORBELL_0_IRQ (1 << 2) #define RPI_BASIC_ARM_DOORBELL_1_IRQ (1 << 3) #define RPI_BASIC_GPU_0_HALTED_IRQ (1 << 4) #define RPI_BASIC_GPU_1_HALTED_IRQ (1 << 5) #define RPI_BASIC_ACCESS_ERROR_1_IRQ (1 << 6) #define RPI_BASIC_ACCESS_ERROR_0_IRQ (1 << 7) and in our main C code to enable the ARM Timer IRQ: /* Enable the timer interrupt IRQ */ RPI_GetIrqController () -> Enable_Basic_IRQs = RPI_BASIC_ARM_TIMER_IRQ ; The ARM Timer interrupt source is now enabled. However, the processor still needs to have interrupts globally enabled for any interrupt to execute the Interrupt handler, and the ARM Timer peripheral also needs to be enabled and configured to generate the interrupts! The ARM Timer peripheral is documented in the same BCM2835 ARM peripherals datasheet in section 14. Again, we map the peripherals register set to a C struct to give us access to the registers: In rpi-armtimer.h: /** @brief See the documentation for the ARM side timer (Section 14 of the BCM2835 Peripherals PDF) */ #define RPI_ARMTIMER_BASE ( PERIPHERAL_BASE + 0xB400 ) /** @brief 0 : 16-bit counters - 1 : 23-bit counter */ #define RPI_ARMTIMER_CTRL_23BIT ( 1 << 1 ) #define RPI_ARMTIMER_CTRL_PRESCALE_1 ( 0 << 2 ) #define RPI_ARMTIMER_CTRL_PRESCALE_16 ( 1 << 2 ) #define RPI_ARMTIMER_CTRL_PRESCALE_256 ( 2 << 2 ) /** @brief 0 : Timer interrupt disabled - 1 : Timer interrupt enabled */ #define RPI_ARMTIMER_CTRL_INT_ENABLE ( 1 << 5 ) #define RPI_ARMTIMER_CTRL_INT_DISABLE ( 0 << 5 ) /** @brief 0 : Timer disabled - 1 : Timer enabled */ #define RPI_ARMTIMER_CTRL_ENABLE ( 1 << 7 ) #define RPI_ARMTIMER_CTRL_DISABLE ( 0 << 7 ) /** @brief Section 14.2 of the BCM2835 Peripherals documentation details the register layout for the ARM side timer */ typedef struct { /** The timer load register sets the time for the timer to count down. This value is loaded into the timer value register after the load register has been written or if the timer-value register has counted down to 0. */ volatile uint32_t Load ; /** This register holds the current timer value and is counted down when the counter is running. It is counted down each timer clock until the value 0 is reached. Then the value register is re-loaded from the timer load register and the interrupt pending bit is set. The timer count down speed is set by the timer pre-divide register. */ volatile uint32_t Value ; /** The standard SP804 timer control register consist of 8 bits but in the BCM implementation there are more control bits for the extra features. Control bits 0-7 are identical to the SP804 bits, albeit some functionality of the SP804 is not implemented. All new control bits start from bit 8 upwards. */ volatile uint32_t Control ; /** The timer IRQ clear register is write only. When writing this register the interrupt-pending bit is cleared. When reading this register it returns 0x544D5241 which is the ASCII reversed value for \"ARMT\". */ volatile uint32_t IRQClear ; /** The raw IRQ register is a read-only register. It shows the status of the interrupt pending bit. 0 : The interrupt pending bits is clear. 1 : The interrupt pending bit is set. The interrupt pending bits is set each time the value register is counted down to zero. The interrupt pending bit can not by itself generates interrupts. Interrupts can only be generated if the interrupt enable bit is set. */ volatile uint32_t RAWIRQ ; /** The masked IRQ register is a read-only register. It shows the status of the interrupt signal. It is simply a logical AND of the interrupt pending bit and the interrupt enable bit. 0 : Interrupt line not asserted. 1 :Interrupt line is asserted, (the interrupt pending and the interrupt enable bit are set.) */ volatile uint32_t MaskedIRQ ; /** This register is a copy of the timer load register. The difference is that a write to this register does not trigger an immediate reload of the timer value register. Instead the timer load register value is only accessed if the value register has finished counting down to zero. */ volatile uint32_t Reload ; /** The Pre-divider register is not present in the SP804. The pre-divider register is 10 bits wide and can be written or read from. This register has been added as the SP804 expects a 1MHz clock which we do not have. Instead the pre-divider takes the APB clock and divides it down according to: timer_clock = apb_clock/(pre_divider+1) The reset value of this register is 0x7D so gives a divide by 126. */ volatile uint32_t PreDivider ; /** The free running counter is not present in the SP804. The free running counter is a 32 bits wide read only register. The register is enabled by setting bit 9 of the Timer control register. The free running counter is incremented immediately after it is enabled. The timer can not be reset but when enabled, will always increment and roll-over. The free running counter is also running from the APB clock and has its own clock pre-divider controlled by bits 16-23 of the timer control register. This register will be halted too if bit 8 of the control register is set and the ARM is in Debug Halt mode. */ volatile uint32_t FreeRunningCounter ; } rpi_arm_timer_t ; and the same in rpi-armtimer.c : static rpi_arm_timer_t * rpiArmTimer = ( rpi_arm_timer_t * ) RPI_ARMTIMER_BASE ; rpi_arm_timer_t * RPI_GetArmTimer ( void ) { return rpiArmTimer ; } Then, we can setup the ARM Timer peripheral from the main C code with something like: /* Setup the system timer interrupt */ /* Timer frequency = Clk/256 * 0x400 */ RPI_GetArmTimer () -> Load = 0x400 ; /* Setup the ARM Timer */ RPI_GetArmTimer () -> Control = RPI_ARMTIMER_CTRL_23BIT | RPI_ARMTIMER_CTRL_ENABLE | RPI_ARMTIMER_CTRL_INT_ENABLE | RPI_ARMTIMER_CTRL_PRESCALE_256 ; As documented the load register is the value loaded into the timer each time the timer elapses. This value is loaded into the Value register either when the register is written, or else when the Value register has counted down to 0. The timer decrements the Value register at a frequency dervied from the system clock. When the Value register reaches 0 the Value register is re-loaded with the Load value and the interrupt pending bit is set. It's at this point our interrupt handler should get called. The bits in the Control register that we're setting should be reasonably self-explanatory. Although the documentation says CTRL_23BIT I suspect (as do others) that this is a typo and it's meant to read CTRL_32BIT ! All that's left after configuring the ARM Timer and the Interrupt controller is to globally enable interrupts. This is a function that I wrote in assembler again because the instructions to enable the registers are not available through any C instructions: In armc-013-start.S: _enable_interrupts: mrs r0, cpsr bic r0, r0, #0x80 msr cpsr_c, r0 cpsie i mov pc, lr This code is pretty straight forward. Section A1.1.3 of the ARM ARM describes the Status registers in the processor and describes the Current Program Status Register (CPSR). Some information is covered in this section and of important note is \"The CPSR is accessed with special instructions\". Section A2.5 of the ARM ARM describes the format of the CPSR register in more detail and details the exact layout of the CPSR register. Section A2.5.6 describes the interrupt disable bits, and that gets us the last bit of information we need. Section A4.1.38 MRS describes the Move Program Status Register to general purpose register instruction which is the special instruction referred to in Section A1.1.3 of the manual. So, we copy the contents of the Current Program Status Register into R0. Then we clear bit 7 ( Remember (1 << 7) == 0x80 ) in the R0 to enable interrupts. Section A2.5.6 and A2.5 gave us the details for that instruction. Then we copy r0 back to the Current Program Status Register which is the point at which interrupts become enabled. Finally we load the Program Counter with the Link Register contents to return from enabling interrupts. The last thing to do is to write something in the interrupt handler to deal with toggling the LED and to clear the interrupt pending bit. Clearing the interrupt pending bit for the ARM Timer is essential otherwise the processor will not know we have dealt with that interrupt and as soon as it exits from the interrupt handler it will immediately enter it again because the interrupt pending bit of an enabled interrupt source is still set. The interrupt handler is in rpi-interrupts.c: void __attribute__ (( interrupt ( \"IRQ\" ))) interrupt_vector ( void ) { static int lit = 0 ; if ( RPI_GetArmTimer () -> MaskedIRQ ) { /* Clear the ARM Timer interrupt - it's the only interrupt we have enabled, so we want don't have to work out which interrupt source caused us to interrupt */ RPI_GetArmTimer () -> IRQClear = 1 ; /* Flip the LED */ if ( lit ) { RPI_SetGpioHi ( LED_GPIO ); lit = 0 ; } else { RPI_SetGpioLo ( LED_GPIO ); lit = 1 ; } } } Simples! Our main code now has no code in the main while(1) {} loop because everything is being done in the interrupt handler. In part-4/armc-013/armc-013.c : void kernel_main ( unsigned int r0 , unsigned int r1 , unsigned int atags ) { /* Write 1 to the LED init nibble in the Function Select GPIO peripheral register to enable LED pin as an output */ RPI_SetGpioPinFunction ( LED_GPIO , FS_OUTPUT ); RPI_SetGpioHi ( LED_GPIO ); #ifdef RPI4 gic400_init ( 0xFF840000UL ); #endif RPI_EnableARMTimerInterrupt (); /* Setup the system timer interrupt Timer frequency = Clk/256 * 0x400 NOTE: If the system decides to alter the clock, the frequency of these interrupts will also change. The system timer remains consistent. */ #if defined ( RPI4 ) RPI_GetArmTimer () -> Load = 0x4000 ; #else RPI_GetArmTimer () -> Load = 0x400 ; #endif /* Setup the ARM Timer */ RPI_GetArmTimer () -> Control = RPI_ARMTIMER_CTRL_23BIT | RPI_ARMTIMER_CTRL_ENABLE | RPI_ARMTIMER_CTRL_INT_ENABLE | RPI_ARMTIMER_CTRL_PRESCALE_256 ; /* Enable interrupts! */ _enable_interrupts (); /* Never exit as there is no OS to exit to! */ while ( 1 ) { } } We now have interrupts up and working and in the exceptions you can do different things with the LED to use them to debug any nasty situations. We'll get onto JTAG debug in a future tutorial, but the next tutorial has to be the mailbox and GPU to get something more interesting happening, and what's more interesting than graphics!?","title":"The ARM Timer Peripheral"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#rpi-4-interrupts","text":"The Raspberry pi 4 was another shift in architecture. It features a common General Interrupt Controller (GIC) which is a v2 GIC-400 peripheral. This was added to considerably improve the performance of virtualisation. Running Containers on a RPI4 is much more efficient compared to earlier models. Thankfully, the RPI foundation have said this will be the last revision of the same RPI format. It's a nightmare trying to support all of these model differences in a basic tutorial! The same interrupt controller as the rest of the Broadcom BCM SoCs is still in place and is configured in the same way, except the interrupt line from that controller is fed into the GIC. At reset this means the interrupt signal will not be routed to the CPU running code in order to be able to respond to the interrupt. We will have to add RPI4-specific code which allows us to configure the GIC peripheral to pass the interrupt signal on to one of the CPU cores. As we're not doing any multi-core work at the moment we can configure the GIC to route all interrupt signals to CPU0 which has our interrupt service routines. To find where the peripheral is located in memory - we turn to the linux source code: Knowing that the RPI4 uses the BCM2711 (linked in the kernel source code as BCM2838 ) processor, in keeping with the RPI series helps: An excerpt from the device tree for the BCM2838 shows the GIC, along with the other interrupt controller: soc { ranges = <0x7e000000 0x0 0xfe000000 0x01800000>, <0x7c000000 0x0 0xfc000000 0x02000000>, <0x40000000 0x0 0xff800000 0x00800000>; /* Emulate a contiguous 30-bit address range for DMA */ dma-ranges = <0xc0000000 0x0 0x00000000 0x3c000000>; /delete-node/ interrupt-controller@7e00f300; /delete-node/ v3d@7ec00000; local_intc: local_intc@40000000 { compatible = \"brcm,bcm2836-l1-intc\"; reg = <0x40000000 0x100>; }; gicv2: gic400@40041000 { interrupt-controller; #interrupt-cells = <3>; compatible = \"arm,gic-400\"; reg = <0x40041000 0x1000>, <0x40042000 0x2000>, <0x40044000 0x2000>, <0x40046000 0x2000>; interrupts = <GIC_PPI 9 (GIC_CPU_MASK_SIMPLE(4) | IRQ_TYPE_LEVEL_HIGH)>; }; The physical address is 0x40041000 - but we can see from the device tree configuration just above that the physical address 0x40000000 is mapped to 0xFF800000 so the GIC400 is available to us at 0xFF841000 - it has four sets of registers define by the reg tag. In order for CPU0 to receive any interrupt signals, we're going to have to go ahead and configure this peripheral. In keeping with this tutorial series, let's not get bogged down with trying to over-complicate a driver. All we want to do is configure this peripheral from it's reset state to send all interrupts to CPU0 .","title":"RPI 4 Interrupts"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#documetation","text":"There is GIC-400 documentation available from ARM. There is also the ARM GIC Architecture documentation to consider too. There's a lot of information around secure and non-secure access to the GIC. For now, we don't need to delve too deep. Our task is simple - get interrupts routed to CPU0 .","title":"Documetation"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-4/#register-map","text":"The GIC-400 register map is available under the Programmer's Model section of the CoreLink-400 Generic Interrupt Controller documentation . The Register Map is divided up into function blocks. The functional blocks are defined in section 3.2 as: GICD_ Distributor GICC_ CPU Interfaces GICH_ Virtual Interface control blocks GICV_ Virtual CPU Interfaces We're not interested in the Virtual blocks, but we are of course interested in the other blocks. The functional block offsets are shown in the table and align with the device tree reg tags above. Offset Block 0x0000 - 0x0FFF Reserved 0x1000 - 0x1FFF Distributor ( GICD_ ) 0x2000 - 0x2FFF CPU Interfaces ( GICC_ ) 0x4000 - 0x4FFF Virtual interface control for the process that is performing the access 0x5000 - 0x5FFF Virtual interface control for the processor selected by address bits 11:9 Later on in the same section is breakdown of all registers in those blocks. It's this information that can be put into code. Then, in order to do a simple enablement of the peripheral, we will configure all available interrupts to be enabled and routed to CPU0 . We have a function that initialises this peripheral in the new gic-400.c file. This file is not rpi-specific because gic-400 interrupt controllers are used by a lot of different SoCs. This function is conditionally called immediately before configuring the ARM Timer peripheral and the global enabling of interrupts. ... #ifdef RPI4 gic400_init ( 0xFF840000UL ); #endif RPI_EnableARMTimerInterrupt (); ... We should obviously make this code better, but for now we just know that we need to initialise this controller to get any interrupts working. When you're ready head over to Pt5...","title":"Register Map"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/","text":"Part 5 - Graphics (Basic) \u00b6 Finally, we get on to a tutorial that moves us away from blinking an LED as we explore the VideoCore IV GPU NOTE: This tutorial has not yet been migrated to RPI4 ! (See Github Issue 29 ) Reference Material \u00b6 We need some reading material for this tutorial - this is how I put the tutorial together, by reading and studying the manuals available for the Videcore, but for this tutorial mainly the information from the Cambridge Raspberry Pi Tutorials. Yes there's a lot of text and more than one manual - but that's the only way you learn! Some material that's useful (Generally for late night reading!): Raspberry Pi Firmware Mailboxes information This information is less important for now, but worth noting: VideoCoreIv-AG100 3D Architecture Reference Android Graphics Driver Source Code for VideoCoreIV The GPU (Videocore IV) \u00b6 The GPU and ARM devices can communicate with each other through a mailbox system. However, don't forget that the ARM and GPU also share the memory space, and so although we have to communicate through the mailbox, this is what negotiates settings and a framebuffer. The framebuffer address in memory is then returned from the GPU and we can go ahead and write to the framebuffer to see graphics. A framebuffer is a term that really refers to a block of video memory. This video memory is used to display pixels on the screen. So we have access to each pixel on the screen and can change it's colour properties. The framebuffer should be at least as big as the screen resolution. The size of the framebuffer memory block is given by: framebuffer_bytes = pixels_x * pixels_y * bytes_per_pixel NOTE In this tutorial we'll be using a framebuffer and so won't have any higher-level functions like OpenGL or accelerated graphics. We're going to create a simple software renderer. The number of bytes per pixel sets the number of colours available. The Raspberry-Pi GPU supports 8-bit, but in this mode the 8-bit value corresponds to a palette entry, and the palette appears to be very limited A palette mode can be really useful as it's fast (minimal amount of memory required for the graphics) and can be really useful for some special effects by simply altering the palette. 16-bit requires two bytes of data per pixel and directly represents the Red, Green and Blue levels of the colour of the pixel, and 32-bit has 4 bytes of data per pixel which has 8-bit per primary colour and an 8-biot alpha channel (transparency). The GPU is generally quite a closely guarded secret. It's a specialised processor, but also a powerful processor and most people would like to run code on it, just like we're running code on the GPU itself, but alas the GPU information is still under NDA (Non-Disclosure Agreement) terms. Broadcom however, did release some information and some of the most interesting information is in the BCM21553 Graphics Driver . I'll reference what material I've got from there as we go. Unfortunately there is no definitive source of information for the Raspberry Pi GPU, only bits and pieces scattered around the web. The GPU is a Videocore IV. As we're going to use the mailbox communication with the GPU anyway, we can skip a lot of the GPU detail and just concentrate on communicating with the GPU to get a framebuffer to use. The mailbox interface is our main entry point into the world of graphics. The interface was developed and created by a few guys at broadcom. The mailbox interface is software running on the GPU which receives messages from software running on the arm and returns responses to each message after performing a task. It's implemented in the start.elf file that we require on the SD Card to boot the Raspberry-Pi. You can see their discussion about implementing the mailbox on Github The mailboxes are defined on Github . The interface we're interested in is the Property Interface Mailbox This mailbox is responsible for negotiating the framebuffer. We need some code to be able to read and write data from the mailbox and we also need to define the data structure defined by the framebuffer mailbox documentation. part-5/armc-014 \u00b6 The ARM014 tutorial introduces a few new peices of the puzzle. Firstly, as an aid to debugging now the code is getting more complex it introduces the mini UART which means we can have a basic \"console\". As we've bothered with the standard c library we can see how to tie the standard library functions like printf() to the UART. Secondly, it introduces the mailbox property interface which is a method of the ARM processor talking to the GPU. If we're going to get to the point of generating graphics, we must talk to the GPU! This code does generate an \"animated\" display, but as we'll see - it is extremely slow to use un-optimised software rendering on an RPI! If you want, go ahead and compile it now and plug the raspberry pi into a monitor or television with a HDMI interface. It should work! As we're now including new hardware into the mix it's possible that your monitor or TV doesn't support the resolution and colour depth that the example is hard coded to use. It's an example that's designed to be simple rather than supporting every HDMI panel out there. Hopefully you'll have luck with it. I'm using an old Hanns-G HUD19 monitor with DVI->HDMI adaptor. If it works, you'll see an ever-changing display which moves through the colour spectrum, continuously writing to every pixel in the framebuffer! You can see the (rather boring) output on YouTube . This tutorial shows how a 700MHz (or 900MHz) processor doesn't give you carte-blanche to program in C and end up with an optimised output. In this example there is no vertical sync used, we simply dedicate 100% of the ARM processor time to drawing the rectangle in video memory and then moving it one pixel before drawing it to the video memory again. In this way we can see the raw speed of the processor at work. It's pretty slow isn't it! We'll optimise in the ARM015 code later on in this tutorial. Getting a UART Text Console \u00b6 Read that title carefully, not getting a graphics Text Console but instead getting some text out of the code to help us debug. As the code becomes more complex we need better ways of debugging. A later tutorial will talk about using JTAG but for now we can have the basic UART based text debugging that gets us out of most holes! This requires some hardware. Namely a TTL-232R-3V3 or equivalent is required. The mini uart described in the AUX peripheral below is available on the RPI IO expansion headers on pins 8 (GPIO14/TXD) and 10 (GPIO15/RXD) Connecting the UART to a PC is pretty easy, a quick connection guide is available: Also, a quick photo of one connected up: AUX peripheral \u00b6 The AUX peripheral includes a couple of communication interfaces which we can put to use. In this tutorial we will enable the mini UART which has Rx/Tx signals available on the IO header of the raspberry-pi. We will connect that to an FTDI 3.3V USB->UART converter and then we can connect PuTTY to the COM port and see output from the code! We will do some more work on the c stubs to provide uart support in the write system call which is what the likes of printf() , etc. functions use to write to the system. #include \"rpi-aux.h\" #include \"rpi-base.h\" #include \"rpi-gpio.h\" static aux_t * auxillary = ( aux_t * ) AUX_BASE ; aux_t * RPI_GetAux ( void ) { return auxillary ; } /* Define the system clock frequency in MHz for the baud rate calculation. This is clearly defined on the BCM2835 datasheet errata page: http://elinux.org/BCM2835_datasheet_errata */ #define SYS_FREQ 250000000 void RPI_AuxMiniUartInit ( int baud , int bits ) { volatile int i ; /* As this is a mini uart the configuration is complete! Now just enable the uart. Note from the documentation in section 2.1.1 of the ARM peripherals manual: If the enable bits are clear you will have no access to a peripheral. You can not even read or write the registers */ auxillary -> ENABLES = AUX_ENA_MINIUART ; /* Disable interrupts for now */ /* auxillary->IRQ &= ~AUX_IRQ_MU; */ auxillary -> MU_IER = 0 ; /* Disable flow control,enable transmitter and receiver! */ auxillary -> MU_CNTL = 0 ; /* Decide between seven or eight-bit mode */ if ( bits == 8 ) auxillary -> MU_LCR = AUX_MULCR_8BIT_MODE ; else auxillary -> MU_LCR = 0 ; auxillary -> MU_MCR = 0 ; /* Disable all interrupts from MU and clear the fifos */ auxillary -> MU_IER = 0 ; auxillary -> MU_IIR = 0xC6 ; /* Transposed calculation from Section 2.2.1 of the ARM peripherals manual */ auxillary -> MU_BAUD = ( SYS_FREQ / ( 8 * baud ) ) - 1 ; /* Setup GPIO 14 and 15 as alternative function 5 which is UART 1 TXD/RXD. These need to be set before enabling the UART */ RPI_SetGpioPinFunction ( RPI_GPIO14 , FS_ALT5 ); RPI_SetGpioPinFunction ( RPI_GPIO15 , FS_ALT5 ); RPI_GetGpio () -> GPPUD = 0 ; for ( i = 0 ; i < 150 ; i ++ ) { } RPI_GetGpio () -> GPPUDCLK0 = ( 1 << 14 ); for ( i = 0 ; i < 150 ; i ++ ) { } RPI_GetGpio () -> GPPUDCLK0 = 0 ; /* Disable flow control,enable transmitter and receiver! */ auxillary -> MU_CNTL = AUX_MUCNTL_TX_ENABLE ; } void RPI_AuxMiniUartWrite ( char c ) { /* Wait until the UART has an empty space in the FIFO */ while ( ( auxillary -> MU_LSR & AUX_MULSR_TX_EMPTY ) == 0 ) { } /* Write the character to the FIFO for transmission */ auxillary -> MU_IO = c ; } #ifndef RPI_AUX_H #define RPI_AUX_H #include \"rpi-base.h\" #define AUX_BASE ( PERIPHERAL_BASE + 0x215000 ) #define AUX_ENA_MINIUART ( 1 << 0 ) #define AUX_ENA_SPI1 ( 1 << 1 ) #define AUX_ENA_SPI2 ( 1 << 2 ) #define AUX_IRQ_SPI2 ( 1 << 2 ) #define AUX_IRQ_SPI1 ( 1 << 1 ) #define AUX_IRQ_MU ( 1 << 0 ) #define AUX_MULCR_8BIT_MODE ( 3 << 0 ) /* See errata for this value */ #define AUX_MULCR_BREAK ( 1 << 6 ) #define AUX_MULCR_DLAB_ACCESS ( 1 << 7 ) #define AUX_MUMCR_RTS ( 1 << 1 ) #define AUX_MULSR_DATA_READY ( 1 << 0 ) #define AUX_MULSR_RX_OVERRUN ( 1 << 1 ) #define AUX_MULSR_TX_EMPTY ( 1 << 5 ) #define AUX_MULSR_TX_IDLE ( 1 << 6 ) #define AUX_MUMSR_CTS ( 1 << 5 ) #define AUX_MUCNTL_RX_ENABLE ( 1 << 0 ) #define AUX_MUCNTL_TX_ENABLE ( 1 << 1 ) #define AUX_MUCNTL_RTS_FLOW ( 1 << 2 ) #define AUX_MUCNTL_CTS_FLOW ( 1 << 3 ) #define AUX_MUCNTL_RTS_FIFO ( 3 << 4 ) #define AUX_MUCNTL_RTS_ASSERT ( 1 << 6 ) #define AUX_MUCNTL_CTS_ASSERT ( 1 << 7 ) #define AUX_MUSTAT_SYMBOL_AV ( 1 << 0 ) #define AUX_MUSTAT_SPACE_AV ( 1 << 1 ) #define AUX_MUSTAT_RX_IDLE ( 1 << 2 ) #define AUX_MUSTAT_TX_IDLE ( 1 << 3 ) #define AUX_MUSTAT_RX_OVERRUN ( 1 << 4 ) #define AUX_MUSTAT_TX_FIFO_FULL ( 1 << 5 ) #define AUX_MUSTAT_RTS ( 1 << 6 ) #define AUX_MUSTAT_CTS ( 1 << 7 ) #define AUX_MUSTAT_TX_EMPTY ( 1 << 8 ) #define AUX_MUSTAT_TX_DONE ( 1 << 9 ) #define AUX_MUSTAT_RX_FIFO_LEVEL ( 7 << 16 ) #define AUX_MUSTAT_TX_FIFO_LEVEL ( 7 << 24 ) #define FSEL0(x) ( x ) ... #define FSEL53(x) ( x << 9 ) typedef struct { volatile unsigned int IRQ ; volatile unsigned int ENABLES ; volatile unsigned int reserved1 [(( 0x40 - 0x04 ) / 4 ) - 1 ]; volatile unsigned int MU_IO ; volatile unsigned int MU_IER ; volatile unsigned int MU_IIR ; volatile unsigned int MU_LCR ; volatile unsigned int MU_MCR ; volatile unsigned int MU_LSR ; volatile unsigned int MU_MSR ; volatile unsigned int MU_SCRATCH ; volatile unsigned int MU_CNTL ; volatile unsigned int MU_STAT ; volatile unsigned int MU_BAUD ; volatile unsigned int reserved2 [( 0x80 - 0x68 ) / 4 ]; volatile unsigned int SPI0_CNTL0 ; volatile unsigned int SPI0_CNTL1 ; volatile unsigned int SPI0_STAT ; volatile unsigned int SPI0_IO ; volatile unsigned int SPI0_PEEK ; volatile unsigned int reserved3 [( 0xC0 - 0x94 ) / 4 ]; volatile unsigned int SPI1_CNTL0 ; volatile unsigned int SPI1_CNTL1 ; volatile unsigned int SPI1_STAT ; volatile unsigned int SPI1_IO ; volatile unsigned int SPI1_PEEK ; } aux_t ; extern aux_t * RPI_GetAux ( void ); extern void RPI_AuxMiniUartInit ( int baud , int bits ); extern void RPI_AuxMiniUartWrite ( char c ); #endif I'm not going to go too far into explaining these drivers now. It's written in C, and you've got the BCM2835 data sheet the same as I have. You should be getting familiar with the layout of these \"driver\" files and the documentation in the BCM2835 peripherals document. We provide an initialisation function so we can set the number of bits (data bits) and the baud rate. The mini UART implementation isn't that configurable because it's not a full UART implementation. It's designed to provide a quick means of providing a console with as little code as possible. So there's no setting for parity or number of stop bits. It's always N1 (No parity, one stop bit). HACK: The calculation for the baud rate registers is done based on a defined system frequency of 250MHz. It works, but it's not as nice as using a detected system frequency. Perhaps after this tutorial you could get the system frequency and update the calculation to use it! The functions are written in a blocking mode, so the write function blocks until the UART can accept the next character, then it writes the new character and returns. Normally we'd use the UART interrupt to send a whole buffer of data rather than manually polling the register as this ties the processor up waiting. However, these are easy to use! The _write() System Call \u00b6 Whenever data needs to be written to the OS it's done so through a function called _write . This is one of the original c-stubs we wrote in a previous tutorial. We previously just implemented a blank function. Here's the blank function we had. As you can see, it's not quite blank, but outbyte does nothing with the data, it's an empty sink. void outbyte ( char b ) { ( void ) b ; } int _write ( int file , char * ptr , int len ) { int todo ; for ( todo = 0 ; todo < len ; todo ++ ) outbyte ( * ptr ++ ); return len ; } We can tie all writes to the OS (for all files) to the UART console by adding the UART write function call to outbyte: void outbyte ( char b ) { RPI_AuxMiniUartWrite ( b ); } Originally this is what I did, and then when I used printf() to test function I kept getting a crash. In fact after some debugging with the OK LED in the processor exception handlers we introduced in the last tutorial I was able to determine it was an undefined instruction error. When you run this tutorials examples with PuTTY, you'll see output similar to this: Enabling VFP Support \u00b6 After a bit more thinking and tinkering I realised we have to enable the VFP now in order to use printf. As we're compiling and telling the compiler (or more the linker actually) that we're targeting a device with the VFP it is linking to a libc that can use VFP instructions and why shouldn't something in the printf implementation use the VFP instruction when necessary to speed things up? There is some more information about the problem on a stackoverflow answer . Without the VFP co-processor being enabled, VFP instructions will cause an undefined instruction exception. Enabling the VFP is another task that the C Runtime startup file crt0 would have performed for us, but we're on our own since we have to use -nostartfiles (See an earlier tutorial). Some recommended information about enabling VFP support is available from ARM. Some example code for enabling the VFP is available on the TI wiki, and that's the code we slice in to armc-start.S so that the VFP is enabled before the c library is setup: // Enable VFP ------------------------------------------------------------ // r1 = Access Control Register MRC p15 , #0, r1, c1, c0, #2 // enable full access for p10,11 ORR r1 , r1 , #(0xf << 20) // ccess Control Register = r1 MCR p15 , #0, r1, c1, c0, #2 MOV r1 , #0 // flush prefetch buffer because of FMXR below MCR p15 , #0, r1, c7, c5, #4 // and CP 10 & 11 were only just enabled // Enable VFP itself MOV r0 , #0x40000000 // FPEXC = r0 FMXR FPEXC , r0 With those additions, we can now go ahead and use the c-library write functions. It means that the full printf() implementation can be used on the UART for example without us having to lift a finger and try and implement something as fundamental as that ourselves. Also, this provides us with a debug/comms channel that is separate to the display. It's hard to use the display for debugging when the display isn't yet working! Mailboxes \u00b6 We introduce some code in a few files, namely rpi-mailbox and rpi-mailbox-interface . The first is a common interface to access the mailbox system which passes information from the GPU to the ARM processor. The mailbox interface is implemented in the firmware (start.elf) that runs on the GPU. Here's the code, and as noted in the comments, the mailbox interface is described on the RPI firmware github wiki: Access Mailboxes Mailboxes Wiki #ifndef RPI_MAILBOX_H #define RPI_MAILBOX_H #include \"rpi-base.h\" #define RPI_MAILBOX0_BASE ( PERIPHERAL_BASE + 0xB880 ) /* The available mailbox channels in the BCM2835 Mailbox interface. See https://github.com/raspberrypi/firmware/wiki/Mailboxes for information */ typedef enum { MB0_POWER_MANAGEMENT = 0 , MB0_FRAMEBUFFER , MB0_VIRTUAL_UART , MB0_VCHIQ , MB0_LEDS , MB0_BUTTONS , MB0_TOUCHSCREEN , MB0_UNUSED , MB0_TAGS_ARM_TO_VC , MB0_TAGS_VC_TO_ARM , } mailbox0_channel_t ; /* These defines come from the Broadcom Videocode driver source code, see: brcm_usrlib/dag/vmcsx/vcinclude/bcm2708_chip/arm_control.h */ enum mailbox_status_reg_bits { ARM_MS_FULL = 0x80000000 , ARM_MS_EMPTY = 0x40000000 , ARM_MS_LEVEL = 0x400000FF , }; /* Define a structure which defines the register access to a mailbox. Not all mailboxes support the full register set! */ typedef struct { volatile unsigned int Read ; volatile unsigned int reserved1 [(( 0x90 - 0x80 ) / 4 ) - 1 ]; volatile unsigned int Poll ; volatile unsigned int Sender ; volatile unsigned int Status ; volatile unsigned int Configuration ; volatile unsigned int Write ; } mailbox_t ; extern void RPI_Mailbox0Write ( mailbox0_channel_t channel , int value ); extern int RPI_Mailbox0Read ( mailbox0_channel_t channel ); #endif #include <stdint.h> #include \"rpi-gpio.h\" #include \"rpi-mailbox.h\" /* Mailbox 0 mapped to it's base address */ static mailbox_t * rpiMailbox0 = ( mailbox_t * ) RPI_MAILBOX0_BASE ; void RPI_Mailbox0Write ( mailbox0_channel_t channel , int value ) { /* For information about accessing mailboxes, see: https://github.com/raspberrypi/firmware/wiki/Accessing-mailboxes */ /* Add the channel number into the lower 4 bits */ value &= ~ ( 0xF ); value |= channel ; /* Wait until the mailbox becomes available and then write to the mailbox channel */ while ( ( rpiMailbox0 -> Status & ARM_MS_FULL ) != 0 ) { } /* Write the modified value + channel number into the write register */ rpiMailbox0 -> Write = value ; } int RPI_Mailbox0Read ( mailbox0_channel_t channel ) { /* For information about accessing mailboxes, see: https://github.com/raspberrypi/firmware/wiki/Accessing-mailboxes */ int value = - 1 ; /* Keep reading the register until the desired channel gives us a value */ while ( ( value & 0xF ) != channel ) { /* Wait while the mailbox is empty because otherwise there's no value to read! */ while ( rpiMailbox0 -> Status & ARM_MS_EMPTY ) { } /* Extract the value from the Read register of the mailbox. The value is actually in the upper 28 bits */ value = rpiMailbox0 -> Read ; } /* Return just the value (the upper 28-bits) */ return value >> 4 ; } There are two mailboxes, 0 and 1. We only need to use mailbox 0. Mailbox has a number of channels to communicate on which are defined in the enum mailbox0_channel_t . The basics of the mailbox operation are pretty straight forward. To write to a mailbox we first construct a composite value. We can write a 32-bit value to the GPU which is generally a memory address, but the mailbox also has to support multiple channels and there is no separate place to write the channel number. In order to achieve multiple channels on a single mailbox the lower nibble (4-bits) are reserved for the channel number and the upper 28-bits are the value we're sending to the GPU. This means that any address we send to the GPU is missing the lowest 4-bits and the GPU simply assumes those bits are all 0. We therefore need to align any address we send the GPU to a 16-byte boundary which will ensure the lower 4-bits will be 0. The ARM waits for the mailbox to become empty by polling the status register and then it can write the composite value of the address and channel to the mailbox. To read from a mailbox we wait until the mailbox is full and read the value. Only when the value contains the same channel as we are waiting to communicate with do we proceed and return. The value is a 16-byte aligned memory address. It's important to know that we don't just send a value and get a value back. We send an address to a memory block that we have constructed specifically formatted messages in to communicate with the GPU. The messages that are passed to the GPU are channel dependant and so aren't defined in this code module. We will do a code module for each channel we use. Actually, we're only going to use one - MB0_TAGS_ARM_TO_VC which is used with the mailbox property interface. NOTE: Although the Framebuffer channel looks like the place to begin, actually we'll ignore that mailbox channel because it's a deprecated channel. It came before the mailbox property interface channel had framebuffer properties added to it. Mailbox Property Interface \u00b6 The Mailbox Property Interface specifies the messaging structure that needs to be present in the 16-byte aligned memory region I mentioned earlier. There are a lot of properties, and you need to read that page a couple of times to get a hold of how the data needs to be laid out. Here's the code we're using to support the Mailbox Property Interface: #include <stdarg.h> #include <stdio.h> #include <string.h> #include \"rpi-mailbox.h\" #include \"rpi-mailbox-interface.h\" /* Make sure the property tag buffer is aligned to a 16-byte boundary because we only have 28-bits available in the property interface protocol to pass the address of the buffer to the VC. */ static int pt [ 8192 ] __attribute__ (( aligned ( 16 ))); static int pt_index = 0 ; void RPI_PropertyInit ( void ) { /* Fill in the size on-the-fly */ pt [ PT_OSIZE ] = 12 ; /* Process request (All other values are reserved!) */ pt [ PT_OREQUEST_OR_RESPONSE ] = 0 ; /* First available data slot */ pt_index = 2 ; /* NULL tag to terminate tag list */ pt [ pt_index ] = 0 ; } /** @brief Add a property tag to the current tag list. Data can be included. All data is uint32_t @param tag */ void RPI_PropertyAddTag ( rpi_mailbox_tag_t tag , ... ) { va_list vl ; va_start ( vl , tag ); pt [ pt_index ++ ] = tag ; switch ( tag ) { case TAG_GET_FIRMWARE_VERSION : case TAG_GET_BOARD_MODEL : case TAG_GET_BOARD_REVISION : case TAG_GET_BOARD_MAC_ADDRESS : case TAG_GET_BOARD_SERIAL : case TAG_GET_ARM_MEMORY : case TAG_GET_VC_MEMORY : case TAG_GET_DMA_CHANNELS : /* Provide an 8-byte buffer for the response */ pt [ pt_index ++ ] = 8 ; pt [ pt_index ++ ] = 0 ; /* Request */ pt_index += 2 ; break ; case TAG_GET_CLOCKS : case TAG_GET_COMMAND_LINE : /* Provide a 256-byte buffer */ pt [ pt_index ++ ] = 256 ; pt [ pt_index ++ ] = 0 ; /* Request */ pt_index += 256 >> 2 ; break ; case TAG_ALLOCATE_BUFFER : pt [ pt_index ++ ] = 8 ; pt [ pt_index ++ ] = 0 ; /* Request */ pt [ pt_index ++ ] = va_arg ( vl , int ); pt_index += 1 ; break ; case TAG_GET_PHYSICAL_SIZE : case TAG_SET_PHYSICAL_SIZE : case TAG_TEST_PHYSICAL_SIZE : case TAG_GET_VIRTUAL_SIZE : case TAG_SET_VIRTUAL_SIZE : case TAG_TEST_VIRTUAL_SIZE : case TAG_GET_VIRTUAL_OFFSET : case TAG_SET_VIRTUAL_OFFSET : pt [ pt_index ++ ] = 8 ; pt [ pt_index ++ ] = 0 ; /* Request */ if ( ( tag == TAG_SET_PHYSICAL_SIZE ) || ( tag == TAG_SET_VIRTUAL_SIZE ) || ( tag == TAG_SET_VIRTUAL_OFFSET ) || ( tag == TAG_TEST_PHYSICAL_SIZE ) || ( tag == TAG_TEST_VIRTUAL_SIZE ) ) { pt [ pt_index ++ ] = va_arg ( vl , int ); /* Width */ pt [ pt_index ++ ] = va_arg ( vl , int ); /* Height */ } else { pt_index += 2 ; } break ; case TAG_GET_ALPHA_MODE : case TAG_SET_ALPHA_MODE : case TAG_GET_DEPTH : case TAG_SET_DEPTH : case TAG_GET_PIXEL_ORDER : case TAG_SET_PIXEL_ORDER : case TAG_GET_PITCH : pt [ pt_index ++ ] = 4 ; pt [ pt_index ++ ] = 0 ; /* Request */ if ( ( tag == TAG_SET_DEPTH ) || ( tag == TAG_SET_PIXEL_ORDER ) || ( tag == TAG_SET_ALPHA_MODE ) ) { /* Colour Depth, bits-per-pixel \\ Pixel Order State */ pt [ pt_index ++ ] = va_arg ( vl , int ); } else { pt_index += 1 ; } break ; case TAG_GET_OVERSCAN : case TAG_SET_OVERSCAN : pt [ pt_index ++ ] = 16 ; pt [ pt_index ++ ] = 0 ; /* Request */ if ( ( tag == TAG_SET_OVERSCAN ) ) { pt [ pt_index ++ ] = va_arg ( vl , int ); /* Top pixels */ pt [ pt_index ++ ] = va_arg ( vl , int ); /* Bottom pixels */ pt [ pt_index ++ ] = va_arg ( vl , int ); /* Left pixels */ pt [ pt_index ++ ] = va_arg ( vl , int ); /* Right pixels */ } else { pt_index += 4 ; } break ; default : /* Unsupported tags, just remove the tag from the list */ pt_index -- ; break ; } /* Make sure the tags are 0 terminated to end the list and update the buffer size */ pt [ pt_index ] = 0 ; va_end ( vl ); } int RPI_PropertyProcess ( void ) { int result ; #if( PRINT_PROP_DEBUG == 1 ) printf ( \"%s Length: %d \\r\\n \" , __func__ , pt [ PT_OSIZE ] ); #endif /* Fill in the size of the buffer */ pt [ PT_OSIZE ] = ( pt_index + 1 ) << 2 ; pt [ PT_OREQUEST_OR_RESPONSE ] = 0 ; #if( PRINT_PROP_DEBUG == 1 ) for ( i = 0 ; i < ( pt [ PT_OSIZE ] >> 2 ); i ++ ) printf ( \"Request: %3d %8.8X \\r\\n \" , i , pt [ i ] ); #endif RPI_Mailbox0Write ( MB0_TAGS_ARM_TO_VC , ( unsigned int ) pt ); result = RPI_Mailbox0Read ( MB0_TAGS_ARM_TO_VC ); #if( PRINT_PROP_DEBUG == 1 ) for ( i = 0 ; i < ( pt [ PT_OSIZE ] >> 2 ); i ++ ) printf ( \"Response: %3d %8.8X \\r\\n \" , i , pt [ i ] ); #endif return result ; } rpi_mailbox_property_t * RPI_PropertyGet ( rpi_mailbox_tag_t tag ) { static rpi_mailbox_property_t property ; int * tag_buffer = NULL ; property . tag = tag ; /* Get the tag from the buffer. Start at the first tag position */ int index = 2 ; while ( index < ( pt [ PT_OSIZE ] >> 2 ) ) { /* printf( \"Test Tag: [%d] %8.8X\\r\\n\", index, pt[index] ); */ if ( pt [ index ] == tag ) { tag_buffer = & pt [ index ]; break ; } /* Progress to the next tag if we haven't yet discovered the tag */ index += ( pt [ index + 1 ] >> 2 ) + 3 ; } /* Return NULL of the property tag cannot be found in the buffer */ if ( tag_buffer == NULL ) return NULL ; /* Return the required data */ property . byte_length = tag_buffer [ T_ORESPONSE ] & 0xFFFF ; memcpy ( property . data . buffer_8 , & tag_buffer [ T_OVALUE ], property . byte_length ); return & property ; } #ifndef RPI_MAILBOX_INTERFACE_H #define RPI_MAILBOX_INTERFACE_H /** @brief An enum of the RPI->Videocore firmware mailbox property interface properties. Further details are available from https://github.com/raspberrypi/firmware/wiki/Mailbox-property-interface */ typedef enum { /* Videocore */ TAG_GET_FIRMWARE_VERSION = 0x1 , /* Hardware */ TAG_GET_BOARD_MODEL = 0x10001 , TAG_GET_BOARD_REVISION , TAG_GET_BOARD_MAC_ADDRESS , TAG_GET_BOARD_SERIAL , TAG_GET_ARM_MEMORY , TAG_GET_VC_MEMORY , TAG_GET_CLOCKS , /* Config */ TAG_GET_COMMAND_LINE = 0x50001 , /* Shared resource management */ TAG_GET_DMA_CHANNELS = 0x60001 , /* Power */ TAG_GET_POWER_STATE = 0x20001 , TAG_GET_TIMING , TAG_SET_POWER_STATE = 0x28001 , /* Clocks */ TAG_GET_CLOCK_STATE = 0x30001 , TAG_SET_CLOCK_STATE = 0x38001 , TAG_GET_CLOCK_RATE = 0x30002 , TAG_SET_CLOCK_RATE = 0x38002 , TAG_GET_MAX_CLOCK_RATE = 0x30004 , TAG_GET_MIN_CLOCK_RATE = 0x30007 , TAG_GET_TURBO = 0x30009 , TAG_SET_TURBO = 0x38009 , /* Voltage */ TAG_GET_VOLTAGE = 0x30003 , TAG_SET_VOLTAGE = 0x38003 , TAG_GET_MAX_VOLTAGE = 0x30005 , TAG_GET_MIN_VOLTAGE = 0x30008 , TAG_GET_TEMPERATURE = 0x30006 , TAG_GET_MAX_TEMPERATURE = 0x3000A , TAG_ALLOCATE_MEMORY = 0x3000C , TAG_LOCK_MEMORY = 0x3000D , TAG_UNLOCK_MEMORY = 0x3000E , TAG_RELEASE_MEMORY = 0x3000F , TAG_EXECUTE_CODE = 0x30010 , TAG_GET_DISPMANX_MEM_HANDLE = 0x30014 , TAG_GET_EDID_BLOCK = 0x30020 , /* Framebuffer */ TAG_ALLOCATE_BUFFER = 0x40001 , TAG_RELEASE_BUFFER = 0x48001 , TAG_BLANK_SCREEN = 0x40002 , TAG_GET_PHYSICAL_SIZE = 0x40003 , TAG_TEST_PHYSICAL_SIZE = 0x44003 , TAG_SET_PHYSICAL_SIZE = 0x48003 , TAG_GET_VIRTUAL_SIZE = 0x40004 , TAG_TEST_VIRTUAL_SIZE = 0x44004 , TAG_SET_VIRTUAL_SIZE = 0x48004 , TAG_GET_DEPTH = 0x40005 , TAG_TEST_DEPTH = 0x44005 , TAG_SET_DEPTH = 0x48005 , TAG_GET_PIXEL_ORDER = 0x40006 , TAG_TEST_PIXEL_ORDER = 0x44006 , TAG_SET_PIXEL_ORDER = 0x48006 , TAG_GET_ALPHA_MODE = 0x40007 , TAG_TEST_ALPHA_MODE = 0x44007 , TAG_SET_ALPHA_MODE = 0x48007 , TAG_GET_PITCH = 0x40008 , TAG_GET_VIRTUAL_OFFSET = 0x40009 , TAG_TEST_VIRTUAL_OFFSET = 0x44009 , TAG_SET_VIRTUAL_OFFSET = 0x48009 , TAG_GET_OVERSCAN = 0x4000A , TAG_TEST_OVERSCAN = 0x4400A , TAG_SET_OVERSCAN = 0x4800A , TAG_GET_PALETTE = 0x4000B , TAG_TEST_PALETTE = 0x4400B , TAG_SET_PALETTE = 0x4800B , TAG_SET_CURSOR_INFO = 0x8011 , TAG_SET_CURSOR_STATE = 0x8010 } rpi_mailbox_tag_t ; typedef enum { TAG_STATE_REQUEST = 0 , TAG_STATE_RESPONSE = 1 , } rpi_tag_state_t ; typedef enum { PT_OSIZE = 0 , PT_OREQUEST_OR_RESPONSE = 1 , } rpi_tag_buffer_offset_t ; typedef enum { T_OIDENT = 0 , T_OVALUE_SIZE = 1 , T_ORESPONSE = 2 , T_OVALUE = 3 , } rpi_tag_offset_t ; typedef struct { int tag ; int byte_length ; union { int value_32 ; unsigned char buffer_8 [ 256 ]; int buffer_32 [ 64 ]; } data ; } rpi_mailbox_property_t ; extern void RPI_PropertyInit ( void ); extern void RPI_PropertyAddTag ( rpi_mailbox_tag_t tag , ... ); extern int RPI_PropertyProcess ( void ); extern rpi_mailbox_property_t * RPI_PropertyGet ( rpi_mailbox_tag_t tag ); #endif NOTE: As you can see, I've left some debugging printf() calls in so you can alter PRINT_PROP_DEBUG to print them out - this means it'll print out the buffer you message the GPU with and see the resulting buffer when the GPU has finished it's response We start off with a memory buffer which is large enough to hold a concatenated list of property tags and data for the property tags we want to use. We use a gcc extension to align it to a 16-byte boundary: static int pt [ 8192 ] __attribute__ (( aligned ( 16 ))); The rest of the functions form a C API to the Mailbox Property Interface. There are various APIs people come up with to generate the memory structure. The messages are constructed such that the data length is large enough for whichever is larger, the message request data size or the response data size. It's also good to note that so long as the data size is large enough the GPU will be happy. i.e. you can use a larger data size for the tag and the GPU won't complain. As you can see from the void RPI_PropertyAddTag( rpi_mailbox_tag_t tag, ... ) switch tag statement there are only a few types of tag layout anyway. The GPU acts upon tag values which have the request/response code set to process request settings (always 0). When the GPU has parsed a value and filled the tag's value buffer with the value required it sets the request/response indicator to 1 to show that the data in the value buffer is the GPU's response. All of this modifies the data in-place. The API I wrote for this tutorial allows us to have a simple paradime for using the property interface. /* Initialise, Add and Process tags */ RPI_PropertyInit (); RPI_PropertyAddTag ( TAG_ * , ... ); RPI_PropertyAddTag ( TAG_ * , ... ); RPI_PropertyAddTag ( TAG_ * , ... ); RPI_PropertyProcess (); /* Get the value for each tag */ property_value_buffer = RPI_PropertyGet ( TAG_ * ); The Framebuffer Properties \u00b6 If you don't yet know, a framebuffer is a block of memory who's data is written to a display. The data organisation depends on the display's attributes such as width, height, colour depth, etc. There is not usually a conversion between one type of data and the framebuffer. The GPU simply clocks the data in the framebuffer to the display. If a monitor is plugged in to the Raspberry-Pi the GPU detects it and displays a colour gradiant square on the screen. This shows that the RPI is up and running and has detected the screen. Through the mailbox property interface we can negotiate with the GPU so that it creates a framebuffer in memory that is of the correct size to represent the screen attached (or the size of the virtual screen we've requested). It will return a pointer to that memory so that the ARM has memory it can write to that will be directly written to the screen by the GPU. It's the most basic and simplest form of graphics. Each pixel's colour can be controlled by writing data into the buffer. Let's look at how we use the property interface to negotiate a 32-bit framebuffer at 1280x1024: /* Initialise a framebuffer... */ RPI_PropertyInit (); RPI_PropertyAddTag ( TAG_ALLOCATE_BUFFER ); RPI_PropertyAddTag ( TAG_SET_PHYSICAL_SIZE , 1280 , 1024 ); RPI_PropertyAddTag ( TAG_SET_VIRTUAL_SIZE , 1280 , 2048 ); RPI_PropertyAddTag ( TAG_SET_DEPTH , 32 ); RPI_PropertyAddTag ( TAG_GET_PITCH ); RPI_PropertyAddTag ( TAG_GET_PHYSICAL_SIZE ); RPI_PropertyAddTag ( TAG_GET_DEPTH ); RPI_PropertyProcess (); As you can see, we set up a load of tags for the GPU to process. We ask it to allocate a framebuffer, so set the physical and virtual size of the screen, and the colour depth. We then also ask it to return us some information, the current pitch, the physical size and the colour depth. The mailbox interface guarantees that the SET_* tags will be completed before the GET_* tags are processed so we can do a single process with all of the tags in place. Some of the SET_* tags may not be able to achieve what we ask for and so we must use the GET_* tags to know what the framebuffer settings actually are. The reason there is a physical and virtual size (and why they are set differently!) is because the virtual size can be larger than the physical size where the physical is \"mapped\" to a part of the framebuffer. The framebuffer is made to hold the largest of the two (which is invariably the virtual size). In the code I've made the virtual size twice the height of the physical size. There are other mailbox properties that allow us to set an offset where the physical screen will begin in the framebuffer. You can think of the virtual as being the framebuffer and the physical as the screen. We can draw to a larger framebuffer in a region that's off the physical screen and then offset the physical screen to the area of the framebuffer we've drawn to and the update to the screen is instant rather than updating as we draw which usually shows artifacts. For now, we just initialise the framebuffer (using the code above) and then write to the framebuffer space within the limits of the physical size. We draw a colour gradient box like the GPU does on power-on, but we \"animate\" it by continuously altering the colour vectors and re-drawing the screen. We use 100% of the CPU processing time to draw and you'll see just how slow this is! Go ahead and run the example. You can spend some time changing the colour depth setting and screen size to see the performance of the framebuffer fill. You'll notice it's a lot slower than you'd realise to refresh the screen when every pixel is written to. This is the code that does the actual draw to the framebuffer: pixel_offset = ( x * ( bpp >> 3 ) ) + ( y * pitch ); r = ( int )( current_colour . r * 0xFF ) & 0xFF ; g = ( int )( current_colour . g * 0xFF ) & 0xFF ; b = ( int )( current_colour . b * 0xFF ) & 0xFF ; a = ( int )( current_colour . b * 0xFF ) & 0xFF ; if ( bpp == 32 ) { /* Four bytes to write */ fb [ pixel_offset ++ ] = r ; fb [ pixel_offset ++ ] = g ; fb [ pixel_offset ++ ] = b ; fb [ pixel_offset ++ ] = a ; } else if ( bpp == 24 ) { /* Three bytes to write */ fb [ pixel_offset ++ ] = r ; fb [ pixel_offset ++ ] = g ; fb [ pixel_offset ++ ] = b ; } else if ( bpp == 16 ) { /* Two bytes to write */ /* Bit pack RGB565 into the 16-bit pixel offset */ * ( unsigned short * ) & fb [ pixel_offset ] = ( ( r >> 3 ) << 11 ) | ( ( g >> 2 ) << 5 ) | ( b >> 3 ); } else { /* Palette mode. TODO: Work out a colour scheme for packing rgb into an 8-bit palette! */ } As you can see, for each colour depth there is a different drawing algorithm. The RPI also supports an 8-bit palette mode which is not supported here. The pixel offset calculation can be done based on the bpp (bits-per-pixel) or colour depth setting. Notice that normally we'd use the screen width in this calculation, but instead we're using pitch . This is because the GPU can optimse the number of bytes per pixel line so that it can do faster maths, so this is one of the values we request back from the GPU when we initialise the framebuffer. The framebuffer memory is organised with the top left pixel being at offset 0, in screen coordinates this is 0,0. NOTE: To notice any animation of the colour with this example, you may have to run the sample code for a little while. armc-014 \u00b6 This example expands on the previous pt4 interrupts code and introduces the mailbox API to negotiate a framebuffer with the GPU. It then draws an ever-changing colour square on the screen which changes colour to animate the display. The Frames Per Second (FPS) is also calculated and sent to the mini UART so if you're monitoring the UART with a terminal such as PuTTY you'll be able to see the FPS calculated live on your Pi. While we acheive that, this does demonstrate how slow software rendering is. The framebuffer is set to 640x480 so that the demo will work on every HDMI panel that's plugged in. 640x480 is not exactly a big screen and yet below are the Frames Per Second (FPS) we managed to achieve on the RPI1 and RPI2. RPI1 RPI2 3.67 0.68 Those results are the right way round, I promise! It's time for us to do some thinking and optimising... armc-015 \u00b6 In the RPI processor (both RPI1 and RPI2) there is a cache system which is disabled by default and is designed to speed the processor up by enabling code to be (hopefully) run from the cache. In this example we add enabling the cache to the armc-start.S startup file: Enabling Cache \u00b6 .equ SCTLR_ENABLE_DATA_CACHE 0x4 .equ SCTLR_ENABLE_BRANCH_PREDICTION 0x800 .equ SCTLR_ENABLE_INSTRUCTION_CACHE 0x1000 // Enable L1 Cache ------------------------------------------------------- // R0 = System Control Register mrc p15 , 0 , r0 , c1 , c0 , 0 // Enable caches and branch prediction orr r0 , #SCTLR_ENABLE_BRANCH_PREDICTION orr r0 , #SCTLR_ENABLE_DATA_CACHE orr r0 , #SCTLR_ENABLE_INSTRUCTION_CACHE // System Control Register = R0 mcr p15 , 0 , r0 , c1 , c0 , 0 Look to the ARMv7-a architecture manual for information on enabling L1 Cache. L1 cache is closest to the processor and so is what we're interesting in enabling first off. Let's go through the code we've added so we know why we've added it and also why it works. Section B6.1.86 SCTLR, System Control Register, PMSA describes the system control register This register has some bits defined which are useful for us, namely: I, bit[12] Instruction cache enable bit. This is a global enable bit for instruction caches. The possible values of this bit are: 0 Instruction caches disabled. 1 Instruction caches enabled. If the system does not implement any instruction caches that can be accessed by the processor, at any level of the memory hierarchy, this bit is RAZ/WI. If the system implements any instruction caches that can be accessed by the processor then it must be possible to disable them by setting this bit to 0. Cache enabling and disabling on page B2-1270 describes the effect of enabling the caches. Z, bit[11] Branch prediction enable bit. The possible values of this bit are: 0 Program flow prediction disabled. 1 Program flow prediction enabled. Setting this bit to 1 enables branch prediction, also called program flow prediction. If program flow prediction cannot be disabled, this bit is RAO/WI. If the implementation does not support program flow prediction then this bit is RAZ/WI. C, bit[2] Cache enable bit. This is a global enable bit for data and unified caches. The possible values of this bit are: 0 Data and unified caches disabled. 1 Data and unified caches enabled. If the system does not implement any data or unified caches that can be accessed by the processor, at any level of the memory hierarchy, this bit is RAZ/WI. If the system implements any data or unified caches that can be accessed by the processor then it must be possible to disable them by setting this bit to 0. For more information about the effect of this bit see Cache enabling and disabling on page B2-1270. In the ARMv6 Architecture Manual for the Pi1 we see: Section B3.4 Register 1:Control registers which also descibes the system control register This control register implements bits in the register we're interested in for enabling L1 cache: I (bit[12]) If separate L1 caches are used, this is the enable/disable bit for the L1 instruction cache: 0 = L1 instruction cache disabled 1 = L1 instruction cache enabled. If an L1 unified cache is used or the L1 instruction cache is not implemented, this bit read as 0 and ignores writes. If the L1 instruction cache cannot be disabled, this bit reads as 1 and ignores writes. The state of this bit does not affect further levels of cache in the system. Z (bit[11]) On ARM processors which support branch prediction, this is the enable/disable bit for branch prediction: 0 = Program flow prediction disabled 1 = Program flow prediction enabled. If program flow prediction cannot be disabled, this bit reads as 1 and ignores writes. Program flow prediction includes all possible forms of speculative change of instruction stream prediction. Examples include static prediction, dynamic prediction, and return stacks. On ARM processors that do not support branch prediction, this bit reads as 0 and ignores writes. C (bit[2]) If a L1 unified cache is used, this is the enable/disable bit for the unified cache. If separate L1 caches are used, this is the enable/disable bit for the data cache. In either case: 0 = L1 unified/data cache disabled 1 = L1 unified/data cache enabled. If the L1 cache is not implemented, this bit reads as 0 and ignores writes. If the L1 cache cannot be disabled, this bit reads as 1 and ignores writes. The state of this bit does not affect other levels of cache in the system. As can be seen, although the cache system has changed slightly - it is essentially the same for us to use across both RPi1 and RPi2: Get the value of the System Control Register in R0 // Enable L1 Cache ------------------------------------------------------- // R0 = System Control Register mrc p15 , 0 , r0 , c1 , c0 , 0 Enable the three cache bits we just identified in the architecture manuals above: // Enable caches and branch prediction orr r0 , #SCTLR_ENABLE_BRANCH_PREDICTION orr r0 , #SCTLR_ENABLE_DATA_CACHE orr r0 , #SCTLR_ENABLE_INSTRUCTION_CACHE Write the modified value back to the System Control Register: // System Control Register = R0 mcr p15 , 0 , r0 , c1 , c0 , 0 Maxmising the Clock Speed (RPI2) \u00b6 I also added in some more mailbox properties to make the RPI2 run faster. When the RPI2 starts executing code from the ARM the ARM is running at 600MHz which is a way below its 900MHz maximum. Using the mailbox properties interface we can both ask the GPU for the ARMs maximum frequency and then set the ARM frequency to the maximum returned by the GPU: mp = RPI_PropertyGet ( TAG_GET_MAX_CLOCK_RATE ); RPI_PropertyInit (); RPI_PropertyAddTag ( TAG_SET_CLOCK_RATE , TAG_CLOCK_ARM , mp -> data . buffer_32 [ 1 ] ); RPI_PropertyProcess (); Both the above are fairly easy pickings for making sure we're getting the best speed available out of the processors, yet it was still a bit of work to get the gains! Run armc-015 and see the gains! Here's the FPS results: RPI1 RPI2 9.8 2.9 Wow! A reasonable gain, but still not exactly fast enough to start writing demos or games (Other than text-based games!) RPI2 performance \u00b6 At this point the question of why the RPI2 is so much slower than the RPI1 should come to mind! I don't have the answer (Send them on a postcard please!) The only thing going for the RPI1 is a much simpler memory system. Since the RPI2 introduces a quad-core architecture, things got a whole bunch more complicated on the memory bus. Anyway, let's see what else we can do. Making the Compiler work for us \u00b6 Up until now we've been working with optimisation levels -O0 (pre-interrupts) and -01 (post-interrupts). The reason for the move to -01 was to get rid of the caveat that these tutorials required an earlier version of gcc than the latest that gcc-arm-emedded offered. The issue was down to this gcc bug and as that bug has sat there for at least one minor version, it was time to fix the issue in the code as opposed to waiting for gcc and gcc-arm-embedded to catch up! armc-016 \u00b6 One simple change to this code to see what gains can be had by the compiler. If we're using a C compiler, we really should take advantage of the fact that a massive part of it's job is to optimise the code it generates to run as fast as possible. We'll change the optimisation level, from -O1 to -O4 . Nothing else, let's see what happens to the FPS: RPI1 RPI2 11.2 62 That is 62, not 6.2 in the RPI2. Clearly the compiler has done something essential for the RPI2, and about what I'd expect for the RPI1 target. What's it done? I don't know, that's for the compiler to know and for me to find out if I can be bothered. Right now I need get on with writing code. If you're interested in finding out, you can disassemble the code and see if you can see the major difference between an -O1 binary and an -O4 binary! I've run out of time, so we'll leave graphics here for now and come back to it in a few tutorials time to do some more advanced stuff. We'll look at using hardware accelerated graphics next time. For now, I think we need to look at JTAG next - I for one am wearing out the SD Card slots on my RPIs testing and re-testing these tutorials!!","title":"Part 5 - Graphics (Basic)"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#part-5-graphics-basic","text":"Finally, we get on to a tutorial that moves us away from blinking an LED as we explore the VideoCore IV GPU NOTE: This tutorial has not yet been migrated to RPI4 ! (See Github Issue 29 )","title":"Part 5 - Graphics (Basic)"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#reference-material","text":"We need some reading material for this tutorial - this is how I put the tutorial together, by reading and studying the manuals available for the Videcore, but for this tutorial mainly the information from the Cambridge Raspberry Pi Tutorials. Yes there's a lot of text and more than one manual - but that's the only way you learn! Some material that's useful (Generally for late night reading!): Raspberry Pi Firmware Mailboxes information This information is less important for now, but worth noting: VideoCoreIv-AG100 3D Architecture Reference Android Graphics Driver Source Code for VideoCoreIV","title":"Reference Material"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#the-gpu-videocore-iv","text":"The GPU and ARM devices can communicate with each other through a mailbox system. However, don't forget that the ARM and GPU also share the memory space, and so although we have to communicate through the mailbox, this is what negotiates settings and a framebuffer. The framebuffer address in memory is then returned from the GPU and we can go ahead and write to the framebuffer to see graphics. A framebuffer is a term that really refers to a block of video memory. This video memory is used to display pixels on the screen. So we have access to each pixel on the screen and can change it's colour properties. The framebuffer should be at least as big as the screen resolution. The size of the framebuffer memory block is given by: framebuffer_bytes = pixels_x * pixels_y * bytes_per_pixel NOTE In this tutorial we'll be using a framebuffer and so won't have any higher-level functions like OpenGL or accelerated graphics. We're going to create a simple software renderer. The number of bytes per pixel sets the number of colours available. The Raspberry-Pi GPU supports 8-bit, but in this mode the 8-bit value corresponds to a palette entry, and the palette appears to be very limited A palette mode can be really useful as it's fast (minimal amount of memory required for the graphics) and can be really useful for some special effects by simply altering the palette. 16-bit requires two bytes of data per pixel and directly represents the Red, Green and Blue levels of the colour of the pixel, and 32-bit has 4 bytes of data per pixel which has 8-bit per primary colour and an 8-biot alpha channel (transparency). The GPU is generally quite a closely guarded secret. It's a specialised processor, but also a powerful processor and most people would like to run code on it, just like we're running code on the GPU itself, but alas the GPU information is still under NDA (Non-Disclosure Agreement) terms. Broadcom however, did release some information and some of the most interesting information is in the BCM21553 Graphics Driver . I'll reference what material I've got from there as we go. Unfortunately there is no definitive source of information for the Raspberry Pi GPU, only bits and pieces scattered around the web. The GPU is a Videocore IV. As we're going to use the mailbox communication with the GPU anyway, we can skip a lot of the GPU detail and just concentrate on communicating with the GPU to get a framebuffer to use. The mailbox interface is our main entry point into the world of graphics. The interface was developed and created by a few guys at broadcom. The mailbox interface is software running on the GPU which receives messages from software running on the arm and returns responses to each message after performing a task. It's implemented in the start.elf file that we require on the SD Card to boot the Raspberry-Pi. You can see their discussion about implementing the mailbox on Github The mailboxes are defined on Github . The interface we're interested in is the Property Interface Mailbox This mailbox is responsible for negotiating the framebuffer. We need some code to be able to read and write data from the mailbox and we also need to define the data structure defined by the framebuffer mailbox documentation.","title":"The GPU (Videocore IV)"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#part-5armc-014","text":"The ARM014 tutorial introduces a few new peices of the puzzle. Firstly, as an aid to debugging now the code is getting more complex it introduces the mini UART which means we can have a basic \"console\". As we've bothered with the standard c library we can see how to tie the standard library functions like printf() to the UART. Secondly, it introduces the mailbox property interface which is a method of the ARM processor talking to the GPU. If we're going to get to the point of generating graphics, we must talk to the GPU! This code does generate an \"animated\" display, but as we'll see - it is extremely slow to use un-optimised software rendering on an RPI! If you want, go ahead and compile it now and plug the raspberry pi into a monitor or television with a HDMI interface. It should work! As we're now including new hardware into the mix it's possible that your monitor or TV doesn't support the resolution and colour depth that the example is hard coded to use. It's an example that's designed to be simple rather than supporting every HDMI panel out there. Hopefully you'll have luck with it. I'm using an old Hanns-G HUD19 monitor with DVI->HDMI adaptor. If it works, you'll see an ever-changing display which moves through the colour spectrum, continuously writing to every pixel in the framebuffer! You can see the (rather boring) output on YouTube . This tutorial shows how a 700MHz (or 900MHz) processor doesn't give you carte-blanche to program in C and end up with an optimised output. In this example there is no vertical sync used, we simply dedicate 100% of the ARM processor time to drawing the rectangle in video memory and then moving it one pixel before drawing it to the video memory again. In this way we can see the raw speed of the processor at work. It's pretty slow isn't it! We'll optimise in the ARM015 code later on in this tutorial.","title":"part-5/armc-014"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#getting-a-uart-text-console","text":"Read that title carefully, not getting a graphics Text Console but instead getting some text out of the code to help us debug. As the code becomes more complex we need better ways of debugging. A later tutorial will talk about using JTAG but for now we can have the basic UART based text debugging that gets us out of most holes! This requires some hardware. Namely a TTL-232R-3V3 or equivalent is required. The mini uart described in the AUX peripheral below is available on the RPI IO expansion headers on pins 8 (GPIO14/TXD) and 10 (GPIO15/RXD) Connecting the UART to a PC is pretty easy, a quick connection guide is available: Also, a quick photo of one connected up:","title":"Getting a UART Text Console"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#aux-peripheral","text":"The AUX peripheral includes a couple of communication interfaces which we can put to use. In this tutorial we will enable the mini UART which has Rx/Tx signals available on the IO header of the raspberry-pi. We will connect that to an FTDI 3.3V USB->UART converter and then we can connect PuTTY to the COM port and see output from the code! We will do some more work on the c stubs to provide uart support in the write system call which is what the likes of printf() , etc. functions use to write to the system. #include \"rpi-aux.h\" #include \"rpi-base.h\" #include \"rpi-gpio.h\" static aux_t * auxillary = ( aux_t * ) AUX_BASE ; aux_t * RPI_GetAux ( void ) { return auxillary ; } /* Define the system clock frequency in MHz for the baud rate calculation. This is clearly defined on the BCM2835 datasheet errata page: http://elinux.org/BCM2835_datasheet_errata */ #define SYS_FREQ 250000000 void RPI_AuxMiniUartInit ( int baud , int bits ) { volatile int i ; /* As this is a mini uart the configuration is complete! Now just enable the uart. Note from the documentation in section 2.1.1 of the ARM peripherals manual: If the enable bits are clear you will have no access to a peripheral. You can not even read or write the registers */ auxillary -> ENABLES = AUX_ENA_MINIUART ; /* Disable interrupts for now */ /* auxillary->IRQ &= ~AUX_IRQ_MU; */ auxillary -> MU_IER = 0 ; /* Disable flow control,enable transmitter and receiver! */ auxillary -> MU_CNTL = 0 ; /* Decide between seven or eight-bit mode */ if ( bits == 8 ) auxillary -> MU_LCR = AUX_MULCR_8BIT_MODE ; else auxillary -> MU_LCR = 0 ; auxillary -> MU_MCR = 0 ; /* Disable all interrupts from MU and clear the fifos */ auxillary -> MU_IER = 0 ; auxillary -> MU_IIR = 0xC6 ; /* Transposed calculation from Section 2.2.1 of the ARM peripherals manual */ auxillary -> MU_BAUD = ( SYS_FREQ / ( 8 * baud ) ) - 1 ; /* Setup GPIO 14 and 15 as alternative function 5 which is UART 1 TXD/RXD. These need to be set before enabling the UART */ RPI_SetGpioPinFunction ( RPI_GPIO14 , FS_ALT5 ); RPI_SetGpioPinFunction ( RPI_GPIO15 , FS_ALT5 ); RPI_GetGpio () -> GPPUD = 0 ; for ( i = 0 ; i < 150 ; i ++ ) { } RPI_GetGpio () -> GPPUDCLK0 = ( 1 << 14 ); for ( i = 0 ; i < 150 ; i ++ ) { } RPI_GetGpio () -> GPPUDCLK0 = 0 ; /* Disable flow control,enable transmitter and receiver! */ auxillary -> MU_CNTL = AUX_MUCNTL_TX_ENABLE ; } void RPI_AuxMiniUartWrite ( char c ) { /* Wait until the UART has an empty space in the FIFO */ while ( ( auxillary -> MU_LSR & AUX_MULSR_TX_EMPTY ) == 0 ) { } /* Write the character to the FIFO for transmission */ auxillary -> MU_IO = c ; } #ifndef RPI_AUX_H #define RPI_AUX_H #include \"rpi-base.h\" #define AUX_BASE ( PERIPHERAL_BASE + 0x215000 ) #define AUX_ENA_MINIUART ( 1 << 0 ) #define AUX_ENA_SPI1 ( 1 << 1 ) #define AUX_ENA_SPI2 ( 1 << 2 ) #define AUX_IRQ_SPI2 ( 1 << 2 ) #define AUX_IRQ_SPI1 ( 1 << 1 ) #define AUX_IRQ_MU ( 1 << 0 ) #define AUX_MULCR_8BIT_MODE ( 3 << 0 ) /* See errata for this value */ #define AUX_MULCR_BREAK ( 1 << 6 ) #define AUX_MULCR_DLAB_ACCESS ( 1 << 7 ) #define AUX_MUMCR_RTS ( 1 << 1 ) #define AUX_MULSR_DATA_READY ( 1 << 0 ) #define AUX_MULSR_RX_OVERRUN ( 1 << 1 ) #define AUX_MULSR_TX_EMPTY ( 1 << 5 ) #define AUX_MULSR_TX_IDLE ( 1 << 6 ) #define AUX_MUMSR_CTS ( 1 << 5 ) #define AUX_MUCNTL_RX_ENABLE ( 1 << 0 ) #define AUX_MUCNTL_TX_ENABLE ( 1 << 1 ) #define AUX_MUCNTL_RTS_FLOW ( 1 << 2 ) #define AUX_MUCNTL_CTS_FLOW ( 1 << 3 ) #define AUX_MUCNTL_RTS_FIFO ( 3 << 4 ) #define AUX_MUCNTL_RTS_ASSERT ( 1 << 6 ) #define AUX_MUCNTL_CTS_ASSERT ( 1 << 7 ) #define AUX_MUSTAT_SYMBOL_AV ( 1 << 0 ) #define AUX_MUSTAT_SPACE_AV ( 1 << 1 ) #define AUX_MUSTAT_RX_IDLE ( 1 << 2 ) #define AUX_MUSTAT_TX_IDLE ( 1 << 3 ) #define AUX_MUSTAT_RX_OVERRUN ( 1 << 4 ) #define AUX_MUSTAT_TX_FIFO_FULL ( 1 << 5 ) #define AUX_MUSTAT_RTS ( 1 << 6 ) #define AUX_MUSTAT_CTS ( 1 << 7 ) #define AUX_MUSTAT_TX_EMPTY ( 1 << 8 ) #define AUX_MUSTAT_TX_DONE ( 1 << 9 ) #define AUX_MUSTAT_RX_FIFO_LEVEL ( 7 << 16 ) #define AUX_MUSTAT_TX_FIFO_LEVEL ( 7 << 24 ) #define FSEL0(x) ( x ) ... #define FSEL53(x) ( x << 9 ) typedef struct { volatile unsigned int IRQ ; volatile unsigned int ENABLES ; volatile unsigned int reserved1 [(( 0x40 - 0x04 ) / 4 ) - 1 ]; volatile unsigned int MU_IO ; volatile unsigned int MU_IER ; volatile unsigned int MU_IIR ; volatile unsigned int MU_LCR ; volatile unsigned int MU_MCR ; volatile unsigned int MU_LSR ; volatile unsigned int MU_MSR ; volatile unsigned int MU_SCRATCH ; volatile unsigned int MU_CNTL ; volatile unsigned int MU_STAT ; volatile unsigned int MU_BAUD ; volatile unsigned int reserved2 [( 0x80 - 0x68 ) / 4 ]; volatile unsigned int SPI0_CNTL0 ; volatile unsigned int SPI0_CNTL1 ; volatile unsigned int SPI0_STAT ; volatile unsigned int SPI0_IO ; volatile unsigned int SPI0_PEEK ; volatile unsigned int reserved3 [( 0xC0 - 0x94 ) / 4 ]; volatile unsigned int SPI1_CNTL0 ; volatile unsigned int SPI1_CNTL1 ; volatile unsigned int SPI1_STAT ; volatile unsigned int SPI1_IO ; volatile unsigned int SPI1_PEEK ; } aux_t ; extern aux_t * RPI_GetAux ( void ); extern void RPI_AuxMiniUartInit ( int baud , int bits ); extern void RPI_AuxMiniUartWrite ( char c ); #endif I'm not going to go too far into explaining these drivers now. It's written in C, and you've got the BCM2835 data sheet the same as I have. You should be getting familiar with the layout of these \"driver\" files and the documentation in the BCM2835 peripherals document. We provide an initialisation function so we can set the number of bits (data bits) and the baud rate. The mini UART implementation isn't that configurable because it's not a full UART implementation. It's designed to provide a quick means of providing a console with as little code as possible. So there's no setting for parity or number of stop bits. It's always N1 (No parity, one stop bit). HACK: The calculation for the baud rate registers is done based on a defined system frequency of 250MHz. It works, but it's not as nice as using a detected system frequency. Perhaps after this tutorial you could get the system frequency and update the calculation to use it! The functions are written in a blocking mode, so the write function blocks until the UART can accept the next character, then it writes the new character and returns. Normally we'd use the UART interrupt to send a whole buffer of data rather than manually polling the register as this ties the processor up waiting. However, these are easy to use!","title":"AUX peripheral"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#the-_write-system-call","text":"Whenever data needs to be written to the OS it's done so through a function called _write . This is one of the original c-stubs we wrote in a previous tutorial. We previously just implemented a blank function. Here's the blank function we had. As you can see, it's not quite blank, but outbyte does nothing with the data, it's an empty sink. void outbyte ( char b ) { ( void ) b ; } int _write ( int file , char * ptr , int len ) { int todo ; for ( todo = 0 ; todo < len ; todo ++ ) outbyte ( * ptr ++ ); return len ; } We can tie all writes to the OS (for all files) to the UART console by adding the UART write function call to outbyte: void outbyte ( char b ) { RPI_AuxMiniUartWrite ( b ); } Originally this is what I did, and then when I used printf() to test function I kept getting a crash. In fact after some debugging with the OK LED in the processor exception handlers we introduced in the last tutorial I was able to determine it was an undefined instruction error. When you run this tutorials examples with PuTTY, you'll see output similar to this:","title":"The _write() System Call"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#enabling-vfp-support","text":"After a bit more thinking and tinkering I realised we have to enable the VFP now in order to use printf. As we're compiling and telling the compiler (or more the linker actually) that we're targeting a device with the VFP it is linking to a libc that can use VFP instructions and why shouldn't something in the printf implementation use the VFP instruction when necessary to speed things up? There is some more information about the problem on a stackoverflow answer . Without the VFP co-processor being enabled, VFP instructions will cause an undefined instruction exception. Enabling the VFP is another task that the C Runtime startup file crt0 would have performed for us, but we're on our own since we have to use -nostartfiles (See an earlier tutorial). Some recommended information about enabling VFP support is available from ARM. Some example code for enabling the VFP is available on the TI wiki, and that's the code we slice in to armc-start.S so that the VFP is enabled before the c library is setup: // Enable VFP ------------------------------------------------------------ // r1 = Access Control Register MRC p15 , #0, r1, c1, c0, #2 // enable full access for p10,11 ORR r1 , r1 , #(0xf << 20) // ccess Control Register = r1 MCR p15 , #0, r1, c1, c0, #2 MOV r1 , #0 // flush prefetch buffer because of FMXR below MCR p15 , #0, r1, c7, c5, #4 // and CP 10 & 11 were only just enabled // Enable VFP itself MOV r0 , #0x40000000 // FPEXC = r0 FMXR FPEXC , r0 With those additions, we can now go ahead and use the c-library write functions. It means that the full printf() implementation can be used on the UART for example without us having to lift a finger and try and implement something as fundamental as that ourselves. Also, this provides us with a debug/comms channel that is separate to the display. It's hard to use the display for debugging when the display isn't yet working!","title":"Enabling VFP Support"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#mailboxes","text":"We introduce some code in a few files, namely rpi-mailbox and rpi-mailbox-interface . The first is a common interface to access the mailbox system which passes information from the GPU to the ARM processor. The mailbox interface is implemented in the firmware (start.elf) that runs on the GPU. Here's the code, and as noted in the comments, the mailbox interface is described on the RPI firmware github wiki: Access Mailboxes Mailboxes Wiki #ifndef RPI_MAILBOX_H #define RPI_MAILBOX_H #include \"rpi-base.h\" #define RPI_MAILBOX0_BASE ( PERIPHERAL_BASE + 0xB880 ) /* The available mailbox channels in the BCM2835 Mailbox interface. See https://github.com/raspberrypi/firmware/wiki/Mailboxes for information */ typedef enum { MB0_POWER_MANAGEMENT = 0 , MB0_FRAMEBUFFER , MB0_VIRTUAL_UART , MB0_VCHIQ , MB0_LEDS , MB0_BUTTONS , MB0_TOUCHSCREEN , MB0_UNUSED , MB0_TAGS_ARM_TO_VC , MB0_TAGS_VC_TO_ARM , } mailbox0_channel_t ; /* These defines come from the Broadcom Videocode driver source code, see: brcm_usrlib/dag/vmcsx/vcinclude/bcm2708_chip/arm_control.h */ enum mailbox_status_reg_bits { ARM_MS_FULL = 0x80000000 , ARM_MS_EMPTY = 0x40000000 , ARM_MS_LEVEL = 0x400000FF , }; /* Define a structure which defines the register access to a mailbox. Not all mailboxes support the full register set! */ typedef struct { volatile unsigned int Read ; volatile unsigned int reserved1 [(( 0x90 - 0x80 ) / 4 ) - 1 ]; volatile unsigned int Poll ; volatile unsigned int Sender ; volatile unsigned int Status ; volatile unsigned int Configuration ; volatile unsigned int Write ; } mailbox_t ; extern void RPI_Mailbox0Write ( mailbox0_channel_t channel , int value ); extern int RPI_Mailbox0Read ( mailbox0_channel_t channel ); #endif #include <stdint.h> #include \"rpi-gpio.h\" #include \"rpi-mailbox.h\" /* Mailbox 0 mapped to it's base address */ static mailbox_t * rpiMailbox0 = ( mailbox_t * ) RPI_MAILBOX0_BASE ; void RPI_Mailbox0Write ( mailbox0_channel_t channel , int value ) { /* For information about accessing mailboxes, see: https://github.com/raspberrypi/firmware/wiki/Accessing-mailboxes */ /* Add the channel number into the lower 4 bits */ value &= ~ ( 0xF ); value |= channel ; /* Wait until the mailbox becomes available and then write to the mailbox channel */ while ( ( rpiMailbox0 -> Status & ARM_MS_FULL ) != 0 ) { } /* Write the modified value + channel number into the write register */ rpiMailbox0 -> Write = value ; } int RPI_Mailbox0Read ( mailbox0_channel_t channel ) { /* For information about accessing mailboxes, see: https://github.com/raspberrypi/firmware/wiki/Accessing-mailboxes */ int value = - 1 ; /* Keep reading the register until the desired channel gives us a value */ while ( ( value & 0xF ) != channel ) { /* Wait while the mailbox is empty because otherwise there's no value to read! */ while ( rpiMailbox0 -> Status & ARM_MS_EMPTY ) { } /* Extract the value from the Read register of the mailbox. The value is actually in the upper 28 bits */ value = rpiMailbox0 -> Read ; } /* Return just the value (the upper 28-bits) */ return value >> 4 ; } There are two mailboxes, 0 and 1. We only need to use mailbox 0. Mailbox has a number of channels to communicate on which are defined in the enum mailbox0_channel_t . The basics of the mailbox operation are pretty straight forward. To write to a mailbox we first construct a composite value. We can write a 32-bit value to the GPU which is generally a memory address, but the mailbox also has to support multiple channels and there is no separate place to write the channel number. In order to achieve multiple channels on a single mailbox the lower nibble (4-bits) are reserved for the channel number and the upper 28-bits are the value we're sending to the GPU. This means that any address we send to the GPU is missing the lowest 4-bits and the GPU simply assumes those bits are all 0. We therefore need to align any address we send the GPU to a 16-byte boundary which will ensure the lower 4-bits will be 0. The ARM waits for the mailbox to become empty by polling the status register and then it can write the composite value of the address and channel to the mailbox. To read from a mailbox we wait until the mailbox is full and read the value. Only when the value contains the same channel as we are waiting to communicate with do we proceed and return. The value is a 16-byte aligned memory address. It's important to know that we don't just send a value and get a value back. We send an address to a memory block that we have constructed specifically formatted messages in to communicate with the GPU. The messages that are passed to the GPU are channel dependant and so aren't defined in this code module. We will do a code module for each channel we use. Actually, we're only going to use one - MB0_TAGS_ARM_TO_VC which is used with the mailbox property interface. NOTE: Although the Framebuffer channel looks like the place to begin, actually we'll ignore that mailbox channel because it's a deprecated channel. It came before the mailbox property interface channel had framebuffer properties added to it.","title":"Mailboxes"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#mailbox-property-interface","text":"The Mailbox Property Interface specifies the messaging structure that needs to be present in the 16-byte aligned memory region I mentioned earlier. There are a lot of properties, and you need to read that page a couple of times to get a hold of how the data needs to be laid out. Here's the code we're using to support the Mailbox Property Interface: #include <stdarg.h> #include <stdio.h> #include <string.h> #include \"rpi-mailbox.h\" #include \"rpi-mailbox-interface.h\" /* Make sure the property tag buffer is aligned to a 16-byte boundary because we only have 28-bits available in the property interface protocol to pass the address of the buffer to the VC. */ static int pt [ 8192 ] __attribute__ (( aligned ( 16 ))); static int pt_index = 0 ; void RPI_PropertyInit ( void ) { /* Fill in the size on-the-fly */ pt [ PT_OSIZE ] = 12 ; /* Process request (All other values are reserved!) */ pt [ PT_OREQUEST_OR_RESPONSE ] = 0 ; /* First available data slot */ pt_index = 2 ; /* NULL tag to terminate tag list */ pt [ pt_index ] = 0 ; } /** @brief Add a property tag to the current tag list. Data can be included. All data is uint32_t @param tag */ void RPI_PropertyAddTag ( rpi_mailbox_tag_t tag , ... ) { va_list vl ; va_start ( vl , tag ); pt [ pt_index ++ ] = tag ; switch ( tag ) { case TAG_GET_FIRMWARE_VERSION : case TAG_GET_BOARD_MODEL : case TAG_GET_BOARD_REVISION : case TAG_GET_BOARD_MAC_ADDRESS : case TAG_GET_BOARD_SERIAL : case TAG_GET_ARM_MEMORY : case TAG_GET_VC_MEMORY : case TAG_GET_DMA_CHANNELS : /* Provide an 8-byte buffer for the response */ pt [ pt_index ++ ] = 8 ; pt [ pt_index ++ ] = 0 ; /* Request */ pt_index += 2 ; break ; case TAG_GET_CLOCKS : case TAG_GET_COMMAND_LINE : /* Provide a 256-byte buffer */ pt [ pt_index ++ ] = 256 ; pt [ pt_index ++ ] = 0 ; /* Request */ pt_index += 256 >> 2 ; break ; case TAG_ALLOCATE_BUFFER : pt [ pt_index ++ ] = 8 ; pt [ pt_index ++ ] = 0 ; /* Request */ pt [ pt_index ++ ] = va_arg ( vl , int ); pt_index += 1 ; break ; case TAG_GET_PHYSICAL_SIZE : case TAG_SET_PHYSICAL_SIZE : case TAG_TEST_PHYSICAL_SIZE : case TAG_GET_VIRTUAL_SIZE : case TAG_SET_VIRTUAL_SIZE : case TAG_TEST_VIRTUAL_SIZE : case TAG_GET_VIRTUAL_OFFSET : case TAG_SET_VIRTUAL_OFFSET : pt [ pt_index ++ ] = 8 ; pt [ pt_index ++ ] = 0 ; /* Request */ if ( ( tag == TAG_SET_PHYSICAL_SIZE ) || ( tag == TAG_SET_VIRTUAL_SIZE ) || ( tag == TAG_SET_VIRTUAL_OFFSET ) || ( tag == TAG_TEST_PHYSICAL_SIZE ) || ( tag == TAG_TEST_VIRTUAL_SIZE ) ) { pt [ pt_index ++ ] = va_arg ( vl , int ); /* Width */ pt [ pt_index ++ ] = va_arg ( vl , int ); /* Height */ } else { pt_index += 2 ; } break ; case TAG_GET_ALPHA_MODE : case TAG_SET_ALPHA_MODE : case TAG_GET_DEPTH : case TAG_SET_DEPTH : case TAG_GET_PIXEL_ORDER : case TAG_SET_PIXEL_ORDER : case TAG_GET_PITCH : pt [ pt_index ++ ] = 4 ; pt [ pt_index ++ ] = 0 ; /* Request */ if ( ( tag == TAG_SET_DEPTH ) || ( tag == TAG_SET_PIXEL_ORDER ) || ( tag == TAG_SET_ALPHA_MODE ) ) { /* Colour Depth, bits-per-pixel \\ Pixel Order State */ pt [ pt_index ++ ] = va_arg ( vl , int ); } else { pt_index += 1 ; } break ; case TAG_GET_OVERSCAN : case TAG_SET_OVERSCAN : pt [ pt_index ++ ] = 16 ; pt [ pt_index ++ ] = 0 ; /* Request */ if ( ( tag == TAG_SET_OVERSCAN ) ) { pt [ pt_index ++ ] = va_arg ( vl , int ); /* Top pixels */ pt [ pt_index ++ ] = va_arg ( vl , int ); /* Bottom pixels */ pt [ pt_index ++ ] = va_arg ( vl , int ); /* Left pixels */ pt [ pt_index ++ ] = va_arg ( vl , int ); /* Right pixels */ } else { pt_index += 4 ; } break ; default : /* Unsupported tags, just remove the tag from the list */ pt_index -- ; break ; } /* Make sure the tags are 0 terminated to end the list and update the buffer size */ pt [ pt_index ] = 0 ; va_end ( vl ); } int RPI_PropertyProcess ( void ) { int result ; #if( PRINT_PROP_DEBUG == 1 ) printf ( \"%s Length: %d \\r\\n \" , __func__ , pt [ PT_OSIZE ] ); #endif /* Fill in the size of the buffer */ pt [ PT_OSIZE ] = ( pt_index + 1 ) << 2 ; pt [ PT_OREQUEST_OR_RESPONSE ] = 0 ; #if( PRINT_PROP_DEBUG == 1 ) for ( i = 0 ; i < ( pt [ PT_OSIZE ] >> 2 ); i ++ ) printf ( \"Request: %3d %8.8X \\r\\n \" , i , pt [ i ] ); #endif RPI_Mailbox0Write ( MB0_TAGS_ARM_TO_VC , ( unsigned int ) pt ); result = RPI_Mailbox0Read ( MB0_TAGS_ARM_TO_VC ); #if( PRINT_PROP_DEBUG == 1 ) for ( i = 0 ; i < ( pt [ PT_OSIZE ] >> 2 ); i ++ ) printf ( \"Response: %3d %8.8X \\r\\n \" , i , pt [ i ] ); #endif return result ; } rpi_mailbox_property_t * RPI_PropertyGet ( rpi_mailbox_tag_t tag ) { static rpi_mailbox_property_t property ; int * tag_buffer = NULL ; property . tag = tag ; /* Get the tag from the buffer. Start at the first tag position */ int index = 2 ; while ( index < ( pt [ PT_OSIZE ] >> 2 ) ) { /* printf( \"Test Tag: [%d] %8.8X\\r\\n\", index, pt[index] ); */ if ( pt [ index ] == tag ) { tag_buffer = & pt [ index ]; break ; } /* Progress to the next tag if we haven't yet discovered the tag */ index += ( pt [ index + 1 ] >> 2 ) + 3 ; } /* Return NULL of the property tag cannot be found in the buffer */ if ( tag_buffer == NULL ) return NULL ; /* Return the required data */ property . byte_length = tag_buffer [ T_ORESPONSE ] & 0xFFFF ; memcpy ( property . data . buffer_8 , & tag_buffer [ T_OVALUE ], property . byte_length ); return & property ; } #ifndef RPI_MAILBOX_INTERFACE_H #define RPI_MAILBOX_INTERFACE_H /** @brief An enum of the RPI->Videocore firmware mailbox property interface properties. Further details are available from https://github.com/raspberrypi/firmware/wiki/Mailbox-property-interface */ typedef enum { /* Videocore */ TAG_GET_FIRMWARE_VERSION = 0x1 , /* Hardware */ TAG_GET_BOARD_MODEL = 0x10001 , TAG_GET_BOARD_REVISION , TAG_GET_BOARD_MAC_ADDRESS , TAG_GET_BOARD_SERIAL , TAG_GET_ARM_MEMORY , TAG_GET_VC_MEMORY , TAG_GET_CLOCKS , /* Config */ TAG_GET_COMMAND_LINE = 0x50001 , /* Shared resource management */ TAG_GET_DMA_CHANNELS = 0x60001 , /* Power */ TAG_GET_POWER_STATE = 0x20001 , TAG_GET_TIMING , TAG_SET_POWER_STATE = 0x28001 , /* Clocks */ TAG_GET_CLOCK_STATE = 0x30001 , TAG_SET_CLOCK_STATE = 0x38001 , TAG_GET_CLOCK_RATE = 0x30002 , TAG_SET_CLOCK_RATE = 0x38002 , TAG_GET_MAX_CLOCK_RATE = 0x30004 , TAG_GET_MIN_CLOCK_RATE = 0x30007 , TAG_GET_TURBO = 0x30009 , TAG_SET_TURBO = 0x38009 , /* Voltage */ TAG_GET_VOLTAGE = 0x30003 , TAG_SET_VOLTAGE = 0x38003 , TAG_GET_MAX_VOLTAGE = 0x30005 , TAG_GET_MIN_VOLTAGE = 0x30008 , TAG_GET_TEMPERATURE = 0x30006 , TAG_GET_MAX_TEMPERATURE = 0x3000A , TAG_ALLOCATE_MEMORY = 0x3000C , TAG_LOCK_MEMORY = 0x3000D , TAG_UNLOCK_MEMORY = 0x3000E , TAG_RELEASE_MEMORY = 0x3000F , TAG_EXECUTE_CODE = 0x30010 , TAG_GET_DISPMANX_MEM_HANDLE = 0x30014 , TAG_GET_EDID_BLOCK = 0x30020 , /* Framebuffer */ TAG_ALLOCATE_BUFFER = 0x40001 , TAG_RELEASE_BUFFER = 0x48001 , TAG_BLANK_SCREEN = 0x40002 , TAG_GET_PHYSICAL_SIZE = 0x40003 , TAG_TEST_PHYSICAL_SIZE = 0x44003 , TAG_SET_PHYSICAL_SIZE = 0x48003 , TAG_GET_VIRTUAL_SIZE = 0x40004 , TAG_TEST_VIRTUAL_SIZE = 0x44004 , TAG_SET_VIRTUAL_SIZE = 0x48004 , TAG_GET_DEPTH = 0x40005 , TAG_TEST_DEPTH = 0x44005 , TAG_SET_DEPTH = 0x48005 , TAG_GET_PIXEL_ORDER = 0x40006 , TAG_TEST_PIXEL_ORDER = 0x44006 , TAG_SET_PIXEL_ORDER = 0x48006 , TAG_GET_ALPHA_MODE = 0x40007 , TAG_TEST_ALPHA_MODE = 0x44007 , TAG_SET_ALPHA_MODE = 0x48007 , TAG_GET_PITCH = 0x40008 , TAG_GET_VIRTUAL_OFFSET = 0x40009 , TAG_TEST_VIRTUAL_OFFSET = 0x44009 , TAG_SET_VIRTUAL_OFFSET = 0x48009 , TAG_GET_OVERSCAN = 0x4000A , TAG_TEST_OVERSCAN = 0x4400A , TAG_SET_OVERSCAN = 0x4800A , TAG_GET_PALETTE = 0x4000B , TAG_TEST_PALETTE = 0x4400B , TAG_SET_PALETTE = 0x4800B , TAG_SET_CURSOR_INFO = 0x8011 , TAG_SET_CURSOR_STATE = 0x8010 } rpi_mailbox_tag_t ; typedef enum { TAG_STATE_REQUEST = 0 , TAG_STATE_RESPONSE = 1 , } rpi_tag_state_t ; typedef enum { PT_OSIZE = 0 , PT_OREQUEST_OR_RESPONSE = 1 , } rpi_tag_buffer_offset_t ; typedef enum { T_OIDENT = 0 , T_OVALUE_SIZE = 1 , T_ORESPONSE = 2 , T_OVALUE = 3 , } rpi_tag_offset_t ; typedef struct { int tag ; int byte_length ; union { int value_32 ; unsigned char buffer_8 [ 256 ]; int buffer_32 [ 64 ]; } data ; } rpi_mailbox_property_t ; extern void RPI_PropertyInit ( void ); extern void RPI_PropertyAddTag ( rpi_mailbox_tag_t tag , ... ); extern int RPI_PropertyProcess ( void ); extern rpi_mailbox_property_t * RPI_PropertyGet ( rpi_mailbox_tag_t tag ); #endif NOTE: As you can see, I've left some debugging printf() calls in so you can alter PRINT_PROP_DEBUG to print them out - this means it'll print out the buffer you message the GPU with and see the resulting buffer when the GPU has finished it's response We start off with a memory buffer which is large enough to hold a concatenated list of property tags and data for the property tags we want to use. We use a gcc extension to align it to a 16-byte boundary: static int pt [ 8192 ] __attribute__ (( aligned ( 16 ))); The rest of the functions form a C API to the Mailbox Property Interface. There are various APIs people come up with to generate the memory structure. The messages are constructed such that the data length is large enough for whichever is larger, the message request data size or the response data size. It's also good to note that so long as the data size is large enough the GPU will be happy. i.e. you can use a larger data size for the tag and the GPU won't complain. As you can see from the void RPI_PropertyAddTag( rpi_mailbox_tag_t tag, ... ) switch tag statement there are only a few types of tag layout anyway. The GPU acts upon tag values which have the request/response code set to process request settings (always 0). When the GPU has parsed a value and filled the tag's value buffer with the value required it sets the request/response indicator to 1 to show that the data in the value buffer is the GPU's response. All of this modifies the data in-place. The API I wrote for this tutorial allows us to have a simple paradime for using the property interface. /* Initialise, Add and Process tags */ RPI_PropertyInit (); RPI_PropertyAddTag ( TAG_ * , ... ); RPI_PropertyAddTag ( TAG_ * , ... ); RPI_PropertyAddTag ( TAG_ * , ... ); RPI_PropertyProcess (); /* Get the value for each tag */ property_value_buffer = RPI_PropertyGet ( TAG_ * );","title":"Mailbox Property Interface"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#the-framebuffer-properties","text":"If you don't yet know, a framebuffer is a block of memory who's data is written to a display. The data organisation depends on the display's attributes such as width, height, colour depth, etc. There is not usually a conversion between one type of data and the framebuffer. The GPU simply clocks the data in the framebuffer to the display. If a monitor is plugged in to the Raspberry-Pi the GPU detects it and displays a colour gradiant square on the screen. This shows that the RPI is up and running and has detected the screen. Through the mailbox property interface we can negotiate with the GPU so that it creates a framebuffer in memory that is of the correct size to represent the screen attached (or the size of the virtual screen we've requested). It will return a pointer to that memory so that the ARM has memory it can write to that will be directly written to the screen by the GPU. It's the most basic and simplest form of graphics. Each pixel's colour can be controlled by writing data into the buffer. Let's look at how we use the property interface to negotiate a 32-bit framebuffer at 1280x1024: /* Initialise a framebuffer... */ RPI_PropertyInit (); RPI_PropertyAddTag ( TAG_ALLOCATE_BUFFER ); RPI_PropertyAddTag ( TAG_SET_PHYSICAL_SIZE , 1280 , 1024 ); RPI_PropertyAddTag ( TAG_SET_VIRTUAL_SIZE , 1280 , 2048 ); RPI_PropertyAddTag ( TAG_SET_DEPTH , 32 ); RPI_PropertyAddTag ( TAG_GET_PITCH ); RPI_PropertyAddTag ( TAG_GET_PHYSICAL_SIZE ); RPI_PropertyAddTag ( TAG_GET_DEPTH ); RPI_PropertyProcess (); As you can see, we set up a load of tags for the GPU to process. We ask it to allocate a framebuffer, so set the physical and virtual size of the screen, and the colour depth. We then also ask it to return us some information, the current pitch, the physical size and the colour depth. The mailbox interface guarantees that the SET_* tags will be completed before the GET_* tags are processed so we can do a single process with all of the tags in place. Some of the SET_* tags may not be able to achieve what we ask for and so we must use the GET_* tags to know what the framebuffer settings actually are. The reason there is a physical and virtual size (and why they are set differently!) is because the virtual size can be larger than the physical size where the physical is \"mapped\" to a part of the framebuffer. The framebuffer is made to hold the largest of the two (which is invariably the virtual size). In the code I've made the virtual size twice the height of the physical size. There are other mailbox properties that allow us to set an offset where the physical screen will begin in the framebuffer. You can think of the virtual as being the framebuffer and the physical as the screen. We can draw to a larger framebuffer in a region that's off the physical screen and then offset the physical screen to the area of the framebuffer we've drawn to and the update to the screen is instant rather than updating as we draw which usually shows artifacts. For now, we just initialise the framebuffer (using the code above) and then write to the framebuffer space within the limits of the physical size. We draw a colour gradient box like the GPU does on power-on, but we \"animate\" it by continuously altering the colour vectors and re-drawing the screen. We use 100% of the CPU processing time to draw and you'll see just how slow this is! Go ahead and run the example. You can spend some time changing the colour depth setting and screen size to see the performance of the framebuffer fill. You'll notice it's a lot slower than you'd realise to refresh the screen when every pixel is written to. This is the code that does the actual draw to the framebuffer: pixel_offset = ( x * ( bpp >> 3 ) ) + ( y * pitch ); r = ( int )( current_colour . r * 0xFF ) & 0xFF ; g = ( int )( current_colour . g * 0xFF ) & 0xFF ; b = ( int )( current_colour . b * 0xFF ) & 0xFF ; a = ( int )( current_colour . b * 0xFF ) & 0xFF ; if ( bpp == 32 ) { /* Four bytes to write */ fb [ pixel_offset ++ ] = r ; fb [ pixel_offset ++ ] = g ; fb [ pixel_offset ++ ] = b ; fb [ pixel_offset ++ ] = a ; } else if ( bpp == 24 ) { /* Three bytes to write */ fb [ pixel_offset ++ ] = r ; fb [ pixel_offset ++ ] = g ; fb [ pixel_offset ++ ] = b ; } else if ( bpp == 16 ) { /* Two bytes to write */ /* Bit pack RGB565 into the 16-bit pixel offset */ * ( unsigned short * ) & fb [ pixel_offset ] = ( ( r >> 3 ) << 11 ) | ( ( g >> 2 ) << 5 ) | ( b >> 3 ); } else { /* Palette mode. TODO: Work out a colour scheme for packing rgb into an 8-bit palette! */ } As you can see, for each colour depth there is a different drawing algorithm. The RPI also supports an 8-bit palette mode which is not supported here. The pixel offset calculation can be done based on the bpp (bits-per-pixel) or colour depth setting. Notice that normally we'd use the screen width in this calculation, but instead we're using pitch . This is because the GPU can optimse the number of bytes per pixel line so that it can do faster maths, so this is one of the values we request back from the GPU when we initialise the framebuffer. The framebuffer memory is organised with the top left pixel being at offset 0, in screen coordinates this is 0,0. NOTE: To notice any animation of the colour with this example, you may have to run the sample code for a little while.","title":"The Framebuffer Properties"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#armc-014","text":"This example expands on the previous pt4 interrupts code and introduces the mailbox API to negotiate a framebuffer with the GPU. It then draws an ever-changing colour square on the screen which changes colour to animate the display. The Frames Per Second (FPS) is also calculated and sent to the mini UART so if you're monitoring the UART with a terminal such as PuTTY you'll be able to see the FPS calculated live on your Pi. While we acheive that, this does demonstrate how slow software rendering is. The framebuffer is set to 640x480 so that the demo will work on every HDMI panel that's plugged in. 640x480 is not exactly a big screen and yet below are the Frames Per Second (FPS) we managed to achieve on the RPI1 and RPI2. RPI1 RPI2 3.67 0.68 Those results are the right way round, I promise! It's time for us to do some thinking and optimising...","title":"armc-014"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#armc-015","text":"In the RPI processor (both RPI1 and RPI2) there is a cache system which is disabled by default and is designed to speed the processor up by enabling code to be (hopefully) run from the cache. In this example we add enabling the cache to the armc-start.S startup file:","title":"armc-015"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#enabling-cache","text":".equ SCTLR_ENABLE_DATA_CACHE 0x4 .equ SCTLR_ENABLE_BRANCH_PREDICTION 0x800 .equ SCTLR_ENABLE_INSTRUCTION_CACHE 0x1000 // Enable L1 Cache ------------------------------------------------------- // R0 = System Control Register mrc p15 , 0 , r0 , c1 , c0 , 0 // Enable caches and branch prediction orr r0 , #SCTLR_ENABLE_BRANCH_PREDICTION orr r0 , #SCTLR_ENABLE_DATA_CACHE orr r0 , #SCTLR_ENABLE_INSTRUCTION_CACHE // System Control Register = R0 mcr p15 , 0 , r0 , c1 , c0 , 0 Look to the ARMv7-a architecture manual for information on enabling L1 Cache. L1 cache is closest to the processor and so is what we're interesting in enabling first off. Let's go through the code we've added so we know why we've added it and also why it works. Section B6.1.86 SCTLR, System Control Register, PMSA describes the system control register This register has some bits defined which are useful for us, namely: I, bit[12] Instruction cache enable bit. This is a global enable bit for instruction caches. The possible values of this bit are: 0 Instruction caches disabled. 1 Instruction caches enabled. If the system does not implement any instruction caches that can be accessed by the processor, at any level of the memory hierarchy, this bit is RAZ/WI. If the system implements any instruction caches that can be accessed by the processor then it must be possible to disable them by setting this bit to 0. Cache enabling and disabling on page B2-1270 describes the effect of enabling the caches. Z, bit[11] Branch prediction enable bit. The possible values of this bit are: 0 Program flow prediction disabled. 1 Program flow prediction enabled. Setting this bit to 1 enables branch prediction, also called program flow prediction. If program flow prediction cannot be disabled, this bit is RAO/WI. If the implementation does not support program flow prediction then this bit is RAZ/WI. C, bit[2] Cache enable bit. This is a global enable bit for data and unified caches. The possible values of this bit are: 0 Data and unified caches disabled. 1 Data and unified caches enabled. If the system does not implement any data or unified caches that can be accessed by the processor, at any level of the memory hierarchy, this bit is RAZ/WI. If the system implements any data or unified caches that can be accessed by the processor then it must be possible to disable them by setting this bit to 0. For more information about the effect of this bit see Cache enabling and disabling on page B2-1270. In the ARMv6 Architecture Manual for the Pi1 we see: Section B3.4 Register 1:Control registers which also descibes the system control register This control register implements bits in the register we're interested in for enabling L1 cache: I (bit[12]) If separate L1 caches are used, this is the enable/disable bit for the L1 instruction cache: 0 = L1 instruction cache disabled 1 = L1 instruction cache enabled. If an L1 unified cache is used or the L1 instruction cache is not implemented, this bit read as 0 and ignores writes. If the L1 instruction cache cannot be disabled, this bit reads as 1 and ignores writes. The state of this bit does not affect further levels of cache in the system. Z (bit[11]) On ARM processors which support branch prediction, this is the enable/disable bit for branch prediction: 0 = Program flow prediction disabled 1 = Program flow prediction enabled. If program flow prediction cannot be disabled, this bit reads as 1 and ignores writes. Program flow prediction includes all possible forms of speculative change of instruction stream prediction. Examples include static prediction, dynamic prediction, and return stacks. On ARM processors that do not support branch prediction, this bit reads as 0 and ignores writes. C (bit[2]) If a L1 unified cache is used, this is the enable/disable bit for the unified cache. If separate L1 caches are used, this is the enable/disable bit for the data cache. In either case: 0 = L1 unified/data cache disabled 1 = L1 unified/data cache enabled. If the L1 cache is not implemented, this bit reads as 0 and ignores writes. If the L1 cache cannot be disabled, this bit reads as 1 and ignores writes. The state of this bit does not affect other levels of cache in the system. As can be seen, although the cache system has changed slightly - it is essentially the same for us to use across both RPi1 and RPi2: Get the value of the System Control Register in R0 // Enable L1 Cache ------------------------------------------------------- // R0 = System Control Register mrc p15 , 0 , r0 , c1 , c0 , 0 Enable the three cache bits we just identified in the architecture manuals above: // Enable caches and branch prediction orr r0 , #SCTLR_ENABLE_BRANCH_PREDICTION orr r0 , #SCTLR_ENABLE_DATA_CACHE orr r0 , #SCTLR_ENABLE_INSTRUCTION_CACHE Write the modified value back to the System Control Register: // System Control Register = R0 mcr p15 , 0 , r0 , c1 , c0 , 0","title":"Enabling Cache"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#maxmising-the-clock-speed-rpi2","text":"I also added in some more mailbox properties to make the RPI2 run faster. When the RPI2 starts executing code from the ARM the ARM is running at 600MHz which is a way below its 900MHz maximum. Using the mailbox properties interface we can both ask the GPU for the ARMs maximum frequency and then set the ARM frequency to the maximum returned by the GPU: mp = RPI_PropertyGet ( TAG_GET_MAX_CLOCK_RATE ); RPI_PropertyInit (); RPI_PropertyAddTag ( TAG_SET_CLOCK_RATE , TAG_CLOCK_ARM , mp -> data . buffer_32 [ 1 ] ); RPI_PropertyProcess (); Both the above are fairly easy pickings for making sure we're getting the best speed available out of the processors, yet it was still a bit of work to get the gains! Run armc-015 and see the gains! Here's the FPS results: RPI1 RPI2 9.8 2.9 Wow! A reasonable gain, but still not exactly fast enough to start writing demos or games (Other than text-based games!)","title":"Maxmising the Clock Speed (RPI2)"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#rpi2-performance","text":"At this point the question of why the RPI2 is so much slower than the RPI1 should come to mind! I don't have the answer (Send them on a postcard please!) The only thing going for the RPI1 is a much simpler memory system. Since the RPI2 introduces a quad-core architecture, things got a whole bunch more complicated on the memory bus. Anyway, let's see what else we can do.","title":"RPI2 performance"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#making-the-compiler-work-for-us","text":"Up until now we've been working with optimisation levels -O0 (pre-interrupts) and -01 (post-interrupts). The reason for the move to -01 was to get rid of the caveat that these tutorials required an earlier version of gcc than the latest that gcc-arm-emedded offered. The issue was down to this gcc bug and as that bug has sat there for at least one minor version, it was time to fix the issue in the code as opposed to waiting for gcc and gcc-arm-embedded to catch up!","title":"Making the Compiler work for us"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c-part-5/#armc-016","text":"One simple change to this code to see what gains can be had by the compiler. If we're using a C compiler, we really should take advantage of the fact that a massive part of it's job is to optimise the code it generates to run as fast as possible. We'll change the optimisation level, from -O1 to -O4 . Nothing else, let's see what happens to the FPS: RPI1 RPI2 11.2 62 That is 62, not 6.2 in the RPI2. Clearly the compiler has done something essential for the RPI2, and about what I'd expect for the RPI1 target. What's it done? I don't know, that's for the compiler to know and for me to find out if I can be bothered. Right now I need get on with writing code. If you're interested in finding out, you can disassemble the code and see if you can see the major difference between an -O1 binary and an -O4 binary! I've run out of time, so we'll leave graphics here for now and come back to it in a few tutorials time to do some more advanced stuff. We'll look at using hardware accelerated graphics next time. For now, I think we need to look at JTAG next - I for one am wearing out the SD Card slots on my RPIs testing and re-testing these tutorials!!","title":"armc-016"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c/","text":"Raspberry-Pi Bare Metal Tutorial \u00b6 This repository contains the code for the Raspberry-Pi bare-metal programming in C series. The home of the tutorial and all of the articles relating to the code is at valvers.com and github The tutorial supports all RPi models, except: rpi3 because the ACT LED is not connected to an IO pin rpi4 (Part1-4 only - Part-5 will support RPI4 very soon!) The tutorial only supports a Linux host for compiling the tutorial code. Quickstart \u00b6 git clone git@github.com:BrianSidebotham/arm-tutorial-rpi.git cd arm-tutorial-rpi In order to use the tutorial-supplied compiler: compiler/get_compiler.sh Get the RPI Firmware that will be required for compiled SD Card images: firmware/get_firmware_repo.sh NOTE : This tutorial also used to be tested on Windows, but as I don't have any Windows installs available any more, or indeed the time available to test everything under Windows it's dropped off the list. Get reading the tutorial. Have fun, and remember to experiment! Dependencies \u00b6 The tutorial has a few dependencies which you might want to install before you get started: cmake (Used for configuring Makefiles) mtools (Tools for dealing with file-based FAT32 systems) Tutorial links (Github) \u00b6 Step01 - Getting Started Step02 - C Runtime Step03 - Introducing CMake Step04 - Interrupts Step05 - Graphics(Basic) Interesting Links \u00b6 Original Cambridge Tutorial that inspired this tutorial series. ARM Instruction Reference Circle C++ Bare Metal Environment for RPI Newlib C-Library documentation","title":"Raspberry-Pi Bare Metal Tutorial"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c/#raspberry-pi-bare-metal-tutorial","text":"This repository contains the code for the Raspberry-Pi bare-metal programming in C series. The home of the tutorial and all of the articles relating to the code is at valvers.com and github The tutorial supports all RPi models, except: rpi3 because the ACT LED is not connected to an IO pin rpi4 (Part1-4 only - Part-5 will support RPI4 very soon!) The tutorial only supports a Linux host for compiling the tutorial code.","title":"Raspberry-Pi Bare Metal Tutorial"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c/#quickstart","text":"git clone git@github.com:BrianSidebotham/arm-tutorial-rpi.git cd arm-tutorial-rpi In order to use the tutorial-supplied compiler: compiler/get_compiler.sh Get the RPI Firmware that will be required for compiled SD Card images: firmware/get_firmware_repo.sh NOTE : This tutorial also used to be tested on Windows, but as I don't have any Windows installs available any more, or indeed the time available to test everything under Windows it's dropped off the list. Get reading the tutorial. Have fun, and remember to experiment!","title":"Quickstart"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c/#dependencies","text":"The tutorial has a few dependencies which you might want to install before you get started: cmake (Used for configuring Makefiles) mtools (Tools for dealing with file-based FAT32 systems)","title":"Dependencies"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c/#tutorial-links-github","text":"Step01 - Getting Started Step02 - C Runtime Step03 - Introducing CMake Step04 - Interrupts Step05 - Graphics(Basic)","title":"Tutorial links (Github)"},{"location":"open-software/raspberry-pi/bare-metal-programming-in-c/#interesting-links","text":"Original Cambridge Tutorial that inspired this tutorial series. ARM Instruction Reference Circle C++ Bare Metal Environment for RPI Newlib C-Library documentation","title":"Interesting Links"},{"location":"open-software/saltstack/building-a-centos8-salt-master/","text":"Building a CentOS8 Salt Master \u00b6 Saltstack starts with building a salt master. The machine needs to be built outside of salt. Let's look at building a basic salt master to control certain aspects of our other servers or infrastructure to enforce certain policies. The first thing we need is a CentOS8 installation. I've got a fresh CentOS8.1 tempate sat on on Proxmox as a template ready to go, so I can go ahead and clone that template to start making a salt master. Cloud-Init can be used to automate the network setup, but as I'm at home, I'm just going to go ahead and manually configure the network settings under /etc/sysconfig/network-scripts the first time the template boots. The CentOS8.1 install is a minimal install without GUI. The following script configures a CentOS8.1 Salt Master from zero to hero: TODO: Finish this section/page","title":"Building a CentOS8 Salt Master"},{"location":"open-software/saltstack/building-a-centos8-salt-master/#building-a-centos8-salt-master","text":"Saltstack starts with building a salt master. The machine needs to be built outside of salt. Let's look at building a basic salt master to control certain aspects of our other servers or infrastructure to enforce certain policies. The first thing we need is a CentOS8 installation. I've got a fresh CentOS8.1 tempate sat on on Proxmox as a template ready to go, so I can go ahead and clone that template to start making a salt master. Cloud-Init can be used to automate the network setup, but as I'm at home, I'm just going to go ahead and manually configure the network settings under /etc/sysconfig/network-scripts the first time the template boots. The CentOS8.1 install is a minimal install without GUI. The following script configures a CentOS8.1 Salt Master from zero to hero: TODO: Finish this section/page","title":"Building a CentOS8 Salt Master"},{"location":"open-software/webstacks/using-reactjs-and-bulma/","text":"Using ReactJS and Bulma \u00b6 An extremely powerful combination for web development is a combination of ReactJS (for the HTML view) and Bulma for the css styling of the application. It's a great web application starter. NOTE: There is a github repository with the code in for this tutorial. Getting Started \u00b6 In order to get started, we need a new ReactJS application. Go ahead, and as per the online ReactJS tutorial , get a new project up and running with: npx create-react-app reactjs-bulma-tutorial Make sure the project has built ok by testing it out: cd reactjs-bulma-tutorial npm start Your browser should point you to a ReactJS application that looks a bit like this: Great - we've got our ReactJS demo started. Next, we'll add Bulma in. Installing Bulma \u00b6 In order to get started, we need a ReactJS wrapper for Bulma. There is a great one, react-bulma-components which wraps Bulma for use in ReactJS applications. From within the root of the new project type: npm install --save react-bulma-components This installs the Bulma ReactJS components ready for us to import into our project. Adding a Bulma Component \u00b6 Bulma has a lot of components, all wrapped up and waiting for you to use in your application. But let's start out right from the beginning. One major advantage of modern CSS is SCSS or SASS which provide us with compilable CSS - enabling us to theme and adjust settings using variables. It's really handy to have that stuff and as with everything, it's best to bake it in a the start. Adding SASS Support \u00b6 From inside the project root, install the node-sass module: npm install --save node-sass In the project root, create a new file called jsconfig.json with the following content: { \"compilerOptions\" : { \"baseUrl\" : \"./src\" } } In the /src/ directory create a new file called _variables.sass . This is what the Bulma SASS will use to override CSS variables. Even if it's unused, it should be included in the project to prevent the Bulma SASS from failing to compile. Rename /src/App.css to /src/App.scss so it will get compiled rather than just be included. At the top of the /src/App.scss file, add the following line to import the Bulma (Compilable) css: @ import \"~react-bulma-components/src/index.sass\" ; In the /src/App.js source file, change the App.css import to be App.scss now. Add a Bulma button \u00b6 We can noe import a button for example to use: At the top of /src/App.js , underneath the import React... line, you can add the following to import the Button component: import Button from 'react-bulma-components/lib/components/button' ; Now we can go ahead and add the imported button component to the page. Let's add the button component under the main paragraph text in the example. Immediately after the paragraph lets add the button as simply as we can: < Button color = 'primary' > Press Me! </ Button > Now when you run npm start in the project's root you should see something with a Bulma button in: The SASS enables us to change CSS colours easily. In the src/_variables.sass file add the following line to change the primary colour used by Bulma SASS: $primary: #ffaa55; Now, you'll see (perhaps after a page reload) that the c;olour of the button has turned orange. All components basing themselves off of the primary colour will be affected throughout the CSS stack. Creating a New Component \u00b6 In order to do something useful we want to create what's known as a component in ReactJS. Let's take the SVG logo and make it a component. Then we can look at doing something funky with it. Checkout git commit 8535c88 for this part of the tutorial. We add a new components directory to the source code so we have somewhere to dump our component source code. In a new file we create a new component called Logo . The following content is in src/components/logo.js . I'm sure you could do Typescript here too. import React from 'react' ; import logo from '../logo.svg' ; export default class Logo extends React . Component { constructor ( props ) { super ( props ) this . state = { style : { transform : 'scale(1)' } } this . handleMouseEnter = this . handleMouseEnter . bind ( this ) this . handleMouseLeave = this . handleMouseLeave . bind ( this ) } handleMouseEnter ( event ) { this . setState (( state , props ) => ({ style : { transform : 'scale(1.5)' } })) } handleMouseLeave () { this . setState (( state , props ) => ({ style : { transform : 'scale(1)' } })) } render () { return ( < img src = { logo } className = \"App-logo\" style = { this . state . style } alt = \"logo\" onMouseLeave = { this . handleMouseLeave } onMouseEnter = { this . handleMouseEnter } /> ); } } This component imports React - so we can extend the React.Component class to create our component. It imports the Logo image as an SVG in exactly the same way as the original test React application does. Then, creates a new class by extending the React.Component base class - here we create a class constructor that first constructs the base class object (super) with the properties that have been passed in. After that we create a state object bound the class. This state object must only be altered through the react framework's setState function. This is so that rendering changes, which are required to happen on the server-side are does as efficiently as possible. If the render function makes use of state then the class knows that it needs to re-render itself and update the component's view. We have added in some event handling for this component. This nicely wraps up a HTML view object and it's related JavaScript support. All the callbacks do are change the scale of the SVG image when the mouse hovers. We could of course do this much more simply in pure CSS, but we're here to investigate how Bulma and React work and how they can work together. I'm very much learning as I go. The render function of the class returns the view. It makes use of the component's state. Using the state doesn't need to be wrapped in a get function, but setting the state must as we've already established be wrapped with the setState function. We can investigate that further later on. We simply return a single image element. Normally we'd wrap the contents returned in a container div. I just wanted the minimum possible here for now. From the render method, we must only have one outer element. Thus, if we want to return an image and a paragraph, that's fine - but both must be wrapped in a div or similar element as a container. If you're familiar with JavaScript then you'll be familiar with the bind(this) construct that's going on here. It's a little laborious, but it must be done for the event handlers to be bound to the class object and therefore be able to make use of this to reference the class object. Without these bind calls, the event handlers would have no knowledge of the class in which they're defined. When you run this commit, we get something like this:","title":"Using ReactJS and Bulma"},{"location":"open-software/webstacks/using-reactjs-and-bulma/#using-reactjs-and-bulma","text":"An extremely powerful combination for web development is a combination of ReactJS (for the HTML view) and Bulma for the css styling of the application. It's a great web application starter. NOTE: There is a github repository with the code in for this tutorial.","title":"Using ReactJS and Bulma"},{"location":"open-software/webstacks/using-reactjs-and-bulma/#getting-started","text":"In order to get started, we need a new ReactJS application. Go ahead, and as per the online ReactJS tutorial , get a new project up and running with: npx create-react-app reactjs-bulma-tutorial Make sure the project has built ok by testing it out: cd reactjs-bulma-tutorial npm start Your browser should point you to a ReactJS application that looks a bit like this: Great - we've got our ReactJS demo started. Next, we'll add Bulma in.","title":"Getting Started"},{"location":"open-software/webstacks/using-reactjs-and-bulma/#installing-bulma","text":"In order to get started, we need a ReactJS wrapper for Bulma. There is a great one, react-bulma-components which wraps Bulma for use in ReactJS applications. From within the root of the new project type: npm install --save react-bulma-components This installs the Bulma ReactJS components ready for us to import into our project.","title":"Installing Bulma"},{"location":"open-software/webstacks/using-reactjs-and-bulma/#adding-a-bulma-component","text":"Bulma has a lot of components, all wrapped up and waiting for you to use in your application. But let's start out right from the beginning. One major advantage of modern CSS is SCSS or SASS which provide us with compilable CSS - enabling us to theme and adjust settings using variables. It's really handy to have that stuff and as with everything, it's best to bake it in a the start.","title":"Adding a Bulma Component"},{"location":"open-software/webstacks/using-reactjs-and-bulma/#adding-sass-support","text":"From inside the project root, install the node-sass module: npm install --save node-sass In the project root, create a new file called jsconfig.json with the following content: { \"compilerOptions\" : { \"baseUrl\" : \"./src\" } } In the /src/ directory create a new file called _variables.sass . This is what the Bulma SASS will use to override CSS variables. Even if it's unused, it should be included in the project to prevent the Bulma SASS from failing to compile. Rename /src/App.css to /src/App.scss so it will get compiled rather than just be included. At the top of the /src/App.scss file, add the following line to import the Bulma (Compilable) css: @ import \"~react-bulma-components/src/index.sass\" ; In the /src/App.js source file, change the App.css import to be App.scss now.","title":"Adding SASS Support"},{"location":"open-software/webstacks/using-reactjs-and-bulma/#add-a-bulma-button","text":"We can noe import a button for example to use: At the top of /src/App.js , underneath the import React... line, you can add the following to import the Button component: import Button from 'react-bulma-components/lib/components/button' ; Now we can go ahead and add the imported button component to the page. Let's add the button component under the main paragraph text in the example. Immediately after the paragraph lets add the button as simply as we can: < Button color = 'primary' > Press Me! </ Button > Now when you run npm start in the project's root you should see something with a Bulma button in: The SASS enables us to change CSS colours easily. In the src/_variables.sass file add the following line to change the primary colour used by Bulma SASS: $primary: #ffaa55; Now, you'll see (perhaps after a page reload) that the c;olour of the button has turned orange. All components basing themselves off of the primary colour will be affected throughout the CSS stack.","title":"Add a Bulma button"},{"location":"open-software/webstacks/using-reactjs-and-bulma/#creating-a-new-component","text":"In order to do something useful we want to create what's known as a component in ReactJS. Let's take the SVG logo and make it a component. Then we can look at doing something funky with it. Checkout git commit 8535c88 for this part of the tutorial. We add a new components directory to the source code so we have somewhere to dump our component source code. In a new file we create a new component called Logo . The following content is in src/components/logo.js . I'm sure you could do Typescript here too. import React from 'react' ; import logo from '../logo.svg' ; export default class Logo extends React . Component { constructor ( props ) { super ( props ) this . state = { style : { transform : 'scale(1)' } } this . handleMouseEnter = this . handleMouseEnter . bind ( this ) this . handleMouseLeave = this . handleMouseLeave . bind ( this ) } handleMouseEnter ( event ) { this . setState (( state , props ) => ({ style : { transform : 'scale(1.5)' } })) } handleMouseLeave () { this . setState (( state , props ) => ({ style : { transform : 'scale(1)' } })) } render () { return ( < img src = { logo } className = \"App-logo\" style = { this . state . style } alt = \"logo\" onMouseLeave = { this . handleMouseLeave } onMouseEnter = { this . handleMouseEnter } /> ); } } This component imports React - so we can extend the React.Component class to create our component. It imports the Logo image as an SVG in exactly the same way as the original test React application does. Then, creates a new class by extending the React.Component base class - here we create a class constructor that first constructs the base class object (super) with the properties that have been passed in. After that we create a state object bound the class. This state object must only be altered through the react framework's setState function. This is so that rendering changes, which are required to happen on the server-side are does as efficiently as possible. If the render function makes use of state then the class knows that it needs to re-render itself and update the component's view. We have added in some event handling for this component. This nicely wraps up a HTML view object and it's related JavaScript support. All the callbacks do are change the scale of the SVG image when the mouse hovers. We could of course do this much more simply in pure CSS, but we're here to investigate how Bulma and React work and how they can work together. I'm very much learning as I go. The render function of the class returns the view. It makes use of the component's state. Using the state doesn't need to be wrapped in a get function, but setting the state must as we've already established be wrapped with the setState function. We can investigate that further later on. We simply return a single image element. Normally we'd wrap the contents returned in a container div. I just wanted the minimum possible here for now. From the render method, we must only have one outer element. Thus, if we want to return an image and a paragraph, that's fine - but both must be wrapped in a div or similar element as a container. If you're familiar with JavaScript then you'll be familiar with the bind(this) construct that's going on here. It's a little laborious, but it must be done for the event handlers to be bound to the class object and therefore be able to make use of this to reference the class object. Without these bind calls, the event handlers would have no knowledge of the class in which they're defined. When you run this commit, we get something like this:","title":"Creating a New Component"},{"location":"v6manta/","text":"V6 Opel Manta My V6 Opel Manta has a 2.5ltr Vectra V6 engine, running a DTA S80 ECU and throttle bodies. Sounds a treat. Starting with an Opel Manta 1.8S Berlinetta - it took me a few years to build a car which we then drove down to the Nurburgring (and broke down in the carpark!). It will owes me a lot of trackdays and needs to TLC to get it back up and running. 2013 \u00b6 Had a great blast in the Manta Driven the Manta again! 2012 \u00b6 Virtually back on the road Finally the V6 Manta up a running again! The finishing touches Nearly back together Finally the engine's back in! Rebuilt The Gearbox Stripping the T5 Gearbox Clutch Release Bearing Failure Ready for a test drive Started her up again! Mostly plumbed back in Engine back in (again!) Took the engine back out again! Engine is back in... More Dry Sump Work 2012-01-09 Dry sump pan is welded 2011 \u00b6 2011-11-15 Dry sump work... 2011-10-18 Painted the engine bay 2011-10-16 Moving along with the rebuild 2011-09-25 Getting ready to spray the engine bay again... 2011-09-17 Gearbox back together 2011-09-15 More subframe work 2011-09-14 Started work on the new sump pan 2011-09-10 Built some more of the frame 2011-09-04 Started work on the 2011 Rebuild! 2011-03-25 Went to Brands Hatch 2011-03-13 The Manta got mapped! 2011-03-13 Fitting some new seats! 2011-01-01 Finally driven the manta again today 2010 \u00b6 2010-12-12 Been busy building 2010-11-03 Picked up a replacement V6 2010-10-25 V6 problem 2010-10-24 Stripping the V6 2010-10-23 V6 is broke 2010-10-12 Starting putting the engine back together 2010-10-09 V6 Oil problems.... 2010-09-26 Few little bits 2010-09-22 Lack of updates 2010-06-19 Almost ready to go back in 2010-06-12 Getting ready to bolt it back in 2010-06-06 Done most of the bits on the V6 2010-06-01 Sumps off 2010-05-31 Back from Germany 2010-05-11 Rolling Road Day! 2010-05-09 Got the car rolling!! 2010-04-26 Nearly finished the second manifold 2010-04-21 Ticking off the boxes 2010-04-11 Need a TODO List 2010-04-07 Started the second manifold 2010-04-05 Finished a manifold! 2010-04-03 Started on the manifolds 2010-03-22 Gearbox Sealed and Release Bearing Fitted 2010-02-14 Building the V6 2010-02-07 Building the V6 2010-02-06 Building the V6 2010-02-03 Ordered the Exhaust Manifold Flanges 2010-02-03 Cylinder Head Bolts Torque 2010-02-02 Starting the V6 Build 2010-02-01 Exhaust Manifolds 2010-01-30 Picked up another V6 2010-01-27 Started building the V6 Heads up 2010-01-23 Done the Handbrake + Sliders 2009 \u00b6 2009-12-18 Flywheel and Clutch 2009-10-05 Trialling the throttle bodies + a few more bits painted 2009-06-24 Making the dry sump pan 2008 \u00b6 2008-12-14 Stripping the X25XE V6 bottom end 2008-11-16 Engine + Gearbox mounted + Steering Column Fitted 2008-11-09 Engine + Transmission Fitted 2008-09-25 Even More Headwork 2008-09-04 Some More Headwork 2008-09-02 Rebuilt Oil Pump + Started Headwork 2008-07-08 It's on its wheels at last! 2008-04-16 Rebuilt the gearbox so I get gear selection! 2008-04-12 Shimmed up the diff, and fitted the clocks 2008-04-08 Fitted the rear windows and steering column 2008-03-22 Diff Bearings need replacing 2008-03-19 Suspension bushes are always wrong 2008-03-15 Front Suspension Build 2008-02-24 Painted the Nextel and Checked for wheel clearance 2008-01-23 Rear Axle Trial Fitting 2008-01-16 Out of the booth 2008-01-14 Painting the shell Orange! 2007 \u00b6 2007-12-04 Painting the inside and engine bay 2007-11-28 Underneath is complete! 2007-11-21 Almost started painting! 2007-11-13 Getting it ready to paint... 2007-10-20 Perspex Windows 2007-10-20 2005 \u00b6 2005-11-03 2005-11-01 2005-09-23 2005-09-22 2005-09-19 2005-09-05 2005-08-31 2005-08-25 2005-08-10 2005-08-08 2005-08-04 Done something 2005-05-16 2004 \u00b6 2004-12-10 Were back 2004-11-01 2004-10-29 2004-10-22 2004-10-21 2004-10-18 2004-10-15 2004-10-13 2004-10-11 2004-10-08 2004-10-07 2004-10-07 2004-09-27 2004-09-03 2004-08-10 2004-08-09 2004-07-26 2004-06-21 2004-06-18 2004-06-17 2004-04-20 Finally got around to the manta 2004-02-19 2004-02-13 2004-02-13 2004-02-09 2004-01-29 2004-01-26 2004-01-26 2004-01-26 2004-01-07 2004-01-06 2003 \u00b6 2003-12-16 2003-11-04 2003-10-09 2003-10-07 2003-09-28 2003-09-11 2003-08-23 2003-08-13 2003-08-12 2003-07-28 Stage Rally Opel Manta 2003-07-28 Brought a 1.8S berlinetta 2003-07-28","title":"Index"},{"location":"v6manta/#2013","text":"Had a great blast in the Manta Driven the Manta again!","title":"2013"},{"location":"v6manta/#2012","text":"Virtually back on the road Finally the V6 Manta up a running again! The finishing touches Nearly back together Finally the engine's back in! Rebuilt The Gearbox Stripping the T5 Gearbox Clutch Release Bearing Failure Ready for a test drive Started her up again! Mostly plumbed back in Engine back in (again!) Took the engine back out again! Engine is back in... More Dry Sump Work 2012-01-09 Dry sump pan is welded","title":"2012"},{"location":"v6manta/#2011","text":"2011-11-15 Dry sump work... 2011-10-18 Painted the engine bay 2011-10-16 Moving along with the rebuild 2011-09-25 Getting ready to spray the engine bay again... 2011-09-17 Gearbox back together 2011-09-15 More subframe work 2011-09-14 Started work on the new sump pan 2011-09-10 Built some more of the frame 2011-09-04 Started work on the 2011 Rebuild! 2011-03-25 Went to Brands Hatch 2011-03-13 The Manta got mapped! 2011-03-13 Fitting some new seats! 2011-01-01 Finally driven the manta again today","title":"2011"},{"location":"v6manta/#2010","text":"2010-12-12 Been busy building 2010-11-03 Picked up a replacement V6 2010-10-25 V6 problem 2010-10-24 Stripping the V6 2010-10-23 V6 is broke 2010-10-12 Starting putting the engine back together 2010-10-09 V6 Oil problems.... 2010-09-26 Few little bits 2010-09-22 Lack of updates 2010-06-19 Almost ready to go back in 2010-06-12 Getting ready to bolt it back in 2010-06-06 Done most of the bits on the V6 2010-06-01 Sumps off 2010-05-31 Back from Germany 2010-05-11 Rolling Road Day! 2010-05-09 Got the car rolling!! 2010-04-26 Nearly finished the second manifold 2010-04-21 Ticking off the boxes 2010-04-11 Need a TODO List 2010-04-07 Started the second manifold 2010-04-05 Finished a manifold! 2010-04-03 Started on the manifolds 2010-03-22 Gearbox Sealed and Release Bearing Fitted 2010-02-14 Building the V6 2010-02-07 Building the V6 2010-02-06 Building the V6 2010-02-03 Ordered the Exhaust Manifold Flanges 2010-02-03 Cylinder Head Bolts Torque 2010-02-02 Starting the V6 Build 2010-02-01 Exhaust Manifolds 2010-01-30 Picked up another V6 2010-01-27 Started building the V6 Heads up 2010-01-23 Done the Handbrake + Sliders","title":"2010"},{"location":"v6manta/#2009","text":"2009-12-18 Flywheel and Clutch 2009-10-05 Trialling the throttle bodies + a few more bits painted 2009-06-24 Making the dry sump pan","title":"2009"},{"location":"v6manta/#2008","text":"2008-12-14 Stripping the X25XE V6 bottom end 2008-11-16 Engine + Gearbox mounted + Steering Column Fitted 2008-11-09 Engine + Transmission Fitted 2008-09-25 Even More Headwork 2008-09-04 Some More Headwork 2008-09-02 Rebuilt Oil Pump + Started Headwork 2008-07-08 It's on its wheels at last! 2008-04-16 Rebuilt the gearbox so I get gear selection! 2008-04-12 Shimmed up the diff, and fitted the clocks 2008-04-08 Fitted the rear windows and steering column 2008-03-22 Diff Bearings need replacing 2008-03-19 Suspension bushes are always wrong 2008-03-15 Front Suspension Build 2008-02-24 Painted the Nextel and Checked for wheel clearance 2008-01-23 Rear Axle Trial Fitting 2008-01-16 Out of the booth 2008-01-14 Painting the shell Orange!","title":"2008"},{"location":"v6manta/#2007","text":"2007-12-04 Painting the inside and engine bay 2007-11-28 Underneath is complete! 2007-11-21 Almost started painting! 2007-11-13 Getting it ready to paint... 2007-10-20 Perspex Windows 2007-10-20","title":"2007"},{"location":"v6manta/#2005","text":"2005-11-03 2005-11-01 2005-09-23 2005-09-22 2005-09-19 2005-09-05 2005-08-31 2005-08-25 2005-08-10 2005-08-08 2005-08-04 Done something 2005-05-16","title":"2005"},{"location":"v6manta/#2004","text":"2004-12-10 Were back 2004-11-01 2004-10-29 2004-10-22 2004-10-21 2004-10-18 2004-10-15 2004-10-13 2004-10-11 2004-10-08 2004-10-07 2004-10-07 2004-09-27 2004-09-03 2004-08-10 2004-08-09 2004-07-26 2004-06-21 2004-06-18 2004-06-17 2004-04-20 Finally got around to the manta 2004-02-19 2004-02-13 2004-02-13 2004-02-09 2004-01-29 2004-01-26 2004-01-26 2004-01-26 2004-01-07 2004-01-06","title":"2004"},{"location":"v6manta/#2003","text":"2003-12-16 2003-11-04 2003-10-09 2003-10-07 2003-09-28 2003-09-11 2003-08-23 2003-08-13 2003-08-12 2003-07-28 Stage Rally Opel Manta 2003-07-28 Brought a 1.8S berlinetta 2003-07-28","title":"2003"},{"location":"v6manta/2003/2003-07-28-/","text":"v6manta 2003-07-28 - 2003-07-28 \u00b6 Matt (Animal) Very kindly gave me a set of front shocks that came from his V6 project manta coupe, and a set of 60mm lowering springs for my manta to get me going. It's MUCH better than standard, although with the 185/70R13 tyres, thing still feel a bit wooly! lol I'm not really suprised! We fitted these at VBOA, Billing '03. It ddin't take that long to fit them, but Animal knew all the neat tricks of doing it quickly ;) They certainly make cornering a bit better, even on these outrageous tyres. The harnesses help under cornering loads too. I've just changed the red OMP one for some Black ones. Still a 3-point, and still 2\" webbing. I really need to upgrade to 4-point harnesses and 3\" webbing, it'll be much comfier when pushing the car hard on a track. Even on the road, I notice the 2\" webbing, and I notice that the harness is constantly pulling me to sit slightly differently to how I would like. Maybe I just need to set up these black ones again. The red one was fitted at Billing also, and I really didn't take the time to set that one up, so I knew it would be a bit uncomfortable. Reaching the dash and the door when it's fuilly open isn't a problem though when I'm strapped in. The only thing I can't reach is the manual choke. But I can now operate that with my foot ;) It will be going when my XE engine goes in anyway. Well, I got hold of some of the great revolution wheels that many people use in rallying. They are light, and very strong. Most of their strength comes from the five thick spoke design, but the spokes are also deep in the alloy. The trouble with this is that caliper clearance is reduced for added strength. I have some cosworth calipers already though, that I will be running with some V6 288mm discs, and I have checked that these fit ok. They fit fine under these alloys with no spacers needed. The revolutions are ET35, with a 7\" width. I've had these for a while now, but I've only just got around to putting some tyres on them. For economic reasons ( I'm skint! lol ) I have chosen to put 195/50R15 toyo proxes T1-S all round. Initially I would have preferred to have tried a 45 profile, and gone for 195/45 up front, and 215/45 at the rear, but my bank manager said otherwise! Here they are fitted to the car, they certainly transform the look of the car, as well as the handling Now the car has some turn in! lol It really didn't before. I am also glad of the 50 profile, it seems to give a little, but not too much like the 70 profiles exaggerated! On hard cornering the car can be seen to judder the inside rear wheel forwards and backwards! Just showing up how old the suspension bushes are on the car. They are in desperate need of uprating/replaciing. Other than that, the car is a hoot to drive now. Although the engine fan blowing hot air onto my left hand after being at a junction for a little while is getting annoying now! :roll: It's time I blocked the old heater matrix holes in the bulkhead, and mounted all the electrical switches onto something I can reach easily. I am thinking of putting a switch panel on the transmission tunnel by the gearstick. I can reach everything there then when I have the harness on. At the moment, I am really enjoing the car. COST SO FAR list \u00a3375 - car \u00a30 - suspension (Thank you Animal :) ) \u00a395 - Quaife Quick rack ( not yet fitted ) \u00a3140 - 195/50 toyos x 4 - https://www.blackcircles.com \u00a3100 - Second hand revolution wheels /list:u TOTAL = \u00a3710","title":"2003 07 28 "},{"location":"v6manta/2003/2003-07-28-/#2003-07-28-2003-07-28","text":"Matt (Animal) Very kindly gave me a set of front shocks that came from his V6 project manta coupe, and a set of 60mm lowering springs for my manta to get me going. It's MUCH better than standard, although with the 185/70R13 tyres, thing still feel a bit wooly! lol I'm not really suprised! We fitted these at VBOA, Billing '03. It ddin't take that long to fit them, but Animal knew all the neat tricks of doing it quickly ;) They certainly make cornering a bit better, even on these outrageous tyres. The harnesses help under cornering loads too. I've just changed the red OMP one for some Black ones. Still a 3-point, and still 2\" webbing. I really need to upgrade to 4-point harnesses and 3\" webbing, it'll be much comfier when pushing the car hard on a track. Even on the road, I notice the 2\" webbing, and I notice that the harness is constantly pulling me to sit slightly differently to how I would like. Maybe I just need to set up these black ones again. The red one was fitted at Billing also, and I really didn't take the time to set that one up, so I knew it would be a bit uncomfortable. Reaching the dash and the door when it's fuilly open isn't a problem though when I'm strapped in. The only thing I can't reach is the manual choke. But I can now operate that with my foot ;) It will be going when my XE engine goes in anyway. Well, I got hold of some of the great revolution wheels that many people use in rallying. They are light, and very strong. Most of their strength comes from the five thick spoke design, but the spokes are also deep in the alloy. The trouble with this is that caliper clearance is reduced for added strength. I have some cosworth calipers already though, that I will be running with some V6 288mm discs, and I have checked that these fit ok. They fit fine under these alloys with no spacers needed. The revolutions are ET35, with a 7\" width. I've had these for a while now, but I've only just got around to putting some tyres on them. For economic reasons ( I'm skint! lol ) I have chosen to put 195/50R15 toyo proxes T1-S all round. Initially I would have preferred to have tried a 45 profile, and gone for 195/45 up front, and 215/45 at the rear, but my bank manager said otherwise! Here they are fitted to the car, they certainly transform the look of the car, as well as the handling Now the car has some turn in! lol It really didn't before. I am also glad of the 50 profile, it seems to give a little, but not too much like the 70 profiles exaggerated! On hard cornering the car can be seen to judder the inside rear wheel forwards and backwards! Just showing up how old the suspension bushes are on the car. They are in desperate need of uprating/replaciing. Other than that, the car is a hoot to drive now. Although the engine fan blowing hot air onto my left hand after being at a junction for a little while is getting annoying now! :roll: It's time I blocked the old heater matrix holes in the bulkhead, and mounted all the electrical switches onto something I can reach easily. I am thinking of putting a switch panel on the transmission tunnel by the gearstick. I can reach everything there then when I have the harness on. At the moment, I am really enjoing the car. COST SO FAR","title":"2003-07-28 - 2003-07-28"},{"location":"v6manta/2003/2003-07-28-brought-a-1.8s-berlinetta/","text":"v6manta 2003-07-28 - 2003-07-28 Brought a 1.8S berlinetta \u00b6 Animal and I travelled to the sea side in order to pick up this 1987 1.8 berlinetta coupe. I was determined to get a coupe, but mainly only because they look a bit better than the Cavalier looking hatch in my opinion. I hoped for one without a sunroof, but this one appeared at only \u00a3375! Bargain I thought, so we picked it up there and then. Part of the attraction of this car were the following points: (a) It's a 1.8, and this OHC engine shares the same block design as the 2ltr 16V (Family 2) opel engine, so fitting this engine in the future would be very easy, and I would have all the parts I need. (b) White is an easy colour to work with. Looks fine for a rally-like track car ;) \u00a9 It's cheap, and has quite a solid shell. The car was bog standard when I brought it. With some VERY soft and wobbly suspension.. AVO do a nice coilover kit for the manta, so eventually, that's what I have planned for her. I got straight down to business with stripping the interior out of the car in order to reduce the kerb weight. Having removed the passenger seat, and the rear bench seats, as well as all the sound proofing, dash (except the dials) and the heater matrix + fan blower, etc. I have achieved about a 115kG weight loss. This sat the suspension even higher than normal!! Here are some images from the car getting stripped: The heater matrix + fan / blower and sound deadening is removed for weight saving. Although when driving on a damp day, you do suffer a lot from condensation on the inside of the car No passenger seat, and no dash. The manta dash is all quite heavy as it is densly moulded foam, with a metal backing. All weight counts in a track car I think, so that all went in the bin. The clocks remain so that the car is still road legal, and I know what speed I'm doing! The rear bench has also gone, and there is no longer any sound deadening on the floor. The sound deadening can be removed easily with a plastic scaper and a heat gun, or blow torch. When the sound deadening is heating, it becomes a lot more pliable, and the backing glue melts, you can then scrape it easily off the shell. For any flue that remains, I recommend you use a clotch, or scotch cloth if it's really stubborn, and use white spirit to remove the glue. It melts it very easily, and is a lot better than thinners, as it does not evaporate as quickly. I have relocated the battery to passenger seat (when I install one anyway! :p ) This helps with weight distribution. Having this weight much lower down is beneficial. Every little helps ;) The gunk that is put on the doors to stop the trim rattling is horrible stuff. But with enough effort, comes off without removing the paint if you use white spirit and a plastic scraper, and a cloth to tidy up with. It's a fairly old car, and rust is in a few places, but overall this is a good shell, especially what I paid for it! I hammerited the front part of the shell, but this is only a very small part of the job ahead. I intend to take off all the underseal, and replace it with hammerite, or a similar strong white paint. This will enable me to see problem areas with the shell quickly. It will also highlight CV joint grease leakages, and oil leaks from the diff, gearbox or engine easily. Yep, weight is now harder to get rid of. This little pile consists of some bits of wound deadening from the engine bay, which sits right behind the engine on the bulk head, and the headlamp wiper motors. All in all about 2kG. Not much at all considering the effort involved in removing these bits! But it's really not worth them being on the car either.","title":"2003 07 28 brought a 1.8s berlinetta"},{"location":"v6manta/2003/2003-07-28-brought-a-1.8s-berlinetta/#2003-07-28-2003-07-28-brought-a-18s-berlinetta","text":"Animal and I travelled to the sea side in order to pick up this 1987 1.8 berlinetta coupe. I was determined to get a coupe, but mainly only because they look a bit better than the Cavalier looking hatch in my opinion. I hoped for one without a sunroof, but this one appeared at only \u00a3375! Bargain I thought, so we picked it up there and then. Part of the attraction of this car were the following points: (a) It's a 1.8, and this OHC engine shares the same block design as the 2ltr 16V (Family 2) opel engine, so fitting this engine in the future would be very easy, and I would have all the parts I need. (b) White is an easy colour to work with. Looks fine for a rally-like track car ;) \u00a9 It's cheap, and has quite a solid shell. The car was bog standard when I brought it. With some VERY soft and wobbly suspension.. AVO do a nice coilover kit for the manta, so eventually, that's what I have planned for her. I got straight down to business with stripping the interior out of the car in order to reduce the kerb weight. Having removed the passenger seat, and the rear bench seats, as well as all the sound proofing, dash (except the dials) and the heater matrix + fan blower, etc. I have achieved about a 115kG weight loss. This sat the suspension even higher than normal!! Here are some images from the car getting stripped: The heater matrix + fan / blower and sound deadening is removed for weight saving. Although when driving on a damp day, you do suffer a lot from condensation on the inside of the car No passenger seat, and no dash. The manta dash is all quite heavy as it is densly moulded foam, with a metal backing. All weight counts in a track car I think, so that all went in the bin. The clocks remain so that the car is still road legal, and I know what speed I'm doing! The rear bench has also gone, and there is no longer any sound deadening on the floor. The sound deadening can be removed easily with a plastic scaper and a heat gun, or blow torch. When the sound deadening is heating, it becomes a lot more pliable, and the backing glue melts, you can then scrape it easily off the shell. For any flue that remains, I recommend you use a clotch, or scotch cloth if it's really stubborn, and use white spirit to remove the glue. It melts it very easily, and is a lot better than thinners, as it does not evaporate as quickly. I have relocated the battery to passenger seat (when I install one anyway! :p ) This helps with weight distribution. Having this weight much lower down is beneficial. Every little helps ;) The gunk that is put on the doors to stop the trim rattling is horrible stuff. But with enough effort, comes off without removing the paint if you use white spirit and a plastic scraper, and a cloth to tidy up with. It's a fairly old car, and rust is in a few places, but overall this is a good shell, especially what I paid for it! I hammerited the front part of the shell, but this is only a very small part of the job ahead. I intend to take off all the underseal, and replace it with hammerite, or a similar strong white paint. This will enable me to see problem areas with the shell quickly. It will also highlight CV joint grease leakages, and oil leaks from the diff, gearbox or engine easily. Yep, weight is now harder to get rid of. This little pile consists of some bits of wound deadening from the engine bay, which sits right behind the engine on the bulk head, and the headlamp wiper motors. All in all about 2kG. Not much at all considering the effort involved in removing these bits! But it's really not worth them being on the car either.","title":"2003-07-28 - 2003-07-28 Brought a 1.8S berlinetta"},{"location":"v6manta/2003/2003-07-28-stage-rally-opel-manta/","text":"v6manta 2003-07-28 - 2003-07-28 Stage Rally Opel Manta \u00b6 There was a time when it was on the road! ..and it looked pretty good too. Can't wait to get it up and running again :)","title":"2003 07 28 stage rally opel manta"},{"location":"v6manta/2003/2003-07-28-stage-rally-opel-manta/#2003-07-28-2003-07-28-stage-rally-opel-manta","text":"","title":"2003-07-28 - 2003-07-28 Stage Rally Opel Manta"},{"location":"v6manta/2003/2003-08-12-/","text":"v6manta 2003-08-12 - 2003-08-12 \u00b6 The police have been hindering the project by stopping me when I went out onto the puiblic road with a spongey brake pedal. Less than 10minutes on the road cost me 3 points on my liscence and a \u00a360 fine. They also didn't appreciate the horn not working, or the holes in the chassis. So now I've put the quick rack plans on hold, as well as everything else. The brake story came out of me trying to get the caliper hose to seal on the caliper mating face properly, but it didn't want to know. I thought I had got it done, but the next morning revealed a spongey brake pedal, and a slight weep at the caliper when under pressure from your foot. In my opinion not worth 3 points, which is what I got. I think they were definately a bit harsh. But now I have to get another MOT on the car, which means I am busy welding the chassis. There's plenty of welding bits to be done, but they are mainly at the front of the car, the chassis rails, and the passenger + drivers floors + the drivers footwell, up by the A-pillar which has rotten through. Be carefuly out there. Stripped out cars are easy prey for bored policemen with nothing better to do. If I had an interior I doubt they would have even stopped me at all. I wasn't speeding or doing anything to warrent getting pulled over. :( I will update soon with photos of the welding + the new brakes that are now on, but were the cause of all my grey hairs this week.","title":"2003 08 12 "},{"location":"v6manta/2003/2003-08-12-/#2003-08-12-2003-08-12","text":"The police have been hindering the project by stopping me when I went out onto the puiblic road with a spongey brake pedal. Less than 10minutes on the road cost me 3 points on my liscence and a \u00a360 fine. They also didn't appreciate the horn not working, or the holes in the chassis. So now I've put the quick rack plans on hold, as well as everything else. The brake story came out of me trying to get the caliper hose to seal on the caliper mating face properly, but it didn't want to know. I thought I had got it done, but the next morning revealed a spongey brake pedal, and a slight weep at the caliper when under pressure from your foot. In my opinion not worth 3 points, which is what I got. I think they were definately a bit harsh. But now I have to get another MOT on the car, which means I am busy welding the chassis. There's plenty of welding bits to be done, but they are mainly at the front of the car, the chassis rails, and the passenger + drivers floors + the drivers footwell, up by the A-pillar which has rotten through. Be carefuly out there. Stripped out cars are easy prey for bored policemen with nothing better to do. If I had an interior I doubt they would have even stopped me at all. I wasn't speeding or doing anything to warrent getting pulled over. :( I will update soon with photos of the welding + the new brakes that are now on, but were the cause of all my grey hairs this week.","title":"2003-08-12 - 2003-08-12"},{"location":"v6manta/2003/2003-08-13-/","text":"v6manta 2003-08-13 - 2003-08-13 \u00b6 So, now that the moaning is out of the way, I am busy (well sort of busy! lol ) with pressing ahead with the car. I am sorting out the rust that I have found after removing the carpets, etc. The passenger side jacking point needs a totally new jacking point welding in, I have cut out all the rust, and I have started to cut up some bar + sheet metal to weld back in. I have also started to remove the seam sealer. The use of a wire brush on an angle grinder makes light work of most of the seam sealer. There's only a few bits I can't get to, and I think another, more pointy brush in a drill will get to those bits. The seam sealer hides all sorts of nasties, and I'd rather just see what is there. Plus if there are seams that I want to seam weld, then Cleaning them up first is essential, and I will be able to spot any stressed or cracked parts easily without the seam sealer hiding it all. Theres quite a lot of seam sealer all over the car though! lol. These are the brakes that I am fitting onto the front of the manta. The rear remains as std drums at the moment. They are 288mm V6 vented discs, which have been redrilled so that they fit onto the manta hubs. The calipers are from a ford cosworth I believe. I have had to make some brackets to space them out from the centre of the hub a bit, and also to push them further into the wheel so that they sit central on the disc. They seem to fit fine now under the 15\" revolutions, with no other wheel spacers required which is a good bonus. Now this is where my problem lay whilst fitting the brakes, and having a spongey brake pedal leading to 3points on my liscence :( The caliper bolt would not seal the hose onto the caliper, and I think that the manta bolt may have been a bit too long, as I thought I was tightening up the hose to the caliper, all I was doing was putting more strain on the bolt as it had hit the end of the caliper housing. My solution, as I had stripped the thread in the caliper, was to drill out the current thread, and put a new larger thread in. I threaded it with an M12x1.25 thread, and I had a bolt to suit, which I put on the lathe, and the drilling machine, and on the saw! lol to make a brake bolt out of it so that the brake fluid could pass through the centre of it. It worked a treat, and that side bolted up and sealed lovely. Now the other side I did with the original bolt, but I used some 3mm thick copper washers like I had made for the other side. But suprise, suprise, the bloody thing didn't seal again. I have now done both sides with a M12x1.25 thread. I wonder if goodridge or anyone does decent fittings with that thread? probably not knowing my luck! lol I need to get some braided hoses made up really, but I'll leave it for the moment, as I'm just trying to get the manta past an MOT. The policemen kindly gave me a prohibition notice for the car!","title":"2003 08 13 "},{"location":"v6manta/2003/2003-08-13-/#2003-08-13-2003-08-13","text":"So, now that the moaning is out of the way, I am busy (well sort of busy! lol ) with pressing ahead with the car. I am sorting out the rust that I have found after removing the carpets, etc. The passenger side jacking point needs a totally new jacking point welding in, I have cut out all the rust, and I have started to cut up some bar + sheet metal to weld back in. I have also started to remove the seam sealer. The use of a wire brush on an angle grinder makes light work of most of the seam sealer. There's only a few bits I can't get to, and I think another, more pointy brush in a drill will get to those bits. The seam sealer hides all sorts of nasties, and I'd rather just see what is there. Plus if there are seams that I want to seam weld, then Cleaning them up first is essential, and I will be able to spot any stressed or cracked parts easily without the seam sealer hiding it all. Theres quite a lot of seam sealer all over the car though! lol. These are the brakes that I am fitting onto the front of the manta. The rear remains as std drums at the moment. They are 288mm V6 vented discs, which have been redrilled so that they fit onto the manta hubs. The calipers are from a ford cosworth I believe. I have had to make some brackets to space them out from the centre of the hub a bit, and also to push them further into the wheel so that they sit central on the disc. They seem to fit fine now under the 15\" revolutions, with no other wheel spacers required which is a good bonus. Now this is where my problem lay whilst fitting the brakes, and having a spongey brake pedal leading to 3points on my liscence :( The caliper bolt would not seal the hose onto the caliper, and I think that the manta bolt may have been a bit too long, as I thought I was tightening up the hose to the caliper, all I was doing was putting more strain on the bolt as it had hit the end of the caliper housing. My solution, as I had stripped the thread in the caliper, was to drill out the current thread, and put a new larger thread in. I threaded it with an M12x1.25 thread, and I had a bolt to suit, which I put on the lathe, and the drilling machine, and on the saw! lol to make a brake bolt out of it so that the brake fluid could pass through the centre of it. It worked a treat, and that side bolted up and sealed lovely. Now the other side I did with the original bolt, but I used some 3mm thick copper washers like I had made for the other side. But suprise, suprise, the bloody thing didn't seal again. I have now done both sides with a M12x1.25 thread. I wonder if goodridge or anyone does decent fittings with that thread? probably not knowing my luck! lol I need to get some braided hoses made up really, but I'll leave it for the moment, as I'm just trying to get the manta past an MOT. The policemen kindly gave me a prohibition notice for the car!","title":"2003-08-13 - 2003-08-13"},{"location":"v6manta/2003/2003-08-23-/","text":"v6manta 2003-08-23 - 2003-08-23 \u00b6 Blimey, actually done a few things today! These are just parts on the list for the chassis really. I rebuilt the passenger side jacking point, which had totally gone, and I've made some plates to go over the holes in the bulkhead. Also fixed up a few other bits of welding on the passenger side. There is nothing left to weld on the passenger side. The drivers side however, there is. I need to do a small part on the drivers side chassis leg, and a lot of the drivers side inner wing. :( Still, I am aiming to have that completed tomorrow, as then all the welding for the car is done, and I'm a major step forward towards getting the car on the road again. The drivers side caliper hose is not sealing to the caliper properly either. I think I might just pop to think auto and see what fittings they can knock up for me that will be better. I might as well get them to knock up some braided hoses really. There, all welded up. Just needs some 'undercoat' now. Although it won't be under coat, it'll be hammerite, as I intend to do the whole of the car underside in hammerite eventually. Might as well start now!","title":"2003 08 23 "},{"location":"v6manta/2003/2003-08-23-/#2003-08-23-2003-08-23","text":"Blimey, actually done a few things today! These are just parts on the list for the chassis really. I rebuilt the passenger side jacking point, which had totally gone, and I've made some plates to go over the holes in the bulkhead. Also fixed up a few other bits of welding on the passenger side. There is nothing left to weld on the passenger side. The drivers side however, there is. I need to do a small part on the drivers side chassis leg, and a lot of the drivers side inner wing. :( Still, I am aiming to have that completed tomorrow, as then all the welding for the car is done, and I'm a major step forward towards getting the car on the road again. The drivers side caliper hose is not sealing to the caliper properly either. I think I might just pop to think auto and see what fittings they can knock up for me that will be better. I might as well get them to knock up some braided hoses really. There, all welded up. Just needs some 'undercoat' now. Although it won't be under coat, it'll be hammerite, as I intend to do the whole of the car underside in hammerite eventually. Might as well start now!","title":"2003-08-23 - 2003-08-23"},{"location":"v6manta/2003/2003-09-11-/","text":"v6manta 2003-09-11 - 2003-09-11 \u00b6 Okay, haven't put up anything for a while, but that doesn't mean I haven't been up to much ;) Matt came around, and we've rebuilt the rack with the new Quaife Quick rack kit (2.5 turns lock to lock). We've set the preload on the pinion to what we reckon it should be, and all's fine, until you get up one end of the rack, and then it all get's a bit notchy. I'm unsure why that is at the moment, so the rack is staying off the car. Also, A top UJ joint from the steering column doesn't fit the quaife pinion correctly. So I need to find out off them what I should do about fitting a UJ on there correctly. So, I will ring them tomorrow, and see what they have to say for themselves. Here are the two racks: The 288mm disc + cossie caliper conversion is now complete, and fits behind the 15\" wheels a treat : ...and finally, I've taken all the underseal off from the front arches, and used a white rust inhibitor under the arch, so that I can keep an eye on the condition of the inner arches better. I had to do quite a lot of welding to get the manta back through an MOT, which it will undertake next week, so it'll be easier now to stop the shell rotting any further than it already has. Luckily the shell is not too bad, but there were still some disaster zones. Mainly the front inner arches, a spot on the chassis legs, and the drivers side A-Pillar ( By the washer fluid resevoir funnily enough!! :evil: That picture doesn't do it justice though. It makes the whole area much clearner. It will be much easier to see grease and/or oil leaks. Only the rear arches, and the underside of the car to go then! lol","title":"2003 09 11 "},{"location":"v6manta/2003/2003-09-11-/#2003-09-11-2003-09-11","text":"Okay, haven't put up anything for a while, but that doesn't mean I haven't been up to much ;) Matt came around, and we've rebuilt the rack with the new Quaife Quick rack kit (2.5 turns lock to lock). We've set the preload on the pinion to what we reckon it should be, and all's fine, until you get up one end of the rack, and then it all get's a bit notchy. I'm unsure why that is at the moment, so the rack is staying off the car. Also, A top UJ joint from the steering column doesn't fit the quaife pinion correctly. So I need to find out off them what I should do about fitting a UJ on there correctly. So, I will ring them tomorrow, and see what they have to say for themselves. Here are the two racks: The 288mm disc + cossie caliper conversion is now complete, and fits behind the 15\" wheels a treat : ...and finally, I've taken all the underseal off from the front arches, and used a white rust inhibitor under the arch, so that I can keep an eye on the condition of the inner arches better. I had to do quite a lot of welding to get the manta back through an MOT, which it will undertake next week, so it'll be easier now to stop the shell rotting any further than it already has. Luckily the shell is not too bad, but there were still some disaster zones. Mainly the front inner arches, a spot on the chassis legs, and the drivers side A-Pillar ( By the washer fluid resevoir funnily enough!! :evil: That picture doesn't do it justice though. It makes the whole area much clearner. It will be much easier to see grease and/or oil leaks. Only the rear arches, and the underside of the car to go then! lol","title":"2003-09-11 - 2003-09-11"},{"location":"v6manta/2003/2003-09-28-/","text":"v6manta 2003-09-28 - 2003-09-28 \u00b6 Okay, I have been doing things, honestly! It's just been a bit of a mission with it being off the road. Haven't driven the manta for about a month now, and I'm really missing taking it out for a blast. I've put a Magnum fibreglass, sidemounted seat in. I made a much bigger job of it than I needed too, but I won't bore you with those details! ;) Also, continued removing the sound deadening and seam sealer from the chassis. These jobs seem to take forever, and when I post it looks like I haven't done anything! lol At least it's all starting to come back together now, and it's almost ready for it's mot :) Oh, I have now removed the berlinetta side stripe trims though ;) New total: \u00a3375 - car \u00a30 - suspension (Thank you Animal Smile ) \u00a395 - Quaife Quick rack \u00a3140 - 195/50 toyos x 4 - https://www.blackcircles.com \u00a3100 - Second hand revolution wheels \u00a350 - Bucket seat, including sub frames. :( Unfortunately, the MR2 has zapped money frmo the manta funds as it needed a bit of TLC recently with a new rear wheel bearing, and new pads all round, and caliper service kits, ABS sensor, CV joint, etc, etc.. All of which should come on HPi from Toyota! lol Ah well, time to get on...","title":"2003 09 28 "},{"location":"v6manta/2003/2003-09-28-/#2003-09-28-2003-09-28","text":"Okay, I have been doing things, honestly! It's just been a bit of a mission with it being off the road. Haven't driven the manta for about a month now, and I'm really missing taking it out for a blast. I've put a Magnum fibreglass, sidemounted seat in. I made a much bigger job of it than I needed too, but I won't bore you with those details! ;) Also, continued removing the sound deadening and seam sealer from the chassis. These jobs seem to take forever, and when I post it looks like I haven't done anything! lol At least it's all starting to come back together now, and it's almost ready for it's mot :) Oh, I have now removed the berlinetta side stripe trims though ;) New total: \u00a3375 - car \u00a30 - suspension (Thank you Animal Smile ) \u00a395 - Quaife Quick rack \u00a3140 - 195/50 toyos x 4 - https://www.blackcircles.com \u00a3100 - Second hand revolution wheels \u00a350 - Bucket seat, including sub frames. :( Unfortunately, the MR2 has zapped money frmo the manta funds as it needed a bit of TLC recently with a new rear wheel bearing, and new pads all round, and caliper service kits, ABS sensor, CV joint, etc, etc.. All of which should come on HPi from Toyota! lol Ah well, time to get on...","title":"2003-09-28 - 2003-09-28"},{"location":"v6manta/2003/2003-10-07-/","text":"v6manta 2003-10-07 - 2003-10-07 \u00b6 The Panhard rod has now been spherical jointed on one end. After I get paid I'll get a polybush in the other end, and that can go back onto the car, and stay there. This should make quite a big difference in holding the back end together a bit.","title":"2003 10 07 "},{"location":"v6manta/2003/2003-10-07-/#2003-10-07-2003-10-07","text":"The Panhard rod has now been spherical jointed on one end. After I get paid I'll get a polybush in the other end, and that can go back onto the car, and stay there. This should make quite a big difference in holding the back end together a bit.","title":"2003-10-07 - 2003-10-07"},{"location":"v6manta/2003/2003-10-09-/","text":"v6manta 2003-10-09 - 2003-10-09 \u00b6 The finished end of the panhard rod: 8)","title":"2003 10 09 "},{"location":"v6manta/2003/2003-10-09-/#2003-10-09-2003-10-09","text":"The finished end of the panhard rod: 8)","title":"2003-10-09 - 2003-10-09"},{"location":"v6manta/2003/2003-11-04-/","text":"v6manta 2003-11-04 - 2003-11-04 \u00b6 Well, it's all been quiet lately. Mainly due to Matt and I moving to a new garage. Which meant moving both mantas up to the garage, as well as everything else that was accumilated in our own workspaces. I have also been and picked up a Rover 3.5 V8 to clean and rebuild. Who know's what I'll do with that, but the Manta is still on course to get the 20XE engine on the throttle bodies that I'm making, and go stage Rallying next year. It's about time I made a list of essentials that I need in order to do that. Such things I need are: Fire Extinguisher system and plumbing, Battery box for battery, and FIA cut-off switch Roll-Cage ( minimum 6-point ) Sun roof plate ( Material at the ready.. :) ) Second Bucket seat for the co-driver Electrical system. ( Blade fuse board, switches, etc. ) Bit of welding left on the chassis, although not a lot left to do now. Front and rear bulkheads need sealing properly to FIA regulations Fuel and brake hoses routed throughout car. Brake hoses are now all flexible braided Sump guard ( &gt; 5mm alloy ) Tubular Exhaust for the 20XE That's about it really as far as essentials are concerned, but in order for it to be a half decent rally car, we will also need: Coilover suspension. Rear disk conversion for better rear braking Removal of brake servo, and adjustable bias bar fitted Mud guards fitted Perspex windows ( maybe ) Few more engine bits ( ARP rod bolts, and Omega piston rings from SBD ) ZF plate LSD Fibreglass panels ( 400 kit would be nice! lol )","title":"2003 11 04 "},{"location":"v6manta/2003/2003-11-04-/#2003-11-04-2003-11-04","text":"Well, it's all been quiet lately. Mainly due to Matt and I moving to a new garage. Which meant moving both mantas up to the garage, as well as everything else that was accumilated in our own workspaces. I have also been and picked up a Rover 3.5 V8 to clean and rebuild. Who know's what I'll do with that, but the Manta is still on course to get the 20XE engine on the throttle bodies that I'm making, and go stage Rallying next year. It's about time I made a list of essentials that I need in order to do that. Such things I need are: Fire Extinguisher system and plumbing, Battery box for battery, and FIA cut-off switch Roll-Cage ( minimum 6-point ) Sun roof plate ( Material at the ready.. :) ) Second Bucket seat for the co-driver Electrical system. ( Blade fuse board, switches, etc. ) Bit of welding left on the chassis, although not a lot left to do now. Front and rear bulkheads need sealing properly to FIA regulations Fuel and brake hoses routed throughout car. Brake hoses are now all flexible braided Sump guard ( &gt; 5mm alloy ) Tubular Exhaust for the 20XE That's about it really as far as essentials are concerned, but in order for it to be a half decent rally car, we will also need: Coilover suspension. Rear disk conversion for better rear braking Removal of brake servo, and adjustable bias bar fitted Mud guards fitted Perspex windows ( maybe ) Few more engine bits ( ARP rod bolts, and Omega piston rings from SBD ) ZF plate LSD Fibreglass panels ( 400 kit would be nice! lol )","title":"2003-11-04 - 2003-11-04"},{"location":"v6manta/2003/2003-12-16-/","text":"v6manta 2003-12-16 - 2003-12-16 \u00b6 I have started lightening the doors, and wow, what a difference you can make over standard: The engine is out, and the subframe has been dismantled ready for blasting and painting. The amount of congealed oil under there was amazing! lol Need a few bits for the XE next me thinks, then another seat, then some suspension bits... :)","title":"2003 12 16 "},{"location":"v6manta/2003/2003-12-16-/#2003-12-16-2003-12-16","text":"I have started lightening the doors, and wow, what a difference you can make over standard: The engine is out, and the subframe has been dismantled ready for blasting and painting. The amount of congealed oil under there was amazing! lol Need a few bits for the XE next me thinks, then another seat, then some suspension bits... :)","title":"2003-12-16 - 2003-12-16"},{"location":"v6manta/2004/2004-01-06-/","text":"v6manta 2004-01-06 - 2004-01-06 \u00b6 I've been reading up on the Blue book, a making a plan for the way forward to stage rallying the manta. A few areas have now been resolved, and some new ones have arrived. I am getting Matt's ( Animal's ) 6-point cage off of him tp fit into my manta, as he is going to a full, multi-point weld-in cage. This sorts out my cage problem to get me started. Rally Design sell nearly ( if not ) everything you need for prepping your car. This month I am to buy off them the following bits... Zero 2000 2.25ltr plumbed in fire extinguisher system. \u00a385.00 +VAT Zero 2000, and AFFF are the only two valid systems for stage rallying, and according to the blue book, for clubman stage rallying all we need as a minimum is a 2.25 lltr system, plumbed in to the engine bay, and which is operated by a T-pull handle that is situated on the scuttle panel at the bottom of the windscreen. FIA approved cut-off switch. \u00a316.80+VAT This is a master electrics switch, which disables all the car electrics ( Apart from any electically operated fire extinguisher systems ) including the ignition. A resistor is provided with it so that the diodes, and ECU are protected from the Alternator load dumping. ( This is where the voltage rises from the alternator when it is running, and not attached to the battery. ) Normally the alternator voltage regulator would have a voltage clamp on it, but some don't Battery box. \u00a316.50+VAT As I want the battery situated behind the passenger seat, it needs to be sealed ( well, vented, but essentially sealed ). Mainly to prevent leakage of battery acid in an accident. Dry-gel batteries would not need to be sealed. But I will be using a standard Lead-Acid car battery. So, with those few things on order, I can get on with prepping the shell ( Mainly stich welding the shell, and seam welding the suspension turrets. ) Closing the bulkheads, etc. and with these few bits, the car will be close to being able to see it's first rally. But of course I need an approved helmet, fireproof clothing ( Race suit ), and of course a National B license before I can race the car. The car must undergo scrutineering before it turns up at any event, so soon I'll have to pop along to my local motorsport club and find out who will be doing the scrutineering. Hopefully then I can get someone to give me some advice... :)","title":"2004 01 06 "},{"location":"v6manta/2004/2004-01-06-/#2004-01-06-2004-01-06","text":"I've been reading up on the Blue book, a making a plan for the way forward to stage rallying the manta. A few areas have now been resolved, and some new ones have arrived. I am getting Matt's ( Animal's ) 6-point cage off of him tp fit into my manta, as he is going to a full, multi-point weld-in cage. This sorts out my cage problem to get me started. Rally Design sell nearly ( if not ) everything you need for prepping your car. This month I am to buy off them the following bits... Zero 2000 2.25ltr plumbed in fire extinguisher system. \u00a385.00 +VAT Zero 2000, and AFFF are the only two valid systems for stage rallying, and according to the blue book, for clubman stage rallying all we need as a minimum is a 2.25 lltr system, plumbed in to the engine bay, and which is operated by a T-pull handle that is situated on the scuttle panel at the bottom of the windscreen. FIA approved cut-off switch. \u00a316.80+VAT This is a master electrics switch, which disables all the car electrics ( Apart from any electically operated fire extinguisher systems ) including the ignition. A resistor is provided with it so that the diodes, and ECU are protected from the Alternator load dumping. ( This is where the voltage rises from the alternator when it is running, and not attached to the battery. ) Normally the alternator voltage regulator would have a voltage clamp on it, but some don't Battery box. \u00a316.50+VAT As I want the battery situated behind the passenger seat, it needs to be sealed ( well, vented, but essentially sealed ). Mainly to prevent leakage of battery acid in an accident. Dry-gel batteries would not need to be sealed. But I will be using a standard Lead-Acid car battery. So, with those few things on order, I can get on with prepping the shell ( Mainly stich welding the shell, and seam welding the suspension turrets. ) Closing the bulkheads, etc. and with these few bits, the car will be close to being able to see it's first rally. But of course I need an approved helmet, fireproof clothing ( Race suit ), and of course a National B license before I can race the car. The car must undergo scrutineering before it turns up at any event, so soon I'll have to pop along to my local motorsport club and find out who will be doing the scrutineering. Hopefully then I can get someone to give me some advice... :)","title":"2004-01-06 - 2004-01-06"},{"location":"v6manta/2004/2004-01-07-/","text":"v6manta 2004-01-07 - 2004-01-07 \u00b6 Many thanks for your comments. I've heard comments before about these fire extinguishers not working, but also heard that Halon is no longer permitted? I'll just have to do what I can if the dreaded ever happens... :( Good point about the battery box too, hadn't thought of that one! Hopefully when I come back off holiday the car will start taking shape :)","title":"2004 01 07 "},{"location":"v6manta/2004/2004-01-07-/#2004-01-07-2004-01-07","text":"Many thanks for your comments. I've heard comments before about these fire extinguishers not working, but also heard that Halon is no longer permitted? I'll just have to do what I can if the dreaded ever happens... :( Good point about the battery box too, hadn't thought of that one! Hopefully when I come back off holiday the car will start taking shape :)","title":"2004-01-07 - 2004-01-07"},{"location":"v6manta/2004/2004-01-26-/","text":"v6manta 2004-01-26 - 2004-01-26 \u00b6 Okay, the Rally design stuff is here. They are a top company, they ship their stuff very quickly. They also sent me a hard copy of the catalogue so I don't have to just guess at the prices anymore! :p https://www.raldes.co.uk Matt's moved from the 6point cage to a multipoint weld-in ( Which is looking georgous by the way!!! ) So I've brought his old 6-point cage off of him for my car.. I've made the mounting plates for the cage to sit on in the car, and it all seems to fit in o.k. Paul (V8Chevette) mentioned a good idea of mirroring the plates, and welding the nuts onto the plate, then welding the plate to the underside of the mounting plates that are welded into the car. This means that when I box the nuts in, I can still remove and re-install the cage easily if/when the time comes that I need to do that. The doors have been strengthened a bit, and the strengthening allows an ali sheet/card to go on each door, along with a handle. The handles work out about \u00a30.80 ea! As we borrowed the plasma cutter for a bit too. I took the oppurtunity to cut out the sunroof. An ali sheet is cut to cover the whole left in the roof. This will be sealed and riveted in place. The sunroof weighs about 15kG ( est. ) so is a good bit of weight to remove from the roof. It also enables the cage to fit properly! Some may be amazed that I've actually done something too!! Door with skeleton for ali sheet/card + cage mounting point. Ali sheet over sunroof hole ( needs riveting on ) and top of cage. Note the amount of rust on the roof!! This all needs treating + protecting. I won't be re-skinning the roof with a new panel! and another of the cage in place... I have also removed the dash bar as this is no longer needed. An ali dash will be made up and fitted instead of the original dash + components.","title":"2004 01 26 "},{"location":"v6manta/2004/2004-01-26-/#2004-01-26-2004-01-26","text":"Okay, the Rally design stuff is here. They are a top company, they ship their stuff very quickly. They also sent me a hard copy of the catalogue so I don't have to just guess at the prices anymore! :p https://www.raldes.co.uk Matt's moved from the 6point cage to a multipoint weld-in ( Which is looking georgous by the way!!! ) So I've brought his old 6-point cage off of him for my car.. I've made the mounting plates for the cage to sit on in the car, and it all seems to fit in o.k. Paul (V8Chevette) mentioned a good idea of mirroring the plates, and welding the nuts onto the plate, then welding the plate to the underside of the mounting plates that are welded into the car. This means that when I box the nuts in, I can still remove and re-install the cage easily if/when the time comes that I need to do that. The doors have been strengthened a bit, and the strengthening allows an ali sheet/card to go on each door, along with a handle. The handles work out about \u00a30.80 ea! As we borrowed the plasma cutter for a bit too. I took the oppurtunity to cut out the sunroof. An ali sheet is cut to cover the whole left in the roof. This will be sealed and riveted in place. The sunroof weighs about 15kG ( est. ) so is a good bit of weight to remove from the roof. It also enables the cage to fit properly! Some may be amazed that I've actually done something too!! Door with skeleton for ali sheet/card + cage mounting point. Ali sheet over sunroof hole ( needs riveting on ) and top of cage. Note the amount of rust on the roof!! This all needs treating + protecting. I won't be re-skinning the roof with a new panel! and another of the cage in place... I have also removed the dash bar as this is no longer needed. An ali dash will be made up and fitted instead of the original dash + components.","title":"2004-01-26 - 2004-01-26"},{"location":"v6manta/2004/2004-01-29-/","text":"v6manta 2004-01-29 - 2004-01-29 \u00b6 The manta has a definate flaw in the driving position, and that is the gear position. For comfy driving I need the seat to be put quite far back ( I'm 6ft2 ). Being far back is ok as long as the steering wheel is concerned. It's still comfortable, but the gearstick is now almost out of reach, especially in 1 st and reverse. So I've decided to bring it much closer to me, and put it higher up, but with less throw than the original stick, as it moves about 5in between 1 st and 2 nd . I've started on the gear linkage, which begins with the stick. It has adjustable throw, and is a slightly more basic copy of an item that Audi used to use in all of their cars. I do need to get a linear bearing for the shell though, which I have sourced for about \u00a330.. sorry it's a bit blurry, but you get the idea. The pivot point is around the bottom spherical bearing. The clevis is linked to a another clevis, which in turn fixes to a fixed pole that comes up from the shaft passing through the linear bearing on the shell. I'll dig out some imagery from the Audi cars to make it a bit plainer.. This should make driving the car a whole load more comfy than I ever found it!!","title":"2004 01 29 "},{"location":"v6manta/2004/2004-01-29-/#2004-01-29-2004-01-29","text":"The manta has a definate flaw in the driving position, and that is the gear position. For comfy driving I need the seat to be put quite far back ( I'm 6ft2 ). Being far back is ok as long as the steering wheel is concerned. It's still comfortable, but the gearstick is now almost out of reach, especially in 1 st and reverse. So I've decided to bring it much closer to me, and put it higher up, but with less throw than the original stick, as it moves about 5in between 1 st and 2 nd . I've started on the gear linkage, which begins with the stick. It has adjustable throw, and is a slightly more basic copy of an item that Audi used to use in all of their cars. I do need to get a linear bearing for the shell though, which I have sourced for about \u00a330.. sorry it's a bit blurry, but you get the idea. The pivot point is around the bottom spherical bearing. The clevis is linked to a another clevis, which in turn fixes to a fixed pole that comes up from the shaft passing through the linear bearing on the shell. I'll dig out some imagery from the Audi cars to make it a bit plainer.. This should make driving the car a whole load more comfy than I ever found it!!","title":"2004-01-29 - 2004-01-29"},{"location":"v6manta/2004/2004-02-09-/","text":"v6manta 2004-02-09 - 2004-02-09 \u00b6 Well, getting pictures of the Audi quattro linkage was doomed to failure! so you'll have to use your imaginations for now, until I've fitted it all to the car. The driving position is good now. The seat is quite far back, and bringing the steering wheel down has improved the steering wheel grip and provided a comfortable position. The gearstick needs to come back about 8in or so The cage mounting points are now fully fastened. The M10 nuts are welded to plates underneath the main spreader plates. Both the main spread plate, and the nut plates are plug welded together. This means that when the spreader plates are boxed off down to the floor, the cage can still be removed if needed. I have also started the chassis preperation. The strut towers are being stitch welded top and bottom to the inner wing, and the inner wing is being stitch welded to the chassis leg to strengthen this area for rallying I have mounted the pull handles for the fire extinguisher and battery cut-off. These I have mounted on the slam panel, recessed down, as suggested by Paul ( V8 Chevette ) in order to stop branches, etc. pulling the handles by accident! Finally, I have sealed the front bulkhead. I seamwelded plates over the larger holes, and the smaller holes I simply plug welded some washers on to seal most of the bulkheadup","title":"2004 02 09 "},{"location":"v6manta/2004/2004-02-09-/#2004-02-09-2004-02-09","text":"Well, getting pictures of the Audi quattro linkage was doomed to failure! so you'll have to use your imaginations for now, until I've fitted it all to the car. The driving position is good now. The seat is quite far back, and bringing the steering wheel down has improved the steering wheel grip and provided a comfortable position. The gearstick needs to come back about 8in or so The cage mounting points are now fully fastened. The M10 nuts are welded to plates underneath the main spreader plates. Both the main spread plate, and the nut plates are plug welded together. This means that when the spreader plates are boxed off down to the floor, the cage can still be removed if needed. I have also started the chassis preperation. The strut towers are being stitch welded top and bottom to the inner wing, and the inner wing is being stitch welded to the chassis leg to strengthen this area for rallying I have mounted the pull handles for the fire extinguisher and battery cut-off. These I have mounted on the slam panel, recessed down, as suggested by Paul ( V8 Chevette ) in order to stop branches, etc. pulling the handles by accident! Finally, I have sealed the front bulkhead. I seamwelded plates over the larger holes, and the smaller holes I simply plug welded some washers on to seal most of the bulkheadup","title":"2004-02-09 - 2004-02-09"},{"location":"v6manta/2004/2004-02-13-/","text":"v6manta 2004-02-13 - 2004-02-13 \u00b6 Hi Mantatastic, There is no mention in the blue book about the sunroof material being the same material as the roof as far as I can see. Someone's borrowing it at the moment, but I'll have to read it again, as this was also mentioned on https://www.stage-rally.co.uk so there must be something to that. I know what you are saying about the coilovers and the the inner wings, however someone I know does rally successfully with Avo coilovers on in the standard damper position with a seam welded shell, and does not appear to have suffered any ill effects. Having said that, Matt ( Animal ) was moaning at me the other day for saying that was my plan!! It just enables me to try out different poundages of springs easy, and also have a good play with different ride heights. I appreciate that they are used widely, but a set of fixed shocks isn't for me I don't think. For a start, I won't be running the heavy-as-anything CIH lump, so already the weight distribution is very different to what it would be. I'm still undecided at the moment, and I will check the sunroof thing at the weekend to see EXACLTY what the blue book specifies. I should upload the stage rally section of the blue book really as a reference page for the site. Many thanks for the input!","title":"2004 02 13 "},{"location":"v6manta/2004/2004-02-13-/#2004-02-13-2004-02-13","text":"Hi Mantatastic, There is no mention in the blue book about the sunroof material being the same material as the roof as far as I can see. Someone's borrowing it at the moment, but I'll have to read it again, as this was also mentioned on https://www.stage-rally.co.uk so there must be something to that. I know what you are saying about the coilovers and the the inner wings, however someone I know does rally successfully with Avo coilovers on in the standard damper position with a seam welded shell, and does not appear to have suffered any ill effects. Having said that, Matt ( Animal ) was moaning at me the other day for saying that was my plan!! It just enables me to try out different poundages of springs easy, and also have a good play with different ride heights. I appreciate that they are used widely, but a set of fixed shocks isn't for me I don't think. For a start, I won't be running the heavy-as-anything CIH lump, so already the weight distribution is very different to what it would be. I'm still undecided at the moment, and I will check the sunroof thing at the weekend to see EXACLTY what the blue book specifies. I should upload the stage rally section of the blue book really as a reference page for the site. Many thanks for the input!","title":"2004-02-13 - 2004-02-13"},{"location":"v6manta/2004/2004-02-19-/","text":"v6manta 2004-02-19 - 2004-02-19 \u00b6 Hi Mantatastic, Thanks for the words of wisdom! 8) Some more bits of progress: The steering column is virtually where I want it now, but I need to mount the seat, put the pedals back in, and mount the gearstick in order to finalise the position. I've moved the steering wheel to the passenger side slightly to give my accelerator leg some more room... I've also prepped the rear to accept an ali sheet as the rear bulkhead. There's plenty more holes to fill up with fibreglass and weld though... The other side is now stitch welded too, although some parts I have seamed on, like the anti-roll bar mountings..","title":"2004 02 19 "},{"location":"v6manta/2004/2004-02-19-/#2004-02-19-2004-02-19","text":"Hi Mantatastic, Thanks for the words of wisdom! 8) Some more bits of progress: The steering column is virtually where I want it now, but I need to mount the seat, put the pedals back in, and mount the gearstick in order to finalise the position. I've moved the steering wheel to the passenger side slightly to give my accelerator leg some more room... I've also prepped the rear to accept an ali sheet as the rear bulkhead. There's plenty more holes to fill up with fibreglass and weld though... The other side is now stitch welded too, although some parts I have seamed on, like the anti-roll bar mountings..","title":"2004-02-19 - 2004-02-19"},{"location":"v6manta/2004/2004-04-20-finally-got-around-to-the-manta/","text":"v6manta 2004-04-20 - 2004-04-20 Finally got around to the manta \u00b6 I have finished the cage supports, which now look a lot stonger than a single peice of 3mm steel! All the cage supports are made from 3mm steel. Sorry about the poor photographs, the light in the car is poor.. For some reason, the cutting of the bits went really well. Originally I thought that this would be a nightmare, but it proved to be pretty easy after all, and the shell seemed strong enough to get a good weld too. Previously, the sills would have holes blown in them every five minutes! I also patched the sunroof with some ali. I will bead arouind it with silicon sealant, but not yet, as I have a roof vent I want to add to it. 8) coming along nicely now... I have measured up the dash, so I can start that soon.","title":"2004 04 20 finally got around to the manta"},{"location":"v6manta/2004/2004-04-20-finally-got-around-to-the-manta/#2004-04-20-2004-04-20-finally-got-around-to-the-manta","text":"I have finished the cage supports, which now look a lot stonger than a single peice of 3mm steel! All the cage supports are made from 3mm steel. Sorry about the poor photographs, the light in the car is poor.. For some reason, the cutting of the bits went really well. Originally I thought that this would be a nightmare, but it proved to be pretty easy after all, and the shell seemed strong enough to get a good weld too. Previously, the sills would have holes blown in them every five minutes! I also patched the sunroof with some ali. I will bead arouind it with silicon sealant, but not yet, as I have a roof vent I want to add to it. 8) coming along nicely now... I have measured up the dash, so I can start that soon.","title":"2004-04-20 - 2004-04-20 Finally got around to the manta"},{"location":"v6manta/2004/2004-06-17-/","text":"v6manta 2004-06-17 - 2004-06-17 \u00b6 Hi People, Sorry for the lack of updates lately, been having a bit of a break and fixing the MR2 up so that it's happy on the road again, along with everything else that's been taking up my time. I've been planning the engine rebuild, and there are now only a couple of bits left to get to enable me to rebuild the bottom end. They are: ARP head stud kit Z20LET head gasket Omega ring sets ( x2 pistons ) Shot peen rods ( got a local company sorted ready to do them ) Core plugs whacked back in ( only one more to do actually ) I intend to chemically dip the block now as it's been up the garage and has been covered in WD40 to prevent it from corroding. I'd like to make sure that the oil ways are clean before I go ahead and start the build. The engine will then be stored at my house instead of the garage to keep it clean and away from corrosive condensation. The head build will be a little while off yet. I have designed some TBs that I want made up as I have decided to move away from my cut carbs plan. This is just due to me not liking how the carbs have turned out. If I did it again, I would do it in a different way with the carbs... The drivers seat was mounted, but deemed too close to the cage, and so needs to be moved towards the tunnel more, and will be tilted towards the centre of the car slightly compared to where is started to prevent me from banging my head on the cage bar!! The rear bulkhead panel has been made and fitted too, although the parcel shelf requires quite a few holes to be filled to make it 'liquid' tight to comply with the regs. I need to get hold of some aluminum sheet so that I can do the door cards and rear \u00bc cards, etc.. I'll also be making the dash out of some ali too. I've got all this weekend to work on it, so hopefully I can press on and get the shell almost there. I have lightened the boot too, and that will be pinned in place with a fibreglass 400 spoiler attached. The rubber standard spoiler weighs loads!! Brian.","title":"2004 06 17 "},{"location":"v6manta/2004/2004-06-17-/#2004-06-17-2004-06-17","text":"Hi People, Sorry for the lack of updates lately, been having a bit of a break and fixing the MR2 up so that it's happy on the road again, along with everything else that's been taking up my time. I've been planning the engine rebuild, and there are now only a couple of bits left to get to enable me to rebuild the bottom end. They are: ARP head stud kit Z20LET head gasket Omega ring sets ( x2 pistons ) Shot peen rods ( got a local company sorted ready to do them ) Core plugs whacked back in ( only one more to do actually ) I intend to chemically dip the block now as it's been up the garage and has been covered in WD40 to prevent it from corroding. I'd like to make sure that the oil ways are clean before I go ahead and start the build. The engine will then be stored at my house instead of the garage to keep it clean and away from corrosive condensation. The head build will be a little while off yet. I have designed some TBs that I want made up as I have decided to move away from my cut carbs plan. This is just due to me not liking how the carbs have turned out. If I did it again, I would do it in a different way with the carbs... The drivers seat was mounted, but deemed too close to the cage, and so needs to be moved towards the tunnel more, and will be tilted towards the centre of the car slightly compared to where is started to prevent me from banging my head on the cage bar!! The rear bulkhead panel has been made and fitted too, although the parcel shelf requires quite a few holes to be filled to make it 'liquid' tight to comply with the regs. I need to get hold of some aluminum sheet so that I can do the door cards and rear \u00bc cards, etc.. I'll also be making the dash out of some ali too. I've got all this weekend to work on it, so hopefully I can press on and get the shell almost there. I have lightened the boot too, and that will be pinned in place with a fibreglass 400 spoiler attached. The rubber standard spoiler weighs loads!! Brian.","title":"2004-06-17 - 2004-06-17"},{"location":"v6manta/2004/2004-06-18-/","text":"v6manta 2004-06-18 - 2004-06-18 \u00b6 Well, I managed to get up the garage finally to do some work on the manta. Though all I did was mount the fire extinguisher cables where they would still be able to reach the extinguisher and somewhere the driver and passenger can pull it! ;) The rest of the time was spent tidying up the previous mess I'd left there! lol. some photos of the manta: The bonnet pins are now in place, just a few adjustments to make to sit the bonnet at the right height towards the rear of the bonnet. The boot weighs a tonne, so the rubber spoiler is in the bin, and so is the inner skin of the boot along with the lock. The boot skin will be pinned in position and have a fibreglass 400 3-peice spoiler on instead.. The drivers seat has been mounted, but then had to be moved slightly so that I don't hit my head on the bloody cage!! Still, it's in it's final position now, so I can remount it and use the mounts I had already done to do this. So hopefully this weekend we'll make some decent progress on the old girl!! 8)","title":"2004 06 18 "},{"location":"v6manta/2004/2004-06-18-/#2004-06-18-2004-06-18","text":"Well, I managed to get up the garage finally to do some work on the manta. Though all I did was mount the fire extinguisher cables where they would still be able to reach the extinguisher and somewhere the driver and passenger can pull it! ;) The rest of the time was spent tidying up the previous mess I'd left there! lol. some photos of the manta: The bonnet pins are now in place, just a few adjustments to make to sit the bonnet at the right height towards the rear of the bonnet. The boot weighs a tonne, so the rubber spoiler is in the bin, and so is the inner skin of the boot along with the lock. The boot skin will be pinned in position and have a fibreglass 400 3-peice spoiler on instead.. The drivers seat has been mounted, but then had to be moved slightly so that I don't hit my head on the bloody cage!! Still, it's in it's final position now, so I can remount it and use the mounts I had already done to do this. So hopefully this weekend we'll make some decent progress on the old girl!! 8)","title":"2004-06-18 - 2004-06-18"},{"location":"v6manta/2004/2004-06-21-/","text":"v6manta 2004-06-21 - 2004-06-21 \u00b6 lol, the gearstick requires a lot more work yet! I made a start on the dash at the weekend, and started filling all the little bits that are open on the rear bulkhead. There's sooooo many holes and gaps in that thing. It's time I got some decent fire retardant sealer I think.. I've also made templates for the rear \u00bcs to make some polycarb windows, and some rear quater panels for the inside, which I'll cut out of ally and rivet/seal on... It's nice just driving the MR2 as the get me somewhere car again rather than it giving me grief all the time! Metal folder for bending up the dash parts... 8) I knew Matt's old TIG trolley would come in useful one day... The dash will now get a metal frame behind it to add some strength and give me something to bolt it too. There are a couple more panels to make, but the metal folder worked very well! ( After I stopped burning myself on it after welding it together! :( ) The cage is back out now, so I can weld in the final 3mm spread plates for the rear arches, and tidy up/prime and seal the roof. Once that's done I can put the cage back in and do the harness bar.","title":"2004 06 21 "},{"location":"v6manta/2004/2004-06-21-/#2004-06-21-2004-06-21","text":"lol, the gearstick requires a lot more work yet! I made a start on the dash at the weekend, and started filling all the little bits that are open on the rear bulkhead. There's sooooo many holes and gaps in that thing. It's time I got some decent fire retardant sealer I think.. I've also made templates for the rear \u00bcs to make some polycarb windows, and some rear quater panels for the inside, which I'll cut out of ally and rivet/seal on... It's nice just driving the MR2 as the get me somewhere car again rather than it giving me grief all the time! Metal folder for bending up the dash parts... 8) I knew Matt's old TIG trolley would come in useful one day... The dash will now get a metal frame behind it to add some strength and give me something to bolt it too. There are a couple more panels to make, but the metal folder worked very well! ( After I stopped burning myself on it after welding it together! :( ) The cage is back out now, so I can weld in the final 3mm spread plates for the rear arches, and tidy up/prime and seal the roof. Once that's done I can put the cage back in and do the harness bar.","title":"2004-06-21 - 2004-06-21"},{"location":"v6manta/2004/2004-07-26-/","text":"v6manta 2004-07-26 - 2004-07-26 \u00b6 Right then, that dash start is back out. I'll be running a set of Yamaha R1 clocks, so the need for a dash has gone. The switch panel will be adjusted to provide the switches just in front of where the gear linkage passes through into the transmission tunnel. I've made a harness bar which will be welded between the rear stays of the cage. It's made of 28mm CDS. Looks good actually, as it looks like it's meant to be there! The drivers seat has been moved so that I don't hit my head on the cage!! That was a bit of a turd finding out that after mounting the seat! lol The subframe's back on ready to take the engine + gearbox again so that I can finish my gear linkage too. Also I've been tidying up the bodywork a bit, although the chassis legs are next on the list! :( I made a quick table of what I need to get for the car and the engine, with rough guestimate pricing too. I'm sure there's plenty I've forgotton to put on there too! lol But it shows that I need to be putting more money towards the Manta to get further, and it's money I don't really have at the moment. One day this thing will see the road! It's already taken far longer than I anticipated...","title":"2004 07 26 "},{"location":"v6manta/2004/2004-07-26-/#2004-07-26-2004-07-26","text":"Right then, that dash start is back out. I'll be running a set of Yamaha R1 clocks, so the need for a dash has gone. The switch panel will be adjusted to provide the switches just in front of where the gear linkage passes through into the transmission tunnel. I've made a harness bar which will be welded between the rear stays of the cage. It's made of 28mm CDS. Looks good actually, as it looks like it's meant to be there! The drivers seat has been moved so that I don't hit my head on the cage!! That was a bit of a turd finding out that after mounting the seat! lol The subframe's back on ready to take the engine + gearbox again so that I can finish my gear linkage too. Also I've been tidying up the bodywork a bit, although the chassis legs are next on the list! :( I made a quick table of what I need to get for the car and the engine, with rough guestimate pricing too. I'm sure there's plenty I've forgotton to put on there too! lol But it shows that I need to be putting more money towards the Manta to get further, and it's money I don't really have at the moment. One day this thing will see the road! It's already taken far longer than I anticipated...","title":"2004-07-26 - 2004-07-26"},{"location":"v6manta/2004/2004-08-09-/","text":"v6manta 2004-08-09 - 2004-08-09 \u00b6 :roll: that should read 38mm CDS for the harness bar, not 28! now, I've ordered my fuel lines and fittings, as I'll have to route them through the car and fix the bulkhead fittings. The boot is being ditched, and I'll run a fibreglass copy from smith and deakin, which comes with the 400 3-peice spoiler. I would love to 400 arch it at this point, but I don't really know whether it's worth it on this build. I certainly want it done, but maybe not at this early stage as I would like to get the manta on the road as soon as possible, and I have to afford a snowboarding holiday in the new year and other trips around the country soon! The engine is mounted to the subframe now, and the gearbox is in place to finish off my gear linkage. Then I'll finally see if it works or not. If the concept seems to work ok, then I'll get some spare ali billet and machine it up properly. The subframe is also being modified, and I have started by removing the bump stop towers. I am planning on running coilovers from the bottom wishbones, and replacing the top wishbones with something different to allow them to go around the coilover bodies. This maintains the stress of the spring through the bottom ball joint, which looks a lot beefier than the top ball joint!! Unfortunately I can't find my digital camera at the moment, but as soon as I do I will be able to get some pictures up of how it's coming along.","title":"2004 08 09 "},{"location":"v6manta/2004/2004-08-09-/#2004-08-09-2004-08-09","text":":roll: that should read 38mm CDS for the harness bar, not 28! now, I've ordered my fuel lines and fittings, as I'll have to route them through the car and fix the bulkhead fittings. The boot is being ditched, and I'll run a fibreglass copy from smith and deakin, which comes with the 400 3-peice spoiler. I would love to 400 arch it at this point, but I don't really know whether it's worth it on this build. I certainly want it done, but maybe not at this early stage as I would like to get the manta on the road as soon as possible, and I have to afford a snowboarding holiday in the new year and other trips around the country soon! The engine is mounted to the subframe now, and the gearbox is in place to finish off my gear linkage. Then I'll finally see if it works or not. If the concept seems to work ok, then I'll get some spare ali billet and machine it up properly. The subframe is also being modified, and I have started by removing the bump stop towers. I am planning on running coilovers from the bottom wishbones, and replacing the top wishbones with something different to allow them to go around the coilover bodies. This maintains the stress of the spring through the bottom ball joint, which looks a lot beefier than the top ball joint!! Unfortunately I can't find my digital camera at the moment, but as soon as I do I will be able to get some pictures up of how it's coming along.","title":"2004-08-09 - 2004-08-09"},{"location":"v6manta/2004/2004-08-10-/","text":"v6manta 2004-08-10 - 2004-08-10 \u00b6 hmmm, that's an interesting setup Yeha! Thanks for that. Doesn't look like a manta subframe at all though. Even how it mounts to the chassis seems to be different ( no bad thing I guess! lol ) My fuel pressure gauge arrived today for the manta. Looks cool. Just waiting for the fuel hose + fittings to arrive now, and then I can get on with routing that lot through the car. Not many free weekends coming up though :(","title":"2004 08 10 "},{"location":"v6manta/2004/2004-08-10-/#2004-08-10-2004-08-10","text":"hmmm, that's an interesting setup Yeha! Thanks for that. Doesn't look like a manta subframe at all though. Even how it mounts to the chassis seems to be different ( no bad thing I guess! lol ) My fuel pressure gauge arrived today for the manta. Looks cool. Just waiting for the fuel hose + fittings to arrive now, and then I can get on with routing that lot through the car. Not many free weekends coming up though :(","title":"2004-08-10 - 2004-08-10"},{"location":"v6manta/2004/2004-09-03-/","text":"v6manta 2004-09-03 - 2004-09-03 \u00b6 Right, I popped the fuel lines in around about where I think they'll end up going. The spaces are filling up quick. I can't take it down the passenger side of the tunnel, as the vertical handbrake will be taking up a lot of room around there. Still, I reckon they're probably ok where they are positioned now. The gear shifter principle works fine, I just need to machine something up properly now. The billets for that arrived earlier last week. Coming along, slowly but surely. The harness bar is only tacked in place at the moment, and the rear diagonal is out of place at the mo too ;)","title":"2004 09 03 "},{"location":"v6manta/2004/2004-09-03-/#2004-09-03-2004-09-03","text":"Right, I popped the fuel lines in around about where I think they'll end up going. The spaces are filling up quick. I can't take it down the passenger side of the tunnel, as the vertical handbrake will be taking up a lot of room around there. Still, I reckon they're probably ok where they are positioned now. The gear shifter principle works fine, I just need to machine something up properly now. The billets for that arrived earlier last week. Coming along, slowly but surely. The harness bar is only tacked in place at the moment, and the rear diagonal is out of place at the mo too ;)","title":"2004-09-03 - 2004-09-03"},{"location":"v6manta/2004/2004-09-27-/","text":"v6manta 2004-09-27 - 2004-09-27 \u00b6 A few more pics. One of the door frames is done to accept a perspex window, and the passenger seat is now mounted. I am going to mount the drivers seat on rails too, as putting it slightly higher up allows me to get the seat closer in towards the tunnel, which then clears my head better from the cage. I can tilt the seat back a bit to move my head down too.","title":"2004 09 27 "},{"location":"v6manta/2004/2004-09-27-/#2004-09-27-2004-09-27","text":"A few more pics. One of the door frames is done to accept a perspex window, and the passenger seat is now mounted. I am going to mount the drivers seat on rails too, as putting it slightly higher up allows me to get the seat closer in towards the tunnel, which then clears my head better from the cage. I can tilt the seat back a bit to move my head down too.","title":"2004-09-27 - 2004-09-27"},{"location":"v6manta/2004/2004-10-07-/","text":"v6manta 2004-10-07 - 2004-10-07 \u00b6 woohoo, Been ages since I brought anything for the engine really... 8) Now I am set back by the amount of time it'll take to get the funds together for a solid valve train! :(","title":"2004 10 07 "},{"location":"v6manta/2004/2004-10-07-/#2004-10-07-2004-10-07","text":"woohoo, Been ages since I brought anything for the engine really... 8) Now I am set back by the amount of time it'll take to get the funds together for a solid valve train! :(","title":"2004-10-07 - 2004-10-07"},{"location":"v6manta/2004/2004-10-08-/","text":"v6manta 2004-10-08 - 2004-10-08 \u00b6 pmsl... I cannot get an accurate enough reading with the old calipers. I've chucked them in the head that's here. I'll get Lee to bring his dial gauge around on Saturday and whilst eating a McD's breakfast we'll measure the lift and duration. The guy that sold them is very honest, and the engine came out of a Darrian tarmac rally car, which was sold to them by SBD :) So it's likely that everything is cool and dandy! :D","title":"2004 10 08 "},{"location":"v6manta/2004/2004-10-08-/#2004-10-08-2004-10-08","text":"pmsl... I cannot get an accurate enough reading with the old calipers. I've chucked them in the head that's here. I'll get Lee to bring his dial gauge around on Saturday and whilst eating a McD's breakfast we'll measure the lift and duration. The guy that sold them is very honest, and the engine came out of a Darrian tarmac rally car, which was sold to them by SBD :) So it's likely that everything is cool and dandy! :D","title":"2004-10-08 - 2004-10-08"},{"location":"v6manta/2004/2004-10-11-/","text":"v6manta 2004-10-11 - 2004-10-11 \u00b6 Yeah, bit of a bargain! :D All measured up fine at the garage lift-wise. I took a duration reading too, just need to print an angle gauge today to read the durations off the cam pulleys! Everythings looking cool though. 8)","title":"2004 10 11 "},{"location":"v6manta/2004/2004-10-11-/#2004-10-11-2004-10-11","text":"Yeah, bit of a bargain! :D All measured up fine at the garage lift-wise. I took a duration reading too, just need to print an angle gauge today to read the durations off the cam pulleys! Everythings looking cool though. 8)","title":"2004-10-11 - 2004-10-11"},{"location":"v6manta/2004/2004-10-13-/","text":"v6manta 2004-10-13 - 2004-10-13 \u00b6 Made my gear linkage bottom part, which will bolt to a small tower on the tunnel and hold the gear stick. Just need to work out a nice way to make a clevis arrangement to the round bar that is the gear stick, and then the gearshift will be nearly finished! ;) Bearing is from https://www.trackstore.co.uk and cost \u00a38.50 ! It's fine for this sort of job. Although, don't press the bearing in with the spherical part, or you'll just end up cracking the case. Especially if you whack the flypress on to it! ;) ( I speak from experience of course! ) Made some blanking aluminum plates for various bits of the manta, and riveted them in place. However, I also borrowed a mates clinchnut tool, now they rock. Got one on order now from https://www.orbitalfasteners.co.uk so we should see millions of panels suddenly get bolted on! ;) It'll be great for putting fixings in place for fibreglass panels, etc. Next on the list is a master cylinder for a hydraulic handbrake. Stainless brake lines and M10x1 fittings to do the brake lines. Get the Emerald up and running, as I haven't done that yet since I brought it moons ago! Need a fibreglass 400 boot, and I could also do with some suepsnion soon. So we've almost hit a money point. I'll probably wait until I have the money to buy it all at once, and do it like that. In the mean time it looks like the MR2 will keep me out of trouble for a bit. Roll on next years snowboarding holiday though! :D","title":"2004 10 13 "},{"location":"v6manta/2004/2004-10-13-/#2004-10-13-2004-10-13","text":"Made my gear linkage bottom part, which will bolt to a small tower on the tunnel and hold the gear stick. Just need to work out a nice way to make a clevis arrangement to the round bar that is the gear stick, and then the gearshift will be nearly finished! ;) Bearing is from https://www.trackstore.co.uk and cost \u00a38.50 ! It's fine for this sort of job. Although, don't press the bearing in with the spherical part, or you'll just end up cracking the case. Especially if you whack the flypress on to it! ;) ( I speak from experience of course! ) Made some blanking aluminum plates for various bits of the manta, and riveted them in place. However, I also borrowed a mates clinchnut tool, now they rock. Got one on order now from https://www.orbitalfasteners.co.uk so we should see millions of panels suddenly get bolted on! ;) It'll be great for putting fixings in place for fibreglass panels, etc. Next on the list is a master cylinder for a hydraulic handbrake. Stainless brake lines and M10x1 fittings to do the brake lines. Get the Emerald up and running, as I haven't done that yet since I brought it moons ago! Need a fibreglass 400 boot, and I could also do with some suepsnion soon. So we've almost hit a money point. I'll probably wait until I have the money to buy it all at once, and do it like that. In the mean time it looks like the MR2 will keep me out of trouble for a bit. Roll on next years snowboarding holiday though! :D","title":"2004-10-13 - 2004-10-13"},{"location":"v6manta/2004/2004-10-15-/","text":"v6manta 2004-10-15 - 2004-10-15 \u00b6 Rob, I'd be bored if I had nothing to make! Mine will be vertical, on the drivers side of the tunnel I reckon, depends where everything wants to be when the gearsticks done... Christian, Here you can compete in rallying, even with a fully customised space-framed car if you can get it approved. I forget which class I would be in with the 20XE in the Manta, but it's a fairly standard class, nothing too major. I'm also not too fussed about being competitive to begin with, I just want to go and scare Animal, who'll be in the passenger seat! 8)","title":"2004 10 15 "},{"location":"v6manta/2004/2004-10-15-/#2004-10-15-2004-10-15","text":"Rob, I'd be bored if I had nothing to make! Mine will be vertical, on the drivers side of the tunnel I reckon, depends where everything wants to be when the gearsticks done... Christian, Here you can compete in rallying, even with a fully customised space-framed car if you can get it approved. I forget which class I would be in with the 20XE in the Manta, but it's a fairly standard class, nothing too major. I'm also not too fussed about being competitive to begin with, I just want to go and scare Animal, who'll be in the passenger seat! 8)","title":"2004-10-15 - 2004-10-15"},{"location":"v6manta/2004/2004-10-18-/","text":"v6manta 2004-10-18 - 2004-10-18 \u00b6 lol, true. Have to have a navigator for stage rallying rob! For hillclimbs and sprints I can remove the passenger seat in a few minutes, so not too bothered about that ;)","title":"2004 10 18 "},{"location":"v6manta/2004/2004-10-18-/#2004-10-18-2004-10-18","text":"lol, true. Have to have a navigator for stage rallying rob! For hillclimbs and sprints I can remove the passenger seat in a few minutes, so not too bothered about that ;)","title":"2004-10-18 - 2004-10-18"},{"location":"v6manta/2004/2004-10-21-/","text":"v6manta 2004-10-21 - 2004-10-21 \u00b6 Gearlever is nearly complete! :D The grip is soft rubber, so won't slip out of my hand when I reach for it. That's the only trouble I see with using something that's a straight cylinder. There's a bit of welding to do in order that the pieces are all put together, but I really need to be up the garage for a trial fitting to see how long the 'gymbal' needs to be. If it's not right the gearstick won't be centrally mounted in the bearing in neutral. It would have been nice to have done an adjustable version, but it was hard enough coming up with something that won't break and isn't adjustable! Ah well, can't wait until the MR2 is back on the road, and then I can get up the garage and do some real stuff on the Manta.","title":"2004 10 21 "},{"location":"v6manta/2004/2004-10-21-/#2004-10-21-2004-10-21","text":"Gearlever is nearly complete! :D The grip is soft rubber, so won't slip out of my hand when I reach for it. That's the only trouble I see with using something that's a straight cylinder. There's a bit of welding to do in order that the pieces are all put together, but I really need to be up the garage for a trial fitting to see how long the 'gymbal' needs to be. If it's not right the gearstick won't be centrally mounted in the bearing in neutral. It would have been nice to have done an adjustable version, but it was hard enough coming up with something that won't break and isn't adjustable! Ah well, can't wait until the MR2 is back on the road, and then I can get up the garage and do some real stuff on the Manta.","title":"2004-10-21 - 2004-10-21"},{"location":"v6manta/2004/2004-10-22-/","text":"v6manta 2004-10-22 - 2004-10-22 \u00b6 Yep, that's what I modeled it on!","title":"2004 10 22 "},{"location":"v6manta/2004/2004-10-22-/#2004-10-22-2004-10-22","text":"Yep, that's what I modeled it on!","title":"2004-10-22 - 2004-10-22"},{"location":"v6manta/2004/2004-10-29-/","text":"v6manta 2004-10-29 - 2004-10-29 \u00b6 Lol, that's what happens when you've got no spare cash and you want to do your car. You end up just talking about it and writing about it instead of actually doing much!","title":"2004 10 29 "},{"location":"v6manta/2004/2004-10-29-/#2004-10-29-2004-10-29","text":"Lol, that's what happens when you've got no spare cash and you want to do your car. You end up just talking about it and writing about it instead of actually doing much!","title":"2004-10-29 - 2004-10-29"},{"location":"v6manta/2004/2004-11-01-/","text":"v6manta 2004-11-01 - 2004-11-01 \u00b6 As I forgot a load of the -6JIC fittings that I was meant to get from my last order, I have got hold of some more. I managed to find that Nick Skidmore on racecar had a load for sale at a good price, and got the last stock that he had. Here they are: Hopefully now I have enough fittings to do everything. This way I can -6 the fuel pumps, and rails, etc. They were well priced because they have been used. But then again, these are re-usable fittings!","title":"2004 11 01 "},{"location":"v6manta/2004/2004-11-01-/#2004-11-01-2004-11-01","text":"As I forgot a load of the -6JIC fittings that I was meant to get from my last order, I have got hold of some more. I managed to find that Nick Skidmore on racecar had a load for sale at a good price, and got the last stock that he had. Here they are: Hopefully now I have enough fittings to do everything. This way I can -6 the fuel pumps, and rails, etc. They were well priced because they have been used. But then again, these are re-usable fittings!","title":"2004-11-01 - 2004-11-01"},{"location":"v6manta/2004/2004-12-10-were-back/","text":"v6manta 2004-12-10 - 2004-12-10 Were back \u00b6 The Manta's been on the back burner for while as every list I made for finishing it off made it seem like it would cost a fortune and take forever! We're back on track now, although I guess not that much has changed! The gearstick nears completion as it's positioned into a comfy position ;) It'll be welded on this weekend, and hopefully I should be able to test it out to make sure I can actually change gears with it! I've also changed the straight -6 fittings on the bulkhead for 90deg ones, and they work a lot better. Next time I'll remember that the nuts on the fittings are the same, and I could have just unscrewed the straights and screwed on the 90deg's! D'oh! Next on the list of things to get is a Corsa EPS Column. This can then be fitted, and so can the basics of the hydraulic handbrake too, which will be behind the steering wheel :D Having seen that done, it has to be the way to go. It'll also stop Animal trying to slow me down by keeping it on all the time if he can't reach it when he's harnessed in! :P I have also got the perspex for my windows now. All I need to do is get some plywood to make templates for routing the windows. Then I'll just seal and rivet them in place. Should do the job.","title":"2004 12 10 were back"},{"location":"v6manta/2004/2004-12-10-were-back/#2004-12-10-2004-12-10-were-back","text":"The Manta's been on the back burner for while as every list I made for finishing it off made it seem like it would cost a fortune and take forever! We're back on track now, although I guess not that much has changed! The gearstick nears completion as it's positioned into a comfy position ;) It'll be welded on this weekend, and hopefully I should be able to test it out to make sure I can actually change gears with it! I've also changed the straight -6 fittings on the bulkhead for 90deg ones, and they work a lot better. Next time I'll remember that the nuts on the fittings are the same, and I could have just unscrewed the straights and screwed on the 90deg's! D'oh! Next on the list of things to get is a Corsa EPS Column. This can then be fitted, and so can the basics of the hydraulic handbrake too, which will be behind the steering wheel :D Having seen that done, it has to be the way to go. It'll also stop Animal trying to slow me down by keeping it on all the time if he can't reach it when he's harnessed in! :P I have also got the perspex for my windows now. All I need to do is get some plywood to make templates for routing the windows. Then I'll just seal and rivet them in place. Should do the job.","title":"2004-12-10 - 2004-12-10 Were back"},{"location":"v6manta/2005/2005-05-16-/","text":"v6manta 2005-05-16 - 2005-05-16 \u00b6 I've done pretty much nothing on the Manta for ages, but I've had a lot on. It's been nice to just leave it in the garage and know that I can come back to it when I'm ready. In the summer the manta should get a load of stuff done, and hopefully come close to completion, if not even complete!!","title":"2005 05 16 "},{"location":"v6manta/2005/2005-05-16-/#2005-05-16-2005-05-16","text":"I've done pretty much nothing on the Manta for ages, but I've had a lot on. It's been nice to just leave it in the garage and know that I can come back to it when I'm ready. In the summer the manta should get a load of stuff done, and hopefully come close to completion, if not even complete!!","title":"2005-05-16 - 2005-05-16"},{"location":"v6manta/2005/2005-08-04-done-something/","text":"v6manta 2005-08-04 - 2005-08-04 Done something \u00b6 Well, I've found and fitted a Corsa EPS system out of a 2001 Corsa. I have to design and build a control device to allow me to vary the amount of assistance it will deliver vs. the speed I'm going. I'd like it to not assist at higher speeds, unless of course I'm too weedy to be able to steer! The column is mounted to the crossmember on the front bulkhead which has had 3mm reinforcing plates welded on to add strength. The column is mounted at the front, and at the rear with M8 socket cap screws, so I imagine it's not going to fall off in a hurry or come off in my hand! The driving position is good, and I have taken out my old seat mounting points and replaced them with seat rails that go across the floor pan. I feel happier sitting on rails that I did with the other solution I had. I now have most of what I need for the braking system too. I have 10m of stainless reinforced line, and plently of fittings. I've also got a remote master cylinder for the hydraulic handbrake. I will keep the cable handbrake too, purely for ease of mot purposes. Here's the column: And now that I have a new job, I hope I can press on a lot quicker with the project and get it finished and on the road by next Jan or Feb... :)","title":"2005 08 04 done something"},{"location":"v6manta/2005/2005-08-04-done-something/#2005-08-04-2005-08-04-done-something","text":"Well, I've found and fitted a Corsa EPS system out of a 2001 Corsa. I have to design and build a control device to allow me to vary the amount of assistance it will deliver vs. the speed I'm going. I'd like it to not assist at higher speeds, unless of course I'm too weedy to be able to steer! The column is mounted to the crossmember on the front bulkhead which has had 3mm reinforcing plates welded on to add strength. The column is mounted at the front, and at the rear with M8 socket cap screws, so I imagine it's not going to fall off in a hurry or come off in my hand! The driving position is good, and I have taken out my old seat mounting points and replaced them with seat rails that go across the floor pan. I feel happier sitting on rails that I did with the other solution I had. I now have most of what I need for the braking system too. I have 10m of stainless reinforced line, and plently of fittings. I've also got a remote master cylinder for the hydraulic handbrake. I will keep the cable handbrake too, purely for ease of mot purposes. Here's the column: And now that I have a new job, I hope I can press on a lot quicker with the project and get it finished and on the road by next Jan or Feb... :)","title":"2005-08-04 - 2005-08-04 Done something"},{"location":"v6manta/2005/2005-08-08-/","text":"v6manta 2005-08-08 - 2005-08-08 \u00b6 Well, the Manta is on it's side. On the spit roast that was made for Matt's manta when it had a shell!! I am stripping the underside of all seam sealant and underseal. Then I will stitch weld the chassis legs, inner wings, turrets, etc. With the done, it'll be time to spray the underneath and engine bay, and the interior. Lastly, it'll get sprayed outside, and then everything will get bolted on and together after a good tidy up and clean. Especially those things that bolt on under the car, such as the rear diff and axle. The car will be white underneath, and the subframe and axle will be painted brightly to enable me to spot leaky bits easily. Here she is on her side... Hopefully the next update will be when I've completely stripped the underside of crud!","title":"2005 08 08 "},{"location":"v6manta/2005/2005-08-08-/#2005-08-08-2005-08-08","text":"Well, the Manta is on it's side. On the spit roast that was made for Matt's manta when it had a shell!! I am stripping the underside of all seam sealant and underseal. Then I will stitch weld the chassis legs, inner wings, turrets, etc. With the done, it'll be time to spray the underneath and engine bay, and the interior. Lastly, it'll get sprayed outside, and then everything will get bolted on and together after a good tidy up and clean. Especially those things that bolt on under the car, such as the rear diff and axle. The car will be white underneath, and the subframe and axle will be painted brightly to enable me to spot leaky bits easily. Here she is on her side... Hopefully the next update will be when I've completely stripped the underside of crud!","title":"2005-08-08 - 2005-08-08"},{"location":"v6manta/2005/2005-08-10-/","text":"v6manta 2005-08-10 - 2005-08-10 \u00b6 Yep, hopefully it'll be along to a mig meet in early 06 8) It's good to be able to get on with it again...","title":"2005 08 10 "},{"location":"v6manta/2005/2005-08-10-/#2005-08-10-2005-08-10","text":"Yep, hopefully it'll be along to a mig meet in early 06 8) It's good to be able to get on with it again...","title":"2005-08-10 - 2005-08-10"},{"location":"v6manta/2005/2005-08-25-/","text":"v6manta 2005-08-25 - 2005-08-25 \u00b6 Well, I have started stitch welding the underside, and I am continuing to remove the underseal and general surface rust and crud from the underside of the Manta. It's looking a bit more purposeful at the back end now. It's quite a slow process, but it's actually quite easy to do. One thing I have noticed, is how much my welding has improved from when I started this project. Which incidently was around 2 years ago or something ridiculous! It's good to have renewed enthusiasm for it, and to see it getting closer to the road. Getting there...","title":"2005 08 25 "},{"location":"v6manta/2005/2005-08-25-/#2005-08-25-2005-08-25","text":"Well, I have started stitch welding the underside, and I am continuing to remove the underseal and general surface rust and crud from the underside of the Manta. It's looking a bit more purposeful at the back end now. It's quite a slow process, but it's actually quite easy to do. One thing I have noticed, is how much my welding has improved from when I started this project. Which incidently was around 2 years ago or something ridiculous! It's good to have renewed enthusiasm for it, and to see it getting closer to the road. Getting there...","title":"2005-08-25 - 2005-08-25"},{"location":"v6manta/2005/2005-08-31-/","text":"v6manta 2005-08-31 - 2005-08-31 \u00b6 Ha, I've almost ready to hit the road, and have been for months. I just didn't want to embarass you, that's all! ;)","title":"2005 08 31 "},{"location":"v6manta/2005/2005-08-31-/#2005-08-31-2005-08-31","text":"Ha, I've almost ready to hit the road, and have been for months. I just didn't want to embarass you, that's all! ;)","title":"2005-08-31 - 2005-08-31"},{"location":"v6manta/2005/2005-09-05-/","text":"v6manta 2005-09-05 - 2005-09-05 \u00b6 Phoar.... Lovely jubbly. Now I won't be worried about the oil system. I was having a few stresses about oil because of the cams I am going to be running... Now I'm thinking that I should get a set of steel rods and have done. That way, the bottom end will (should!) always be reliable for me, and I can make full use of the cams power band without having to worry. The stock rods are specced to 8.2k by according to Swindon, but I expect this is in a circuit environment, and not necessarily in a tarmac rally environment. The push-on fittings in the system will be changed for JIC fittings... If you're going to do it, might as well do it right. It was fun up the garage this week with there being so many new bits, and dry sumps up there! It was a bit of a strange coincidence that Matt and myself had a dry sump system turn up virtually on the same day! Especially considering how long these projects have taken, and how far removed they are from each other! All these things are giving me renewed enthusiasm though. It's great to be back working on the Manta. Hopefully I'll be able to get a spray gun next month, and the body work could be sufficiently finished underneath and inside to give those places a good spray. I've already got hold of a Devilbiss air-fed mask, so I'm really only left with getting the consumables and a Devilbiss GTi gun...","title":"2005 09 05 "},{"location":"v6manta/2005/2005-09-05-/#2005-09-05-2005-09-05","text":"Phoar.... Lovely jubbly. Now I won't be worried about the oil system. I was having a few stresses about oil because of the cams I am going to be running... Now I'm thinking that I should get a set of steel rods and have done. That way, the bottom end will (should!) always be reliable for me, and I can make full use of the cams power band without having to worry. The stock rods are specced to 8.2k by according to Swindon, but I expect this is in a circuit environment, and not necessarily in a tarmac rally environment. The push-on fittings in the system will be changed for JIC fittings... If you're going to do it, might as well do it right. It was fun up the garage this week with there being so many new bits, and dry sumps up there! It was a bit of a strange coincidence that Matt and myself had a dry sump system turn up virtually on the same day! Especially considering how long these projects have taken, and how far removed they are from each other! All these things are giving me renewed enthusiasm though. It's great to be back working on the Manta. Hopefully I'll be able to get a spray gun next month, and the body work could be sufficiently finished underneath and inside to give those places a good spray. I've already got hold of a Devilbiss air-fed mask, so I'm really only left with getting the consumables and a Devilbiss GTi gun...","title":"2005-09-05 - 2005-09-05"},{"location":"v6manta/2005/2005-09-19-/","text":"v6manta 2005-09-19 - 2005-09-19 \u00b6 I've modified the water pump housing to get rid of the water pump part! ;) Thus now I can run an electric water pump easily, and take the strain off the engine when it's reaching for the 9k rpm mark... :D Now I need to get a set of steel rods to complete my bottom end, and make it pretty much bullet proof. Titan Motorsport do a nice Chrome Moly flywheel so I think that's where I'll be going to a flywheel. Then I need the whole lot re-balanced again! :( But it's got to be done... Need to get a 7 \u00bd\" clutch that fits the 20XE flywheel, and a type 9 box too. Must start thinking about that I guess...","title":"2005 09 19 "},{"location":"v6manta/2005/2005-09-19-/#2005-09-19-2005-09-19","text":"I've modified the water pump housing to get rid of the water pump part! ;) Thus now I can run an electric water pump easily, and take the strain off the engine when it's reaching for the 9k rpm mark... :D Now I need to get a set of steel rods to complete my bottom end, and make it pretty much bullet proof. Titan Motorsport do a nice Chrome Moly flywheel so I think that's where I'll be going to a flywheel. Then I need the whole lot re-balanced again! :( But it's got to be done... Need to get a 7 \u00bd\" clutch that fits the 20XE flywheel, and a type 9 box too. Must start thinking about that I guess...","title":"2005-09-19 - 2005-09-19"},{"location":"v6manta/2005/2005-09-22-/","text":"v6manta 2005-09-22 - 2005-09-22 \u00b6 Well, it can't all be playing with engines, there's the grimey stuff to do as well. The chassis legs needed looking at, so I decided to take a look inside to what was lurking underneath some spots where rust looked like it had settled in... Well, the bit that turned out worst was a part of the rail that had no direct signs of rust apart from being a bulge rather than flat. Underneath that, the chassis leg has a hole in it where it has rusted right through. I extended the cut to see if the rail had gone all the way down to the bottom, but the chassis rails internal strength was still there, and it was only the one spot that had rusted right through. With some good rust treament, some 3mm plate welding and rust inhibitors I think I can get away with mending the chassis rails rather than removing them and replacing them. I should have the chassis legs done by the end of the weekend I guess if I make it my mission to completely fix them now. That'll be a good part of the underside repairs finished...","title":"2005 09 22 "},{"location":"v6manta/2005/2005-09-22-/#2005-09-22-2005-09-22","text":"Well, it can't all be playing with engines, there's the grimey stuff to do as well. The chassis legs needed looking at, so I decided to take a look inside to what was lurking underneath some spots where rust looked like it had settled in... Well, the bit that turned out worst was a part of the rail that had no direct signs of rust apart from being a bulge rather than flat. Underneath that, the chassis leg has a hole in it where it has rusted right through. I extended the cut to see if the rail had gone all the way down to the bottom, but the chassis rails internal strength was still there, and it was only the one spot that had rusted right through. With some good rust treament, some 3mm plate welding and rust inhibitors I think I can get away with mending the chassis rails rather than removing them and replacing them. I should have the chassis legs done by the end of the weekend I guess if I make it my mission to completely fix them now. That'll be a good part of the underside repairs finished...","title":"2005-09-22 - 2005-09-22"},{"location":"v6manta/2005/2005-09-23-/","text":"v6manta 2005-09-23 - 2005-09-23 \u00b6 You see... It's not all bad news. Most of this manta chassis is in very good nick, and certainly compared to a lot, it's in pretty good condition. As I remember it, my nova which would have been about 3 years younger than this car, was a lot more rotten underneath. Actually, and on top, inside and outside! lol I've nearly finished cleaning off all the underseal from underneath on one half of the car. I'll probably turn it over the other way to do the lower half. Just have to move all the stuff I'm temporarily storing in the manta first before I can turn it back over!!","title":"2005 09 23 "},{"location":"v6manta/2005/2005-09-23-/#2005-09-23-2005-09-23","text":"You see... It's not all bad news. Most of this manta chassis is in very good nick, and certainly compared to a lot, it's in pretty good condition. As I remember it, my nova which would have been about 3 years younger than this car, was a lot more rotten underneath. Actually, and on top, inside and outside! lol I've nearly finished cleaning off all the underseal from underneath on one half of the car. I'll probably turn it over the other way to do the lower half. Just have to move all the stuff I'm temporarily storing in the manta first before I can turn it back over!!","title":"2005-09-23 - 2005-09-23"},{"location":"v6manta/2005/2005-11-01-/","text":"v6manta 2005-11-01 - 2005-11-01 \u00b6 I have strengthened the front wishbones, so that they definitely won't bend and flex about all over the place... Oh and I made a tool for the press which makes removing manta balljoints a breeze! 8) So it's coming along...","title":"2005 11 01 "},{"location":"v6manta/2005/2005-11-01-/#2005-11-01-2005-11-01","text":"I have strengthened the front wishbones, so that they definitely won't bend and flex about all over the place... Oh and I made a tool for the press which makes removing manta balljoints a breeze! 8) So it's coming along...","title":"2005-11-01 - 2005-11-01"},{"location":"v6manta/2005/2005-11-03-/","text":"v6manta 2005-11-03 - 2005-11-03 \u00b6 I am now also modifying the subframe arms too: Once this is all finished, the front subframe should be very strong. I'm hoping that the sump guard that I make should keep everything in check too, as I want it to bolt to the subframe, and to the subframe arms. This should add a lot of strength to this part. Which reminds me to get some 10mm thick ali plate to make the sump guard with!","title":"2005 11 03 "},{"location":"v6manta/2005/2005-11-03-/#2005-11-03-2005-11-03","text":"I am now also modifying the subframe arms too: Once this is all finished, the front subframe should be very strong. I'm hoping that the sump guard that I make should keep everything in check too, as I want it to bolt to the subframe, and to the subframe arms. This should add a lot of strength to this part. Which reminds me to get some 10mm thick ali plate to make the sump guard with!","title":"2005-11-03 - 2005-11-03"},{"location":"v6manta/2007/2007-10-20-/","text":"v6manta 2007-10-20 - 2007-10-20 \u00b6 After starting to mount the wilwood pedals, it became clear that where they wanted/needed to go meant that they interfered with the steering column A LOT So, I faffed around for a while with cable ties and other such fixings to see if the pedals could be used along with the column. Although it was tight, I found something that seems pretty good to use (I had to dig the seat out again!) and provides a bit of clearance. I could still do with making something to rest my clutch foot on as it was aching shortly after I assumed the position. My previous steering column mount never inspired me much, so I decided I might as well strip that out and get something new in there. When I previously removed the pedal box to fit the pedals it seemed like the shell/cage could do with a dash bar, so I thought I might as well add it all at the same time. Now the column is mounted, and I'm happy with it. I nabbed some of Animal's suspension bearings, but I'll replace them this week with some lower grade \u00bd&quot; \u215dUNF bearings from eBay as they don't need to be chrome moly and teflon lined just for mounting the column! Not unless I go back to the gym anyway!","title":"2007 10 20 "},{"location":"v6manta/2007/2007-10-20-/#2007-10-20-2007-10-20","text":"After starting to mount the wilwood pedals, it became clear that where they wanted/needed to go meant that they interfered with the steering column A LOT So, I faffed around for a while with cable ties and other such fixings to see if the pedals could be used along with the column. Although it was tight, I found something that seems pretty good to use (I had to dig the seat out again!) and provides a bit of clearance. I could still do with making something to rest my clutch foot on as it was aching shortly after I assumed the position. My previous steering column mount never inspired me much, so I decided I might as well strip that out and get something new in there. When I previously removed the pedal box to fit the pedals it seemed like the shell/cage could do with a dash bar, so I thought I might as well add it all at the same time. Now the column is mounted, and I'm happy with it. I nabbed some of Animal's suspension bearings, but I'll replace them this week with some lower grade \u00bd&quot; \u215dUNF bearings from eBay as they don't need to be chrome moly and teflon lined just for mounting the column! Not unless I go back to the gym anyway!","title":"2007-10-20 - 2007-10-20"},{"location":"v6manta/2007/2007-10-20-perspex-windows/","text":"v6manta 2007-10-20 - 2007-10-20 Perspex Windows \u00b6 Ages ago I started doing the perspex windows for the Manta, but I really didn't like how it came out, mainly because I wasn't using the standard Manta door window seals. The easiest way to make the windows though, is to use the standard seals, and side runners, including the part that holds the wing mirror: The doors are mega-heavy to begin with, and could definitely do with some trimming to loose some weight. Fibreglass replacements are available, but list(a) they don't have any upper frame, so you still have to make a frame for the perspex to use, and list(b) by the time you've lightened a steel door, it ends up weighing close to the fibreglass ones that are available. To hold the perspex to the correct shape to make it seal on the standard door window seal, you need to make a frame. This is sometimes bolted on (the works 400 Manta's for example). I decided to weld one on as it seems easier to me. The perspex is simply cut with a jigsaw and a very fine toothed blade, the risk of the perspex cracking when cutting it is really only high when the weight of the perspex is trying to snap the last section of perspex that you haven't yet cut, so make sure you support the weight of the perspex you are cutting. Once cut-out, the perspex is positioned in the door, and positions are marked for applying fixings. When you drill the holes for fixings, you need to make sure that you support the rear face of the perspex so that you don't shatter the rear of the plastic. The easiest way, is to drill the plastic on top of a bit of wood. The rear windows were just cut to fit the hole in the rear quater. Some rubber edging was applied to the shell, and then the perspex screws to fixings on the shell. I haven't finished the rear quaters yet, they are not screwed onto the shell yet. The rear window is large and must be thermo-formed. I am going to buy one instead of trying to make one. It's going to be almost impossible for me to do because we cannot thermo-form the plastic properly.","title":"2007 10 20 perspex windows"},{"location":"v6manta/2007/2007-10-20-perspex-windows/#2007-10-20-2007-10-20-perspex-windows","text":"Ages ago I started doing the perspex windows for the Manta, but I really didn't like how it came out, mainly because I wasn't using the standard Manta door window seals. The easiest way to make the windows though, is to use the standard seals, and side runners, including the part that holds the wing mirror: The doors are mega-heavy to begin with, and could definitely do with some trimming to loose some weight. Fibreglass replacements are available, but","title":"2007-10-20 - 2007-10-20 Perspex Windows"},{"location":"v6manta/2007/2007-11-13-getting-it-ready-to-paint.../","text":"v6manta 2007-11-13 - 2007-11-13 Getting it ready to paint... \u00b6 Last weekend, Lee and I popped down to the bodyshop to order the paint for the Manta. So now that's on order, and being picked up this week it's time to get on with prepping the shell. The manta is back on the spit again and the underside is the first part to get all the crud removed. With all the rubbish out of the way, the shell will be treated to some Kurust where appropriate, and then I have a good two pack etch primer to chuck at it, before some white paint hits it. The outside of the shell will be orange, and the rest will be white. Oh, with some decent matte black spraying on a few bits. Here is the manta back on the spit again, courtesy of Lee's phone :)","title":"2007 11 13 getting it ready to paint..."},{"location":"v6manta/2007/2007-11-13-getting-it-ready-to-paint.../#2007-11-13-2007-11-13-getting-it-ready-to-paint","text":"Last weekend, Lee and I popped down to the bodyshop to order the paint for the Manta. So now that's on order, and being picked up this week it's time to get on with prepping the shell. The manta is back on the spit again and the underside is the first part to get all the crud removed. With all the rubbish out of the way, the shell will be treated to some Kurust where appropriate, and then I have a good two pack etch primer to chuck at it, before some white paint hits it. The outside of the shell will be orange, and the rest will be white. Oh, with some decent matte black spraying on a few bits. Here is the manta back on the spit again, courtesy of Lee's phone :)","title":"2007-11-13 - 2007-11-13 Getting it ready to paint..."},{"location":"v6manta/2007/2007-11-21-almost-started-painting/","text":"v6manta 2007-11-21 - 2007-11-21 Almost started painting! \u00b6 Well, the shell is now on the spit, surrounded by tarpaulins and basically ready to paint. The first task is to do the underside, then the engine bay, and inside. Finally, after all that practice the external paint can go on. I've gone over al the bits that look a bit rusty with kurust, and hopefully that should keep things at bay. It's only a rally shell after all, and I'm not looking for it to last too long anyway. With the use if gets it's never going to rust away! Hopefully I've got everything I need now. The devilbiss still looks too clean to use, but hey I've got to pop my spraying cherry at some point! Roll on the weekend when I can start spraying stuff at the shell.","title":"2007 11 21 almost started painting"},{"location":"v6manta/2007/2007-11-21-almost-started-painting/#2007-11-21-2007-11-21-almost-started-painting","text":"Well, the shell is now on the spit, surrounded by tarpaulins and basically ready to paint. The first task is to do the underside, then the engine bay, and inside. Finally, after all that practice the external paint can go on. I've gone over al the bits that look a bit rusty with kurust, and hopefully that should keep things at bay. It's only a rally shell after all, and I'm not looking for it to last too long anyway. With the use if gets it's never going to rust away! Hopefully I've got everything I need now. The devilbiss still looks too clean to use, but hey I've got to pop my spraying cherry at some point! Roll on the weekend when I can start spraying stuff at the shell.","title":"2007-11-21 - 2007-11-21 Almost started painting!"},{"location":"v6manta/2007/2007-11-28-underneath-is-complete/","text":"v6manta 2007-11-28 - 2007-11-28 Underneath is complete! \u00b6 Yep, the underneath of the car is complete. Chucked on two coats of etch Zinc primer, and then four bottles of Gravi-Tex on top of that. The Gravi-Tex stuff was recommended and I have to say, it's great stuff. So now the underside is white, I'll need to get the inside and engine bay finished off in white, and then move on to the outer bits of the shell which will need to have a decent finish. Want it to look good the first time it goes into a tree! ;-) The devillbiss gun has been a star so far. I can't wait to see what sort of finish we can get from the gun on the orange bits!","title":"2007 11 28 underneath is complete"},{"location":"v6manta/2007/2007-11-28-underneath-is-complete/#2007-11-28-2007-11-28-underneath-is-complete","text":"Yep, the underneath of the car is complete. Chucked on two coats of etch Zinc primer, and then four bottles of Gravi-Tex on top of that. The Gravi-Tex stuff was recommended and I have to say, it's great stuff. So now the underside is white, I'll need to get the inside and engine bay finished off in white, and then move on to the outer bits of the shell which will need to have a decent finish. Want it to look good the first time it goes into a tree! ;-) The devillbiss gun has been a star so far. I can't wait to see what sort of finish we can get from the gun on the orange bits!","title":"2007-11-28 - 2007-11-28 Underneath is complete!"},{"location":"v6manta/2007/2007-12-04-painting-the-inside-and-engine-bay/","text":"v6manta 2007-12-04 - 2007-12-04 Painting the inside and engine bay \u00b6 It's nearly complete. I've primed the inside, engine bay and boot. Last night the last of the second coat of etch primer went on, although there are two bits that I'll have to mix and paint which I missed, before the white can go on. I've been experimenting with the gun, and now have a better idea of how much paint I should be putting on. More than I had been putting on! This time I opened the gun up a lot more, and really chucked some paint on it, expecting a good run or two. But, to my partial disappointment, no runs - just a much better finish that I got on the first coat at the weekend. I even managed to cover the roof okay, which was extremely awkward inside the shell. I'm glad to have experimented a bit, and now I'm just looking forward to getting some white paint covering all the bits that need to be white and then I can get on with getting the colour on the outside.","title":"2007 12 04 painting the inside and engine bay"},{"location":"v6manta/2007/2007-12-04-painting-the-inside-and-engine-bay/#2007-12-04-2007-12-04-painting-the-inside-and-engine-bay","text":"It's nearly complete. I've primed the inside, engine bay and boot. Last night the last of the second coat of etch primer went on, although there are two bits that I'll have to mix and paint which I missed, before the white can go on. I've been experimenting with the gun, and now have a better idea of how much paint I should be putting on. More than I had been putting on! This time I opened the gun up a lot more, and really chucked some paint on it, expecting a good run or two. But, to my partial disappointment, no runs - just a much better finish that I got on the first coat at the weekend. I even managed to cover the roof okay, which was extremely awkward inside the shell. I'm glad to have experimented a bit, and now I'm just looking forward to getting some white paint covering all the bits that need to be white and then I can get on with getting the colour on the outside.","title":"2007-12-04 - 2007-12-04 Painting the inside and engine bay"},{"location":"v6manta/2008/2008-01-14-painting-the-shell-orange/","text":"v6manta 2008-01-14 - 2008-01-14 Painting the shell Orange! \u00b6 Finally, it was time to put some real colour on the Manta. I had finished off the interior painting before Christmas, so everything but the outside of the shell was painted. Now it was time for the exciting part - putting the final colour on. Apprehension was with me in the morning before Lee and I started prepping the car ready for the colour as I have never achieved good results with spraying, but then I've always spraying with cellulose out of a rattle can. I've never sprayed more than a wing before and I'd never touched two-pack before either. Saturday, the car was masked up although it didn't hold that well, I can highly NOT recommend B&amp;Q &quot;Finest&quot; masking tape (the blue type they sell). The shell was then primed with two coats of high build two pack primer. The primer went on pretty well, but as I found out whilst doing the white painting, primer is thicker than paint so it's a lot easier to apply. We started again on Sunday fairly early and it was here when the nerves started to emerge - what if it runs everywhere, what if I !*#@ it up, etc., etc. We started off with Lee flatting off the primer with some 500grit wet and dry, and I re-did the a lot of the masking off using standard masking tape from a local motor factors. Then we blew off the dust, wiped over with some panel-wipe and then finally went over it with a few tack cloths. Then came the moment of truth, Lee mixed the paint and we poured it in the pot. Lee set-up the gun to get a good level of paint and a good fan and then started on the first panel to show me how fast to be moving the gun, and also showed me how to plan each panel before squeezing the trigger! After the first panel was done, the apprehension had gone. A bit of the Manta was orange and looked amazing. I couldn't wait to get stuck in on the rest of the shell. Lee handed me the gun and it felt great to spray the colour on whilst Lee guided me along. It was easy to see where you had sprayed on the first coat, orange onto light grey primer was a good contrast. Lee did the first couple of coats of orange on the roof because I found it awkward enough spraying other bits of the shell without needing awkward, hard-to-reach panels to spray too, but he made me get up there and do the final coat. The shell had three good coats of orange, and with every coat the finish just got better as the confidence of how much paint could go on without running built up, and the depth of the orange deepened. The photos are the only things that can show the how well the finish is from the gun, I think the Devilbiss GTi is the best tool I've ever bought and I'm very glad I did. And the number of runs I managed to put in the paint? None!! It's safe to say that Lee and I were like children on Christmas morning when we had finished spraying. I was dying to see the orange contrasting the interior. Most of the masking was done from inside, and after the final coat had gone tacky we just had to remove some of the masking to see what it looked like - Stunning!! It's safe to say that without Lee's guidance you would most likely be looking at photo's of an orange floor and white Manta! lol. His help was awesome and now I can't wait to get on with painting the bolt-on panels... ...all this though, and I'll dent it on the first rally!","title":"2008 01 14 painting the shell orange"},{"location":"v6manta/2008/2008-01-14-painting-the-shell-orange/#2008-01-14-2008-01-14-painting-the-shell-orange","text":"Finally, it was time to put some real colour on the Manta. I had finished off the interior painting before Christmas, so everything but the outside of the shell was painted. Now it was time for the exciting part - putting the final colour on. Apprehension was with me in the morning before Lee and I started prepping the car ready for the colour as I have never achieved good results with spraying, but then I've always spraying with cellulose out of a rattle can. I've never sprayed more than a wing before and I'd never touched two-pack before either. Saturday, the car was masked up although it didn't hold that well, I can highly NOT recommend B&amp;Q &quot;Finest&quot; masking tape (the blue type they sell). The shell was then primed with two coats of high build two pack primer. The primer went on pretty well, but as I found out whilst doing the white painting, primer is thicker than paint so it's a lot easier to apply. We started again on Sunday fairly early and it was here when the nerves started to emerge - what if it runs everywhere, what if I !*#@ it up, etc., etc. We started off with Lee flatting off the primer with some 500grit wet and dry, and I re-did the a lot of the masking off using standard masking tape from a local motor factors. Then we blew off the dust, wiped over with some panel-wipe and then finally went over it with a few tack cloths. Then came the moment of truth, Lee mixed the paint and we poured it in the pot. Lee set-up the gun to get a good level of paint and a good fan and then started on the first panel to show me how fast to be moving the gun, and also showed me how to plan each panel before squeezing the trigger! After the first panel was done, the apprehension had gone. A bit of the Manta was orange and looked amazing. I couldn't wait to get stuck in on the rest of the shell. Lee handed me the gun and it felt great to spray the colour on whilst Lee guided me along. It was easy to see where you had sprayed on the first coat, orange onto light grey primer was a good contrast. Lee did the first couple of coats of orange on the roof because I found it awkward enough spraying other bits of the shell without needing awkward, hard-to-reach panels to spray too, but he made me get up there and do the final coat. The shell had three good coats of orange, and with every coat the finish just got better as the confidence of how much paint could go on without running built up, and the depth of the orange deepened. The photos are the only things that can show the how well the finish is from the gun, I think the Devilbiss GTi is the best tool I've ever bought and I'm very glad I did. And the number of runs I managed to put in the paint? None!! It's safe to say that Lee and I were like children on Christmas morning when we had finished spraying. I was dying to see the orange contrasting the interior. Most of the masking was done from inside, and after the final coat had gone tacky we just had to remove some of the masking to see what it looked like - Stunning!! It's safe to say that without Lee's guidance you would most likely be looking at photo's of an orange floor and white Manta! lol. His help was awesome and now I can't wait to get on with painting the bolt-on panels... ...all this though, and I'll dent it on the first rally!","title":"2008-01-14 - 2008-01-14 Painting the shell Orange!"},{"location":"v6manta/2008/2008-01-16-out-of-the-booth/","text":"v6manta 2008-01-16 - 2008-01-16 Out of the booth \u00b6 We dropped the tarpaulin's last night and took the last of the masking off to see the whole shell. It's looking great! Now that those bits are complete, I have to do the rest of the bolt-on panels in orange, and I also have to paint the cage and front bulkhead in a very matte black. I want to use Nextel (or an equivalent) so I'll have to see if I can get hold of some. Once the cage and bulkhead are painted, I can start bolting stuff in and doing the fuel and brake lines as well as the wiring. It shouldn't be too long before I am just concentrating on the engine build.","title":"2008 01 16 out of the booth"},{"location":"v6manta/2008/2008-01-16-out-of-the-booth/#2008-01-16-2008-01-16-out-of-the-booth","text":"We dropped the tarpaulin's last night and took the last of the masking off to see the whole shell. It's looking great! Now that those bits are complete, I have to do the rest of the bolt-on panels in orange, and I also have to paint the cage and front bulkhead in a very matte black. I want to use Nextel (or an equivalent) so I'll have to see if I can get hold of some. Once the cage and bulkhead are painted, I can start bolting stuff in and doing the fuel and brake lines as well as the wiring. It shouldn't be too long before I am just concentrating on the engine build.","title":"2008-01-16 - 2008-01-16 Out of the booth"},{"location":"v6manta/2008/2008-01-23-rear-axle-trial-fitting/","text":"v6manta 2008-01-23 - 2008-01-23 Rear Axle Trial Fitting \u00b6 I thought it best to trial fit the rear axle, as to get a rolling chassis I need to be ordering the wheels and tyres soon. The question I need answered is what offsets and widths can I run on the Manta without the wheels fouling the bodywork. A guy at compomotive suggested a 0 offset 8&quot; wheel would fill the rear arches which surprised me, so I decided it's best just to measure it myself rather than trust anyone at face value. I suspect that when I spoke to him, he thought it would have a 400 kit on, even though I had said it was a standard coupe bodyshell. A zero offset 8&quot; rim is not going to fit the rear end well at all. I mounted the axle, and set it straight, in the middle of the rear arches, and fitted a couple of Lee's wheels which are 7&quot; with a high offset (I will check soon to see what offset) to see what interfered, and/or what I could get away with. The top photo shows plenty of room between the outside arch and the wheel/tyre, and the bottom photo shows that there is plenty of room on the inside edge of the wheel/tyre and the chassis or suspension spring. A couple of problems did arise from this fitting though. I had designed the link arms around the panhard rod, assuming that as standard, the normal road height would be with the panhard rod parallel to the floor - this would make the most sense. However, as can be seen in the top photo, the manta would suit gravel rallying only at this height. The following photo shows how much room there is for the link arms to move before hitting the chassis rails. Not a lot of room. However, the same photo shows that the link arm can be moved down the axle 3-4&quot; which should allow the axle to hit the bump stops without the link arms hitting the chassis. You live and learn I suppose. But it is interesting that I've only spotted this since everything has been painted! Sorry for the poor quality photos, my camera had been subjected to a pint of Guiness, and the lens had not been properly cleaned.","title":"2008 01 23 rear axle trial fitting"},{"location":"v6manta/2008/2008-01-23-rear-axle-trial-fitting/#2008-01-23-2008-01-23-rear-axle-trial-fitting","text":"I thought it best to trial fit the rear axle, as to get a rolling chassis I need to be ordering the wheels and tyres soon. The question I need answered is what offsets and widths can I run on the Manta without the wheels fouling the bodywork. A guy at compomotive suggested a 0 offset 8&quot; wheel would fill the rear arches which surprised me, so I decided it's best just to measure it myself rather than trust anyone at face value. I suspect that when I spoke to him, he thought it would have a 400 kit on, even though I had said it was a standard coupe bodyshell. A zero offset 8&quot; rim is not going to fit the rear end well at all. I mounted the axle, and set it straight, in the middle of the rear arches, and fitted a couple of Lee's wheels which are 7&quot; with a high offset (I will check soon to see what offset) to see what interfered, and/or what I could get away with. The top photo shows plenty of room between the outside arch and the wheel/tyre, and the bottom photo shows that there is plenty of room on the inside edge of the wheel/tyre and the chassis or suspension spring. A couple of problems did arise from this fitting though. I had designed the link arms around the panhard rod, assuming that as standard, the normal road height would be with the panhard rod parallel to the floor - this would make the most sense. However, as can be seen in the top photo, the manta would suit gravel rallying only at this height. The following photo shows how much room there is for the link arms to move before hitting the chassis rails. Not a lot of room. However, the same photo shows that the link arm can be moved down the axle 3-4&quot; which should allow the axle to hit the bump stops without the link arms hitting the chassis. You live and learn I suppose. But it is interesting that I've only spotted this since everything has been painted! Sorry for the poor quality photos, my camera had been subjected to a pint of Guiness, and the lens had not been properly cleaned.","title":"2008-01-23 - 2008-01-23 Rear Axle Trial Fitting"},{"location":"v6manta/2008/2008-02-24-painted-the-nextel-and-checked-for-wheel-clearance/","text":"v6manta 2008-02-24 - 2008-02-24 Painted the Nextel and Checked for wheel clearance \u00b6 Although it's been a month since my last update, I have in fact been getting on with a few bits. After looking everywhere for 3M Nextel paint, my dad managed to locate some for me, and a big thanks to him. I tried trimite for a suede effect paint, but they had a minimum order of 5ltrs, which at \u00a335 a litre + hardener + thinners was a bit much for the small amount of painting I needed to do! Many internet searches say that Nextel is no longer made, but that actually translates to 3M no longer manufacturing it. It is however still produced under licence from 3M by a German company called Mankiewicz. 3M originally designed nextel under contract for NASA for the space shuttle to coat their control desks. It is extremely mat and non-reflective which is ideal for the area surrounding the windscreen so I don't get blinded on sunny days. 3M is a two pack paint, and can be sprayed on. However, they recommend a 1.5-1.8mm tip. I used a 1.4mm tip, because that's what I had and I wanted to get this done ASAP as it was holding me back. It is extremely thick without thinners, and I put in as much thinners as I dared which really was quite a lot, but the gun still struggled. I struggled with it a lot, but in the end, the finish is fine for a rally car; near-black and non-reflective. Matt or Satin finishes from standard aerosol's come nowhere near as matt as nextel. Nextel is also very hard wearing, hence why I did the cage with it too. I also did some actual measuring up to find out what tyre widths I need to run. The Kumho V70A tyre is available in 205/225/245 and 265 widths for a 16&quot; rim. I need to use a 16&quot; rim to be able get the wheels over the front brakes which will need to be pretty large. I am not using a brake servo and it will be doing tarmac events. Having had a good measure up with a few fabricated bits of steel I worked out that I need to run 225 maximum at the rear, as 245's and 265's don't fit inside the arch no matter what the wheel offset could be. With 225's at the rear, I will use 205's at the front. Kumho recommends an ideal wheel rim width to be 7.0&quot; for each tyre (The front's having a section of 45 and the rears having a section of 50). So at least that means I can run the same wheels all round. I also need to run an offset of 45mm. I measured 40mm, but as there will be a brake disk between the half shaft and the wheel, 45mm seems a good bet. So, I need to get: Kumho V70A, 205/45R16 (Front) Kumho V70A, 225/50R16 (Rear) Braid Winrace 'A', 16x7&quot;/ET45/PCD4x100","title":"2008 02 24 painted the nextel and checked for wheel clearance"},{"location":"v6manta/2008/2008-02-24-painted-the-nextel-and-checked-for-wheel-clearance/#2008-02-24-2008-02-24-painted-the-nextel-and-checked-for-wheel-clearance","text":"Although it's been a month since my last update, I have in fact been getting on with a few bits. After looking everywhere for 3M Nextel paint, my dad managed to locate some for me, and a big thanks to him. I tried trimite for a suede effect paint, but they had a minimum order of 5ltrs, which at \u00a335 a litre + hardener + thinners was a bit much for the small amount of painting I needed to do! Many internet searches say that Nextel is no longer made, but that actually translates to 3M no longer manufacturing it. It is however still produced under licence from 3M by a German company called Mankiewicz. 3M originally designed nextel under contract for NASA for the space shuttle to coat their control desks. It is extremely mat and non-reflective which is ideal for the area surrounding the windscreen so I don't get blinded on sunny days. 3M is a two pack paint, and can be sprayed on. However, they recommend a 1.5-1.8mm tip. I used a 1.4mm tip, because that's what I had and I wanted to get this done ASAP as it was holding me back. It is extremely thick without thinners, and I put in as much thinners as I dared which really was quite a lot, but the gun still struggled. I struggled with it a lot, but in the end, the finish is fine for a rally car; near-black and non-reflective. Matt or Satin finishes from standard aerosol's come nowhere near as matt as nextel. Nextel is also very hard wearing, hence why I did the cage with it too. I also did some actual measuring up to find out what tyre widths I need to run. The Kumho V70A tyre is available in 205/225/245 and 265 widths for a 16&quot; rim. I need to use a 16&quot; rim to be able get the wheels over the front brakes which will need to be pretty large. I am not using a brake servo and it will be doing tarmac events. Having had a good measure up with a few fabricated bits of steel I worked out that I need to run 225 maximum at the rear, as 245's and 265's don't fit inside the arch no matter what the wheel offset could be. With 225's at the rear, I will use 205's at the front. Kumho recommends an ideal wheel rim width to be 7.0&quot; for each tyre (The front's having a section of 45 and the rears having a section of 50). So at least that means I can run the same wheels all round. I also need to run an offset of 45mm. I measured 40mm, but as there will be a brake disk between the half shaft and the wheel, 45mm seems a good bet. So, I need to get: Kumho V70A, 205/45R16 (Front) Kumho V70A, 225/50R16 (Rear) Braid Winrace 'A', 16x7&quot;/ET45/PCD4x100","title":"2008-02-24 - 2008-02-24 Painted the Nextel and Checked for wheel clearance"},{"location":"v6manta/2008/2008-03-15-front-suspension-build/","text":"v6manta 2008-03-15 - 2008-03-15 Front Suspension Build \u00b6 The front suspension is now built up. It's very satisfying building a car when all the ball joints and bearings are new. Everything feels tight and good. I still have to build up the rear diff with some new bearings, but after that I really need to look at getting hold of the wheels and tyres so that I can get the car as a rolling chassis.","title":"2008 03 15 front suspension build"},{"location":"v6manta/2008/2008-03-15-front-suspension-build/#2008-03-15-2008-03-15-front-suspension-build","text":"The front suspension is now built up. It's very satisfying building a car when all the ball joints and bearings are new. Everything feels tight and good. I still have to build up the rear diff with some new bearings, but after that I really need to look at getting hold of the wheels and tyres so that I can get the car as a rolling chassis.","title":"2008-03-15 - 2008-03-15 Front Suspension Build"},{"location":"v6manta/2008/2008-03-19-suspension-bushes-are-always-wrong/","text":"v6manta 2008-03-19 - 2008-03-19 Suspension bushes are always wrong \u00b6 Why is it that aftermarket suspension bushes never fit? They are always too wide. Ideally, I like to see the stainless steel internal sleeve ever-so-slightly longer than the bush when the bush is in place. The steel sleeve should protrude 0.5mm or so from each side of the bush to be installed properly. These bushes for the Manta were so far out that it was almost impossible to install a lower arm without adjusting the bushes. I simply used a very old abrasive flap disc on an angle grinder to skim the bushes down. The suspension arms were then a breeze to fit. I have also installed new front bearings in both hubs and fitted the hubs. I have removed all the wheel studs as I will order and fit some new ones.","title":"2008 03 19 suspension bushes are always wrong"},{"location":"v6manta/2008/2008-03-19-suspension-bushes-are-always-wrong/#2008-03-19-2008-03-19-suspension-bushes-are-always-wrong","text":"Why is it that aftermarket suspension bushes never fit? They are always too wide. Ideally, I like to see the stainless steel internal sleeve ever-so-slightly longer than the bush when the bush is in place. The steel sleeve should protrude 0.5mm or so from each side of the bush to be installed properly. These bushes for the Manta were so far out that it was almost impossible to install a lower arm without adjusting the bushes. I simply used a very old abrasive flap disc on an angle grinder to skim the bushes down. The suspension arms were then a breeze to fit. I have also installed new front bearings in both hubs and fitted the hubs. I have removed all the wheel studs as I will order and fit some new ones.","title":"2008-03-19 - 2008-03-19 Suspension bushes are always wrong"},{"location":"v6manta/2008/2008-03-22-diff-bearings-need-replacing/","text":"v6manta 2008-03-22 - 2008-03-22 Diff Bearings need replacing \u00b6 The bearings on the LSD I have need replacing, and at the same time I might as well replace the pinion bearings too. Recently, the bearings took a 700% price increase, due to the fact that they are becoming rare. In fact, the bearing itself is still manufactured and used in many applications. This part number is Timken 19150, a single taper bearing. The race is part number Timken 19269. Unfortunately the race is not used anywhere and is the part that costs the money. I have seen the race listed at \u00a3120 on it's own! A shorter race, Timken 19268 is available very cheaply, but of course it's the wrong size. None of my races are pitted or marked, so I will likely get the bearings and not the races. I will probably move to a Ford rear axle at some point anyway. To summarise a list of bearings used in the Manta B rear axle: Diff Bearings Timken 19150/19269, 1.5\" x 2.6875\" x 0.7873\" Pinion Bearing (A) Timken M99036/M88010, 1\" x 2.6875\" x 0.875\"","title":"2008 03 22 diff bearings need replacing"},{"location":"v6manta/2008/2008-03-22-diff-bearings-need-replacing/#2008-03-22-2008-03-22-diff-bearings-need-replacing","text":"The bearings on the LSD I have need replacing, and at the same time I might as well replace the pinion bearings too. Recently, the bearings took a 700% price increase, due to the fact that they are becoming rare. In fact, the bearing itself is still manufactured and used in many applications. This part number is Timken 19150, a single taper bearing. The race is part number Timken 19269. Unfortunately the race is not used anywhere and is the part that costs the money. I have seen the race listed at \u00a3120 on it's own! A shorter race, Timken 19268 is available very cheaply, but of course it's the wrong size. None of my races are pitted or marked, so I will likely get the bearings and not the races. I will probably move to a Ford rear axle at some point anyway. To summarise a list of bearings used in the Manta B rear axle: Diff Bearings Timken 19150/19269, 1.5\" x 2.6875\" x 0.7873\" Pinion Bearing (A) Timken M99036/M88010, 1\" x 2.6875\" x 0.875\"","title":"2008-03-22 - 2008-03-22 Diff Bearings need replacing"},{"location":"v6manta/2008/2008-04-08-fitted-the-rear-windows-and-steering-column/","text":"v6manta 2008-04-08 - 2008-04-08 Fitted the rear windows and steering column \u00b6 I was in a quandry as to how to mount the rear perspex windows as there aren't too many options. Originally I was going to rivet the perspex to the shell using the small lips where the outer and inner skins of metal are spot welded together. However, this strip is only about 7mm wide and so the perspex would have to be accurately fitted. It would ideally need to be thermo-formed. I experimented with therm-forming the window but it ended up going a bit wrong! ;) So, I found some nut plates that are used in the aircraft industry. They are very cool, I really like them. These are also K-nut fittings so there is no worry about the bolts vibrating loose. It will also let me fit replacement windows very quickly. Excellent, rear windows fitted. Next, I sprayed the steering column flat black and bolted it in. I need to measure up and make the actual column to link to the rack. Once this is done, I can start work on the electronics to control the steering ECU and finally do some testing to see what levels of assistance I can get from the Corsa electric column.","title":"2008 04 08 fitted the rear windows and steering column"},{"location":"v6manta/2008/2008-04-08-fitted-the-rear-windows-and-steering-column/#2008-04-08-2008-04-08-fitted-the-rear-windows-and-steering-column","text":"I was in a quandry as to how to mount the rear perspex windows as there aren't too many options. Originally I was going to rivet the perspex to the shell using the small lips where the outer and inner skins of metal are spot welded together. However, this strip is only about 7mm wide and so the perspex would have to be accurately fitted. It would ideally need to be thermo-formed. I experimented with therm-forming the window but it ended up going a bit wrong! ;) So, I found some nut plates that are used in the aircraft industry. They are very cool, I really like them. These are also K-nut fittings so there is no worry about the bolts vibrating loose. It will also let me fit replacement windows very quickly. Excellent, rear windows fitted. Next, I sprayed the steering column flat black and bolted it in. I need to measure up and make the actual column to link to the rack. Once this is done, I can start work on the electronics to control the steering ECU and finally do some testing to see what levels of assistance I can get from the Corsa electric column.","title":"2008-04-08 - 2008-04-08 Fitted the rear windows and steering column"},{"location":"v6manta/2008/2008-04-12-shimmed-up-the-diff%2C-and-fitted-the-clocks/","text":"v6manta 2008-04-12 - 2008-04-12 Shimmed up the diff, and fitted the clocks \u00b6 I started shimming up the diff last week, but the shims I had were all a bit thick and, well, a bit rubbish in general. So, I ordered some 0.1mm shims of the correct size and started shimming up the diff. I followed Lee's guidance as he's shimmed more diffs that I've had beers. So I started off by measuring the side to side play in the diff using a dial guage while no shims were fitted. Play was measured at 0.9mm, Lee suggested a good figure to aim for of 0.1mm. So, 0.8mm of shims were fitted to the diff, 0.4mm under each bearing. Which means removing the bearings... Putting the shims in place... Then refitting the bearings... Then, it's out with the dial guage again to check the clearance. The result was a rather confusing 0.4mm! After being confused for a couple of minutes I realised that previously I was pressing on the bearings with a lower force than I had used this time. I certainly wouldn't expect that sort of difference, but that's the reality! This meant off with the bearings again, 0.3mm of shims fitted, and then bearings pressed back on. The final check with the dial guage shows 0.1mm side to side play. Great, that's stage one done! I need to get some engineers blue on Monday so that I can start to check the meshing of the pinion and crown wheel. That could result in moving the shims about which would be a pain in the butt! However, I need to do it right at once! After that, I made a quick bracket for the R6 clocks, and fitted the steering ECU to the column. Soon I can start doing some tests to see what electronics I need to control the ECU and the clocks.","title":"2008 04 12 shimmed up the diff, and fitted the clocks"},{"location":"v6manta/2008/2008-04-12-shimmed-up-the-diff%2C-and-fitted-the-clocks/#2008-04-12-2008-04-12-shimmed-up-the-diff-and-fitted-the-clocks","text":"I started shimming up the diff last week, but the shims I had were all a bit thick and, well, a bit rubbish in general. So, I ordered some 0.1mm shims of the correct size and started shimming up the diff. I followed Lee's guidance as he's shimmed more diffs that I've had beers. So I started off by measuring the side to side play in the diff using a dial guage while no shims were fitted. Play was measured at 0.9mm, Lee suggested a good figure to aim for of 0.1mm. So, 0.8mm of shims were fitted to the diff, 0.4mm under each bearing. Which means removing the bearings... Putting the shims in place... Then refitting the bearings... Then, it's out with the dial guage again to check the clearance. The result was a rather confusing 0.4mm! After being confused for a couple of minutes I realised that previously I was pressing on the bearings with a lower force than I had used this time. I certainly wouldn't expect that sort of difference, but that's the reality! This meant off with the bearings again, 0.3mm of shims fitted, and then bearings pressed back on. The final check with the dial guage shows 0.1mm side to side play. Great, that's stage one done! I need to get some engineers blue on Monday so that I can start to check the meshing of the pinion and crown wheel. That could result in moving the shims about which would be a pain in the butt! However, I need to do it right at once! After that, I made a quick bracket for the R6 clocks, and fitted the steering ECU to the column. Soon I can start doing some tests to see what electronics I need to control the ECU and the clocks.","title":"2008-04-12 - 2008-04-12 Shimmed up the diff, and fitted the clocks"},{"location":"v6manta/2008/2008-04-16-rebuilt-the-gearbox-so-i-get-gear-selection/","text":"v6manta 2008-04-16 - 2008-04-16 Rebuilt the gearbox so I get gear selection! \u00b6 A while back I stripped the gearbox down to check it over. I found that all the bearings and synchro's looked absolutely fine and really it didn't need a rebuild. So I cleaned it all up and put it back together. However, after putting it together it was slightly flawed because I didn't have any gear selection capabilities! Recently I thought about running a Ford Type-9 Gearbox as I think I will eventually end up running one of these with a Tran-X or Quaiffe SCCR gearkit and thus fitting a Type-9 straight away would mean just fitting the gearkit at a later date. But, I have since changed my mind again and decided just to get the manta on the road with the original 1.8 Getrag 5-speed box. So I stripped down the box, which is very simple to do: Remove the 7 or 8 bolts that surround the split between the two halves of the gearbox casing. You do not need to remove the four bolts which are located more towards the rear of the box. Remove the reverse gear detent (which is a plug in the front half of the gear casing next to the reverse switch), and remove the reverse switch. Lever off the clutch release fork: Unbolt and remove the input shaft bearing oil seal plate: Remove the input shaft retaining clip: The two halves of the gearbox casing can now be separated, to reveal the gearkit: Previously when I had the box apart I had removed everything I could from the casing to get the two halves apart, not realising that most of the bits did not need to be removed from the box to get at the gearkit. This made life a bit of a nightmare as I guessed where bits went and how it went back together. Clearly I got it a bit wrong, and one of the selectors was past it's normal movement range which had locked the box in fourth gear without any chance of getting it out. I spent a while rebuilding the selectors and checking that everything worked again. It was quite good to find out exactly what all the other fixings in the box did. Then I moved the gearbox into neutral and fitted both halves back together. With the front half of the box on two bits of wood to let the input shaft protrude when I fitted the gearkit and rear half of the casing, I lowered the rear casing and gearkit into position. It stops short because the selector rods move and do not locate properly in the front casing. Last time I used a mallet to get it all back together, and this is probably why the selector had moved beyond it's normal range. This time I used a set of pliers to gently move the selector rods to get them to locate in the front casing. The last one made the whole gearkit and rear casing drop into place under its own weight, with no further persuasion needed. Et voila: One gearbox with working gear selectors ready to mount!","title":"2008 04 16 rebuilt the gearbox so i get gear selection"},{"location":"v6manta/2008/2008-04-16-rebuilt-the-gearbox-so-i-get-gear-selection/#2008-04-16-2008-04-16-rebuilt-the-gearbox-so-i-get-gear-selection","text":"A while back I stripped the gearbox down to check it over. I found that all the bearings and synchro's looked absolutely fine and really it didn't need a rebuild. So I cleaned it all up and put it back together. However, after putting it together it was slightly flawed because I didn't have any gear selection capabilities! Recently I thought about running a Ford Type-9 Gearbox as I think I will eventually end up running one of these with a Tran-X or Quaiffe SCCR gearkit and thus fitting a Type-9 straight away would mean just fitting the gearkit at a later date. But, I have since changed my mind again and decided just to get the manta on the road with the original 1.8 Getrag 5-speed box. So I stripped down the box, which is very simple to do: Remove the 7 or 8 bolts that surround the split between the two halves of the gearbox casing. You do not need to remove the four bolts which are located more towards the rear of the box. Remove the reverse gear detent (which is a plug in the front half of the gear casing next to the reverse switch), and remove the reverse switch. Lever off the clutch release fork: Unbolt and remove the input shaft bearing oil seal plate: Remove the input shaft retaining clip: The two halves of the gearbox casing can now be separated, to reveal the gearkit: Previously when I had the box apart I had removed everything I could from the casing to get the two halves apart, not realising that most of the bits did not need to be removed from the box to get at the gearkit. This made life a bit of a nightmare as I guessed where bits went and how it went back together. Clearly I got it a bit wrong, and one of the selectors was past it's normal movement range which had locked the box in fourth gear without any chance of getting it out. I spent a while rebuilding the selectors and checking that everything worked again. It was quite good to find out exactly what all the other fixings in the box did. Then I moved the gearbox into neutral and fitted both halves back together. With the front half of the box on two bits of wood to let the input shaft protrude when I fitted the gearkit and rear half of the casing, I lowered the rear casing and gearkit into position. It stops short because the selector rods move and do not locate properly in the front casing. Last time I used a mallet to get it all back together, and this is probably why the selector had moved beyond it's normal range. This time I used a set of pliers to gently move the selector rods to get them to locate in the front casing. The last one made the whole gearkit and rear casing drop into place under its own weight, with no further persuasion needed. Et voila: One gearbox with working gear selectors ready to mount!","title":"2008-04-16 - 2008-04-16 Rebuilt the gearbox so I get gear selection!"},{"location":"v6manta/2008/2008-07-08-its-on-its-wheels-at-last/","text":"v6manta 2008-07-08 - 2008-07-08 It's on its wheels at last! \u00b6 Finally the Manta is on it's wheels! The rear diff has been shimmed, and the rear axle is now bolted up to the car. :) So now the car can sit on its own suspension. The ride heights need adjusting, especially at the rear, and the whole rear axle needs adjusting to for tracking - but that's easily done with the rose-jointed rear axle. I have also been busy on the engine front. A quick last minute decision see's me with a 2.5ltr V6 instead of the 2ltr 4pot. I picked the V6 up for \u00a350 with the intention of just using it to check mechanical fitment and to fabricate the engine mounts. However, as you can see I've already partially stripped it to see what it's like and it's internally very good. Doesn't look to bad at all. No lips on the bores, and the bearing shells look great. It's been well oiled, but has clearly had a coolant leak and so has continuously been topped up with plain water. So, there is the typical water way corrosion, however that's nothing that can't be cleaned up a bit. So \u00a350 seems to have got me a good V6 which I can use to get the car going. This has also meant that I've had to go in a different direction with the gearbox too. I've chosen to go with the Cosworth T5 box which is tough as old boots and has a SCCR gearset available. I'm expecting the bellhousing later on this week, so as soon as I find a gearbox I can start fitting the engine and box into the engine bay. I have also welded on the quick release steering boss onto the corsa column I am using. All I need to do now for the steering column is make the link bar from the column end to the rack and make a nylon bearing for the steering wheel end of the column as I cannot split the standard bearing to fit it back onto the column now that it's been welded.","title":"2008 07 08 its on its wheels at last"},{"location":"v6manta/2008/2008-07-08-its-on-its-wheels-at-last/#2008-07-08-2008-07-08-its-on-its-wheels-at-last","text":"Finally the Manta is on it's wheels! The rear diff has been shimmed, and the rear axle is now bolted up to the car. :) So now the car can sit on its own suspension. The ride heights need adjusting, especially at the rear, and the whole rear axle needs adjusting to for tracking - but that's easily done with the rose-jointed rear axle. I have also been busy on the engine front. A quick last minute decision see's me with a 2.5ltr V6 instead of the 2ltr 4pot. I picked the V6 up for \u00a350 with the intention of just using it to check mechanical fitment and to fabricate the engine mounts. However, as you can see I've already partially stripped it to see what it's like and it's internally very good. Doesn't look to bad at all. No lips on the bores, and the bearing shells look great. It's been well oiled, but has clearly had a coolant leak and so has continuously been topped up with plain water. So, there is the typical water way corrosion, however that's nothing that can't be cleaned up a bit. So \u00a350 seems to have got me a good V6 which I can use to get the car going. This has also meant that I've had to go in a different direction with the gearbox too. I've chosen to go with the Cosworth T5 box which is tough as old boots and has a SCCR gearset available. I'm expecting the bellhousing later on this week, so as soon as I find a gearbox I can start fitting the engine and box into the engine bay. I have also welded on the quick release steering boss onto the corsa column I am using. All I need to do now for the steering column is make the link bar from the column end to the rack and make a nylon bearing for the steering wheel end of the column as I cannot split the standard bearing to fit it back onto the column now that it's been welded.","title":"2008-07-08 - 2008-07-08 It&#039;s on its wheels at last!"},{"location":"v6manta/2008/2008-09-02-rebuilt-oil-pump--started-headwork/","text":"v6manta 2008-09-02 - 2008-09-02 Rebuilt Oil Pump + Started Headwork \u00b6 Quite a big update I suppose, which you'd expect considering I haven't updated for a while! I stripped and rebuilt the Titan 3-Stage oil pump which will be the basis of my dry-sump system. The pump was a bit notchy. When I took it apart, there were some burs present on the outer-most diameter of the pump rotors. I de-burred them and re-built the pump. When it was back together it felt much better. I spoke to Lee who advised it should be fine so long as the Annulus' were not burred. So, job should be good. I powered up the R6 clocks to check I had the right wiring diagram for them. There is a nice out-of-focus photo of them to show what they are like with the back lighting on. I have also started the oil and fuel plumbing for the engine. The radiator is fitted in place, I just need to make some clip-mounts for the top of it. The Dry-Sump tank is positioned, but needs it's bracket welding in place. I'll weld the bracket in place when the engine is mounted with the gearbox, just to make sure! The rad fan and oil cooler are in there too, so things are starting to come together. I decided that I should also do some head work to the V6. As I will be running the V6 on throttle bodies it will be very beneficial to do some work on the heads. They are designed for high torque and not so much aimed at ultimate power. In the manta, I can bias towards power as the torque from a tuned V6 is always going to be enough as it's not exactly a heavy car. The standard head design creates a venturi effect as the air passes the injector pintle - this speeding up of gas flow helps cylinder fill at mid-range revs and helps enhances the fuel and air mixture to increase torque. Another advantage I will have is the fact that I am running &quot;Pico&quot; injectors which can run a higher injector pressure and thus atomise the fuel more thoroughly compared to the standard bosch injectors. The Standard inlet is not bad, the casting quality is okay; Not amazing, but okay. There are some standard places where gain can be made, and there are also big bonus places to make really good flow improvements. The C25XE inlet port shape is not beneficial to power because of the venturi design I mentioned earlier. It needs to be changed, ideally it should be increased to a circular inlet tract. The flow area at the inlet is only just that of a single inlet valve, ideally we are looking for around xx% of the TOTAL inlet valve area. Sorry, I didn't actually take any photo's of this part of the porting, although if you are porting a V6 head you'll see from the photos later on that the inlet port shape is very different to standard! Part one of porting includes starting to knife-edge the siamese split, there are two big shoulders to remove and the front of the siamese split is very blunt in places. Ideally you'd be looking to have as shallow a split angle as possible, and the as little frontal area to the split as possible. In the photo above, I've started knife edging the siamese split, and have opened out the right and left most port walls. The photo shows some of the typical places that flow gains can be made around the valve seats. Normally it's the valve seats where most of your flow gains will be made. With the V6 engine the inlet is so biased towards torque that you are likely to get good gains from increasing the port flow area; However, this can only be done if you are not running the C25XE plasting inlet manifold section. In the photo above, the short side radius defects can be shown. As the seat cutter enters the port, effectively smoothing the seat in part to the inlet port, it creates ridges on the short side radius. However, don't go taking too much material out of the short side radius because this will decrease the radius, and usually you will start to decrease flow ability because of increasing the turbulence. So, the rule is as little out of the port floor and short side radius as possible, but of course getting rid of the short side radius defects. Generally I just use some emery cloth along my finger and a few minutes with that is all it takes to correct the short side radius. The long side radius has the highest gas flow speed, and so it is more critical than the short side radius to get gains from. In the photo above you can see something that exists in all hemi-chamber heads (or at least all I've seen), and that's the void right before the valve seat which continues to just after the valve guide. The flash has highlighted (or shadowed) it well so that we can see it. The long side radius needs working to that this is a smooth radius into the port from the port mouth to the valve seat opening. This means removing quite a lot of material from the port roof right by the valve guide. The inlet tract has been worked to smooth out the void on the long side radius and the short side radius is also blended. Actually, two things: (1) I took a bit too much out of the short side radius as I used a spiral band on a die-grinder to smooth it out rather than my normal emery cloth and finger method, and (2) I haven't really taken enough out of the port roof, there is still a slight dip. The point is though, this is not an ultimate race head. If it was, I would have a bit more work to do. This level of porting is going to get the majority of ultimate flow through the head, and it means that I won't have to spend forever porting the heads, and I won't risk breaking through to a waterway and having to right a head off. It's important to know what work is worth doing and what is just superficial pub talk. The finish I got I'm really pleased with considering how long it's taken me to port the head which is probably only a couple of hours for this inlet port. Copying over to the rest of the inlets should not take too long at all. I used to use a drill for my porting work. All the heads I've done before have been done with a drill and a Flame shaped carbide burr, spiral bands and that's about it. However, today I used a die grinder and it's much quicker work. The burr is a lot quicker with a die grinder, you can really shift some material when you need to, it was particularly quick at doing the port roof. Finally, as can be seen with the guides, I've ported straight across the top. The guides are actually in really good nick, so I will just be deburring the guides and leaving them alone rather than replacing them with Trojan or Bronze ones. My \u00a350 engine is not looking too bad at all!","title":"2008 09 02 rebuilt oil pump  started headwork"},{"location":"v6manta/2008/2008-09-02-rebuilt-oil-pump--started-headwork/#2008-09-02-2008-09-02-rebuilt-oil-pump-started-headwork","text":"Quite a big update I suppose, which you'd expect considering I haven't updated for a while! I stripped and rebuilt the Titan 3-Stage oil pump which will be the basis of my dry-sump system. The pump was a bit notchy. When I took it apart, there were some burs present on the outer-most diameter of the pump rotors. I de-burred them and re-built the pump. When it was back together it felt much better. I spoke to Lee who advised it should be fine so long as the Annulus' were not burred. So, job should be good. I powered up the R6 clocks to check I had the right wiring diagram for them. There is a nice out-of-focus photo of them to show what they are like with the back lighting on. I have also started the oil and fuel plumbing for the engine. The radiator is fitted in place, I just need to make some clip-mounts for the top of it. The Dry-Sump tank is positioned, but needs it's bracket welding in place. I'll weld the bracket in place when the engine is mounted with the gearbox, just to make sure! The rad fan and oil cooler are in there too, so things are starting to come together. I decided that I should also do some head work to the V6. As I will be running the V6 on throttle bodies it will be very beneficial to do some work on the heads. They are designed for high torque and not so much aimed at ultimate power. In the manta, I can bias towards power as the torque from a tuned V6 is always going to be enough as it's not exactly a heavy car. The standard head design creates a venturi effect as the air passes the injector pintle - this speeding up of gas flow helps cylinder fill at mid-range revs and helps enhances the fuel and air mixture to increase torque. Another advantage I will have is the fact that I am running &quot;Pico&quot; injectors which can run a higher injector pressure and thus atomise the fuel more thoroughly compared to the standard bosch injectors. The Standard inlet is not bad, the casting quality is okay; Not amazing, but okay. There are some standard places where gain can be made, and there are also big bonus places to make really good flow improvements. The C25XE inlet port shape is not beneficial to power because of the venturi design I mentioned earlier. It needs to be changed, ideally it should be increased to a circular inlet tract. The flow area at the inlet is only just that of a single inlet valve, ideally we are looking for around xx% of the TOTAL inlet valve area. Sorry, I didn't actually take any photo's of this part of the porting, although if you are porting a V6 head you'll see from the photos later on that the inlet port shape is very different to standard! Part one of porting includes starting to knife-edge the siamese split, there are two big shoulders to remove and the front of the siamese split is very blunt in places. Ideally you'd be looking to have as shallow a split angle as possible, and the as little frontal area to the split as possible. In the photo above, I've started knife edging the siamese split, and have opened out the right and left most port walls. The photo shows some of the typical places that flow gains can be made around the valve seats. Normally it's the valve seats where most of your flow gains will be made. With the V6 engine the inlet is so biased towards torque that you are likely to get good gains from increasing the port flow area; However, this can only be done if you are not running the C25XE plasting inlet manifold section. In the photo above, the short side radius defects can be shown. As the seat cutter enters the port, effectively smoothing the seat in part to the inlet port, it creates ridges on the short side radius. However, don't go taking too much material out of the short side radius because this will decrease the radius, and usually you will start to decrease flow ability because of increasing the turbulence. So, the rule is as little out of the port floor and short side radius as possible, but of course getting rid of the short side radius defects. Generally I just use some emery cloth along my finger and a few minutes with that is all it takes to correct the short side radius. The long side radius has the highest gas flow speed, and so it is more critical than the short side radius to get gains from. In the photo above you can see something that exists in all hemi-chamber heads (or at least all I've seen), and that's the void right before the valve seat which continues to just after the valve guide. The flash has highlighted (or shadowed) it well so that we can see it. The long side radius needs working to that this is a smooth radius into the port from the port mouth to the valve seat opening. This means removing quite a lot of material from the port roof right by the valve guide. The inlet tract has been worked to smooth out the void on the long side radius and the short side radius is also blended. Actually, two things: (1) I took a bit too much out of the short side radius as I used a spiral band on a die-grinder to smooth it out rather than my normal emery cloth and finger method, and (2) I haven't really taken enough out of the port roof, there is still a slight dip. The point is though, this is not an ultimate race head. If it was, I would have a bit more work to do. This level of porting is going to get the majority of ultimate flow through the head, and it means that I won't have to spend forever porting the heads, and I won't risk breaking through to a waterway and having to right a head off. It's important to know what work is worth doing and what is just superficial pub talk. The finish I got I'm really pleased with considering how long it's taken me to port the head which is probably only a couple of hours for this inlet port. Copying over to the rest of the inlets should not take too long at all. I used to use a drill for my porting work. All the heads I've done before have been done with a drill and a Flame shaped carbide burr, spiral bands and that's about it. However, today I used a die grinder and it's much quicker work. The burr is a lot quicker with a die grinder, you can really shift some material when you need to, it was particularly quick at doing the port roof. Finally, as can be seen with the guides, I've ported straight across the top. The guides are actually in really good nick, so I will just be deburring the guides and leaving them alone rather than replacing them with Trojan or Bronze ones. My \u00a350 engine is not looking too bad at all!","title":"2008-09-02 - 2008-09-02 Rebuilt Oil Pump + Started Headwork"},{"location":"v6manta/2008/2008-09-04-some-more-headwork/","text":"v6manta 2008-09-04 - 2008-09-04 Some More Headwork \u00b6 I have done some more work to the V6 heads. Well, I have virtually finished the inlet ports of the first head! Hopefully at the weekend I'll have all the inlets done on both heads and perhaps one of the exhaust ports sorted out. Then it'll be onto the chambers.","title":"2008 09 04 some more headwork"},{"location":"v6manta/2008/2008-09-04-some-more-headwork/#2008-09-04-2008-09-04-some-more-headwork","text":"I have done some more work to the V6 heads. Well, I have virtually finished the inlet ports of the first head! Hopefully at the weekend I'll have all the inlets done on both heads and perhaps one of the exhaust ports sorted out. Then it'll be onto the chambers.","title":"2008-09-04 - 2008-09-04 Some More Headwork"},{"location":"v6manta/2008/2008-09-25-even-more-headwork/","text":"v6manta 2008-09-25 - 2008-09-25 Even More Headwork \u00b6 I have now virtually completed one of the heads. I'm not happy with how the chambers have come out, but hey, it's only my first V6 head, and it's a mild tune so nothing too much to worry about. I'll be better equipped when I decide to build a higher spec V6 in the future. The exhaust ports have been opened out to remove the EGR lump, which normally impedes gas flow a lot. I haven't bothered welding up the dip that is left in the port as the flow loss caused by it is minimal. Some further photos of the head are shown below:","title":"2008 09 25 even more headwork"},{"location":"v6manta/2008/2008-09-25-even-more-headwork/#2008-09-25-2008-09-25-even-more-headwork","text":"I have now virtually completed one of the heads. I'm not happy with how the chambers have come out, but hey, it's only my first V6 head, and it's a mild tune so nothing too much to worry about. I'll be better equipped when I decide to build a higher spec V6 in the future. The exhaust ports have been opened out to remove the EGR lump, which normally impedes gas flow a lot. I haven't bothered welding up the dip that is left in the port as the flow loss caused by it is minimal. Some further photos of the head are shown below:","title":"2008-09-25 - 2008-09-25 Even More Headwork"},{"location":"v6manta/2008/2008-11-09-engine--transmission-fitted/","text":"v6manta 2008-11-09 - 2008-11-09 Engine + Transmission Fitted \u00b6 Finally I have got hold of a Cosworth 2WD T5 gearbox which I could pick up fairly locally. Along with a Bellhousing for a 20XE to T5 bellhousing, the V6 bolted up fine to the gearbox. The T5 bellhousing is meant for a 20XE, and the V6 + 20XE starter motors are in slightly different positions and so I need to modify the bellhousing slightly. No great deal though, the bellhousing is otherwise a really good fit. I also have to get a spigot bearing for the crank to support the gearbox input shaft. I got an old vectra sump (at least I think it was a vectra sump) for the V6 and milled it down to 35mm. This clears the mains girdle and will be the start of my dry sump pan. As I have the pump + oil tank, I might as well have a go at making the pan. The &quot;sump pan&quot; bolted to the engine block shows that the pan clears the girdle fine, and when I place the engine in the car it will rest of \u00bc&quot; of wood to give me a bit more space for making the sump pan. It is only very tight at the front of the engine where the subframe and steering rack are anyway. I will probably twin scavenge from the rear as I should be able to prevent forward oil surge under braking. I started bolting the oil pump on, but there is a lug on the block that stops the oil pump being able to sit against the block properly. It was requiring 40mm spacers which really sucked. The lug is just there for for block machining (i.e. in the factory as somewhere to clamp the casting), so I chopped it off. Then, the oil pump can sit flat against the block. Much Better! I also bolted a plate to the drivers side of the engine which makes a start of the engine mounts. I sat the engine + gearbox back into its proper location, the engine is sat \u00bc&quot; above the subframe + rack using a peice of plywood. The gearbox is supported at the back with a small jack. The engine position needs a bit more fiddling with before I can start making the mounts. It will be good to get it mounted though!! The T5 gearbox fits in the Manta tunnel fine. Where I have the T5 sitting, it's mounting flange is very close to the Manta's chassis mounting points. So making a gearbox mount should be really easy. The gearlevel position is not too bad, it is further forward when compared to my original gear selector (which I never finished anyway!), but should be okay if I kink the gearlever a bit towards the seat. It's already reachable, but in harnesses it's suprising how little you can move. The passenger seat is also quickly bolted in to try out the positioning. For some reason I had to re-drill the seat rails. I have no idea why, I'm sure it all fitted before the car was painted! Still, I had to cut the tunnel anyway, so a touch-up to the white paint is on the cards anyway.","title":"2008 11 09 engine  transmission fitted"},{"location":"v6manta/2008/2008-11-09-engine--transmission-fitted/#2008-11-09-2008-11-09-engine-transmission-fitted","text":"Finally I have got hold of a Cosworth 2WD T5 gearbox which I could pick up fairly locally. Along with a Bellhousing for a 20XE to T5 bellhousing, the V6 bolted up fine to the gearbox. The T5 bellhousing is meant for a 20XE, and the V6 + 20XE starter motors are in slightly different positions and so I need to modify the bellhousing slightly. No great deal though, the bellhousing is otherwise a really good fit. I also have to get a spigot bearing for the crank to support the gearbox input shaft. I got an old vectra sump (at least I think it was a vectra sump) for the V6 and milled it down to 35mm. This clears the mains girdle and will be the start of my dry sump pan. As I have the pump + oil tank, I might as well have a go at making the pan. The &quot;sump pan&quot; bolted to the engine block shows that the pan clears the girdle fine, and when I place the engine in the car it will rest of \u00bc&quot; of wood to give me a bit more space for making the sump pan. It is only very tight at the front of the engine where the subframe and steering rack are anyway. I will probably twin scavenge from the rear as I should be able to prevent forward oil surge under braking. I started bolting the oil pump on, but there is a lug on the block that stops the oil pump being able to sit against the block properly. It was requiring 40mm spacers which really sucked. The lug is just there for for block machining (i.e. in the factory as somewhere to clamp the casting), so I chopped it off. Then, the oil pump can sit flat against the block. Much Better! I also bolted a plate to the drivers side of the engine which makes a start of the engine mounts. I sat the engine + gearbox back into its proper location, the engine is sat \u00bc&quot; above the subframe + rack using a peice of plywood. The gearbox is supported at the back with a small jack. The engine position needs a bit more fiddling with before I can start making the mounts. It will be good to get it mounted though!! The T5 gearbox fits in the Manta tunnel fine. Where I have the T5 sitting, it's mounting flange is very close to the Manta's chassis mounting points. So making a gearbox mount should be really easy. The gearlevel position is not too bad, it is further forward when compared to my original gear selector (which I never finished anyway!), but should be okay if I kink the gearlever a bit towards the seat. It's already reachable, but in harnesses it's suprising how little you can move. The passenger seat is also quickly bolted in to try out the positioning. For some reason I had to re-drill the seat rails. I have no idea why, I'm sure it all fitted before the car was painted! Still, I had to cut the tunnel anyway, so a touch-up to the white paint is on the cards anyway.","title":"2008-11-09 - 2008-11-09 Engine + Transmission Fitted"},{"location":"v6manta/2008/2008-11-16-engine--gearbox-mounted--steering-column-fitted/","text":"v6manta 2008-11-16 - 2008-11-16 Engine + Gearbox mounted + Steering Column Fitted \u00b6 Done a few more bits now. It almost feels like the last stretch! lol Yeah, right. Lee didn't have anything to do up the garage so I gave him the job of making up the steering column from some 303 stainless bar I had got for the job. He made a great job of it, I think we'll be safe to use the steering!! Previously, before I painted the Manta I welded a \u00be&quot; ID bearing + bearing holder to the bulkhead for the steering column. As I am using a corsa electric power steering column, which is mounted much more towards the drivers seat, the original column was too short - hence having to make one up. The bar fits great in the bearing, and will satisfy the scrutineer's need for having a liquid tight seal across the whole bulkhead. I made up some engine mounts to get the V6 in position. It took quite a bit of faffing about to get the engine in the right position, and I found that I had bolted the gearbox on at a 7deg tilt, so I had to take it all out and rotate the gearbox back to vertical and put it all back in position. The drivers side engine mount in the vice for final welding before it's put in position to hold the engine. I made a quick temporary gearbox mount, just to hold the gearbox in place for now. Next week I will finish off the gearbox mount. After making up a similar engine mount for the passenger side, I have a fitted engine + gearbox. Of course, there's still some finishing off to do, but the clearance for the dry sump looks good. The engine + gearbox are in. Now I need to check the position of everything, then rip it all out again so that I can modify the bellhousing to be able to fit the starter motor, then put it all back in and fit an alternator somewhere. The gear lever position is good, and I can reach it from my seat, but 1 st and 3 rd and just a little bit on my finger tips, so I might make a gear lever that protudes back about an inch or so.","title":"2008 11 16 engine  gearbox mounted  steering column fitted"},{"location":"v6manta/2008/2008-11-16-engine--gearbox-mounted--steering-column-fitted/#2008-11-16-2008-11-16-engine-gearbox-mounted-steering-column-fitted","text":"Done a few more bits now. It almost feels like the last stretch! lol Yeah, right. Lee didn't have anything to do up the garage so I gave him the job of making up the steering column from some 303 stainless bar I had got for the job. He made a great job of it, I think we'll be safe to use the steering!! Previously, before I painted the Manta I welded a \u00be&quot; ID bearing + bearing holder to the bulkhead for the steering column. As I am using a corsa electric power steering column, which is mounted much more towards the drivers seat, the original column was too short - hence having to make one up. The bar fits great in the bearing, and will satisfy the scrutineer's need for having a liquid tight seal across the whole bulkhead. I made up some engine mounts to get the V6 in position. It took quite a bit of faffing about to get the engine in the right position, and I found that I had bolted the gearbox on at a 7deg tilt, so I had to take it all out and rotate the gearbox back to vertical and put it all back in position. The drivers side engine mount in the vice for final welding before it's put in position to hold the engine. I made a quick temporary gearbox mount, just to hold the gearbox in place for now. Next week I will finish off the gearbox mount. After making up a similar engine mount for the passenger side, I have a fitted engine + gearbox. Of course, there's still some finishing off to do, but the clearance for the dry sump looks good. The engine + gearbox are in. Now I need to check the position of everything, then rip it all out again so that I can modify the bellhousing to be able to fit the starter motor, then put it all back in and fit an alternator somewhere. The gear lever position is good, and I can reach it from my seat, but 1 st and 3 rd and just a little bit on my finger tips, so I might make a gear lever that protudes back about an inch or so.","title":"2008-11-16 - 2008-11-16 Engine + Gearbox mounted + Steering Column Fitted"},{"location":"v6manta/2008/2008-12-14-stripping-the-x25xe-v6-bottom-end/","text":"v6manta 2008-12-14 - 2008-12-14 Stripping the X25XE V6 bottom end \u00b6 As the bottom end of the X25XE V6 has been sat around for a bit with the heads off, I thought I had best strip it down now and seal it up so that it can be rebuilt in the new year. Anything's better than just having it laying around getting dirt in the bores, waterways and oil galleries. I also want to make the dry sump pan on a nearly empty block, I'll just put the main caps and girdle back on to weld up the dry sump pan. The flat 20XE flywheel fits perfectly on the X25XE crank: The bottom end of the X25XE with it's girdle on, the sump is mostly removed and the crank windage tray is removed: Photo of the girdle/main cap interface. It's probably a good job that there is a strong girdle strapping the mains as there are 6 cylinders and four mains! Girdle removed: Which revealed a nasty peice of swarf on the block on the back of the crank sensor hole: The swarf fell off as soon as I touched it. The last person to rebuild this engine did the crank pulley FT. It took me, some heat, a 3ft breaker bar + extra extension to get the pulley bolt out. However, the woodruff key gave up first and sheared before the bolt made lots of noises and moved: This in turn created a burr on the end of the crank which scored the crank thrust bearing, so a few bits to replace. The crank bolt was far too over-tight it was crazy, it just laughed at the nut gun. The X25XE Crank, with its huge counterweights: One empty X25XE block: The oil galleries run across the block from the front of the engine to the rear taking various deviations on the way. The oil exits the pump and into the lower gallery hole in the photo: The gallery from the oil pump then comes out the threaded hole to the right of the oil filter in the photo below. This goes off the oil/water heat exchanger (Which I won't be running) and return from there into the -10 JIC fitting to the left of the oil filter. This feeds straight into the outside area of the filter, which includes a pressure releif valve incase the filter gets blocked - this is probably designed to operate before the filters own pressure releif system which are generally flawed by the fact that when they releive, they push all of the previously filtered out debris straight into the main oil gallery feed! D'oh! After passing through the filter the oil enters the main oil gallery feed through the centre filter hole. This gallery, as well as feeding the main crank bearings directly and going off the rest of the engine also goes back to the oil pump (the top gallery in the photo above) to the oil pressure releif valve to control the oil pressure. Me and Lee also took the T5 apart to check out the gearset. It was a bit fiddly because we started off without consulting the manual, but it only took 10min of headscratching or so before we sorted it out. The gearset looks in good condition, and looks to have been rebuilt fairly recently, which reflects what the previous owner told me.","title":"2008 12 14 stripping the x25xe v6 bottom end"},{"location":"v6manta/2008/2008-12-14-stripping-the-x25xe-v6-bottom-end/#2008-12-14-2008-12-14-stripping-the-x25xe-v6-bottom-end","text":"As the bottom end of the X25XE V6 has been sat around for a bit with the heads off, I thought I had best strip it down now and seal it up so that it can be rebuilt in the new year. Anything's better than just having it laying around getting dirt in the bores, waterways and oil galleries. I also want to make the dry sump pan on a nearly empty block, I'll just put the main caps and girdle back on to weld up the dry sump pan. The flat 20XE flywheel fits perfectly on the X25XE crank: The bottom end of the X25XE with it's girdle on, the sump is mostly removed and the crank windage tray is removed: Photo of the girdle/main cap interface. It's probably a good job that there is a strong girdle strapping the mains as there are 6 cylinders and four mains! Girdle removed: Which revealed a nasty peice of swarf on the block on the back of the crank sensor hole: The swarf fell off as soon as I touched it. The last person to rebuild this engine did the crank pulley FT. It took me, some heat, a 3ft breaker bar + extra extension to get the pulley bolt out. However, the woodruff key gave up first and sheared before the bolt made lots of noises and moved: This in turn created a burr on the end of the crank which scored the crank thrust bearing, so a few bits to replace. The crank bolt was far too over-tight it was crazy, it just laughed at the nut gun. The X25XE Crank, with its huge counterweights: One empty X25XE block: The oil galleries run across the block from the front of the engine to the rear taking various deviations on the way. The oil exits the pump and into the lower gallery hole in the photo: The gallery from the oil pump then comes out the threaded hole to the right of the oil filter in the photo below. This goes off the oil/water heat exchanger (Which I won't be running) and return from there into the -10 JIC fitting to the left of the oil filter. This feeds straight into the outside area of the filter, which includes a pressure releif valve incase the filter gets blocked - this is probably designed to operate before the filters own pressure releif system which are generally flawed by the fact that when they releive, they push all of the previously filtered out debris straight into the main oil gallery feed! D'oh! After passing through the filter the oil enters the main oil gallery feed through the centre filter hole. This gallery, as well as feeding the main crank bearings directly and going off the rest of the engine also goes back to the oil pump (the top gallery in the photo above) to the oil pressure releif valve to control the oil pressure. Me and Lee also took the T5 apart to check out the gearset. It was a bit fiddly because we started off without consulting the manual, but it only took 10min of headscratching or so before we sorted it out. The gearset looks in good condition, and looks to have been rebuilt fairly recently, which reflects what the previous owner told me.","title":"2008-12-14 - 2008-12-14 Stripping the X25XE V6 bottom end"},{"location":"v6manta/2009/2009-06-24-making-the-dry-sump-pan/","text":"v6manta 2009-06-24 - 2009-06-24 Making the dry sump pan \u00b6 I decided to get the TIG out and finally get on with the dry sump pan for my 2.5ltr V6. Lee had some spare fittings from his Pace dry sump which are pretty cool, they have a gauze filter inside a &quot;pickup&quot; tube which is then screwed through the sump pan. It's probably easier to just look at the photos of them! I started off by milling down a Vectra sump. I think I milled it down to about 35mm, this clears everything that is under the engine. I have the subframe cutting across the front of the engine, right under the sump so I need to keep the sump as low as possible at the front of the engine. With what was left of the sump pan bolted to the block I chucked the block on a welding table and started rough cutting some 2mm aluminium to make the bottom of the dry sump pan. Luckily the windage tray bolts directly to the main cap girdle, so the sump pan is litterally just an oil catcher! I started off by cleaning all the aluminium. I cleaned the sump with thinners to get as much oil off the pan as I could, and then I gave everything a good scrub with a stainless wire brush. It is vital to get rid of all aluminium rust before trying to TIG anything. Once I had the rough size done, I did a couple of tack welds to hold the plate in plate, and then profiled the plate with a die grinder to the same shape as the sump pan. It was then the moment of truth, to start welding!! I started off with an already balled white tungsten (about 2.4mm dia.) and I was using a 2mm (I think! I must check that) filler rod. I started at 70amps, this turned out to be a bit less than I needed, so I moved to 80amps. This was fine, but unfortunately I don't have an adjustment (pedal or finger control) for the current, so I could only go so far before the heat soak meant that the current was far too high. Then I would have to stop, wait a 30 seconds and start again. I think I'll definitely get a foot pedal for Matt's TIG. It would be very useful for ali. Initially, the heat arc was hard to predict and seemed a bit scattered. After a while I decided to snap the tungsten to weld with a new end, this helped a lot and when it had balled this new end was very concertrated and worked really well. I also moved the tungsten so that is was protruding about 2mm out the end of the shroud. Gas was Argoshield. In the end, the pan came out okay. There are a few places where I could have done better, but then this is the first time I've TIG welded ali (at least without trying to use a stainless filler rod by accident!!) and everything looks tidy enough and looks like it won't leak oil everywhere. Looking forward to bolting the engine back in now and getting on with the exhaust manifolds!","title":"2009 06 24 making the dry sump pan"},{"location":"v6manta/2009/2009-06-24-making-the-dry-sump-pan/#2009-06-24-2009-06-24-making-the-dry-sump-pan","text":"I decided to get the TIG out and finally get on with the dry sump pan for my 2.5ltr V6. Lee had some spare fittings from his Pace dry sump which are pretty cool, they have a gauze filter inside a &quot;pickup&quot; tube which is then screwed through the sump pan. It's probably easier to just look at the photos of them! I started off by milling down a Vectra sump. I think I milled it down to about 35mm, this clears everything that is under the engine. I have the subframe cutting across the front of the engine, right under the sump so I need to keep the sump as low as possible at the front of the engine. With what was left of the sump pan bolted to the block I chucked the block on a welding table and started rough cutting some 2mm aluminium to make the bottom of the dry sump pan. Luckily the windage tray bolts directly to the main cap girdle, so the sump pan is litterally just an oil catcher! I started off by cleaning all the aluminium. I cleaned the sump with thinners to get as much oil off the pan as I could, and then I gave everything a good scrub with a stainless wire brush. It is vital to get rid of all aluminium rust before trying to TIG anything. Once I had the rough size done, I did a couple of tack welds to hold the plate in plate, and then profiled the plate with a die grinder to the same shape as the sump pan. It was then the moment of truth, to start welding!! I started off with an already balled white tungsten (about 2.4mm dia.) and I was using a 2mm (I think! I must check that) filler rod. I started at 70amps, this turned out to be a bit less than I needed, so I moved to 80amps. This was fine, but unfortunately I don't have an adjustment (pedal or finger control) for the current, so I could only go so far before the heat soak meant that the current was far too high. Then I would have to stop, wait a 30 seconds and start again. I think I'll definitely get a foot pedal for Matt's TIG. It would be very useful for ali. Initially, the heat arc was hard to predict and seemed a bit scattered. After a while I decided to snap the tungsten to weld with a new end, this helped a lot and when it had balled this new end was very concertrated and worked really well. I also moved the tungsten so that is was protruding about 2mm out the end of the shroud. Gas was Argoshield. In the end, the pan came out okay. There are a few places where I could have done better, but then this is the first time I've TIG welded ali (at least without trying to use a stainless filler rod by accident!!) and everything looks tidy enough and looks like it won't leak oil everywhere. Looking forward to bolting the engine back in now and getting on with the exhaust manifolds!","title":"2009-06-24 - 2009-06-24 Making the dry sump pan"},{"location":"v6manta/2009/2009-10-05-trialling-the-throttle-bodies--a-few-more-bits-painted/","text":"v6manta 2009-10-05 - 2009-10-05 Trialling the throttle bodies + a few more bits painted \u00b6 Sorry, haven't written up any updates for ages. Been a bit busy with the mill and the lathe but I've also been doing some bits on the Manta. I've sprayed the front bumper, bonnet and doors. I haven't chucked the doors on yet. I did try the throttle bodies in place though as soon as they arrived! :) and obviously I popped the bonnet + bumper in place.","title":"2009 10 05 trialling the throttle bodies  a few more bits painted"},{"location":"v6manta/2009/2009-10-05-trialling-the-throttle-bodies--a-few-more-bits-painted/#2009-10-05-2009-10-05-trialling-the-throttle-bodies-a-few-more-bits-painted","text":"Sorry, haven't written up any updates for ages. Been a bit busy with the mill and the lathe but I've also been doing some bits on the Manta. I've sprayed the front bumper, bonnet and doors. I haven't chucked the doors on yet. I did try the throttle bodies in place though as soon as they arrived! :) and obviously I popped the bonnet + bumper in place.","title":"2009-10-05 - 2009-10-05 Trialling the throttle bodies + a few more bits painted"},{"location":"v6manta/2009/2009-12-18-flywheel-and-clutch/","text":"v6manta 2009-12-18 - 2009-12-18 Flywheel and Clutch \u00b6 Well, I've sourced the flywheel and clutch that I want to run. Flywheel The flywheel is from TTV racing and is their super light 20XE flywheel. As I'm using the 20XE bellhousing for the T5 the depth should be correct to use this flywheel. It's designed to be used with a 7.25\" clutch pack. ![](/img/v6manta/manta0195.jpg) Clutch The clutch is a Tilton https://www.tiltonracing.com/ two disc, 7.25\", cerametallic clutch with the correct spline pattern for the T5 obviously. I'm running the Orange springs, so the release pressure is not obscene and the clamping pressure allows up to 400lb.ft or so. That should meant that it won't slip. I got the clutch from Competition Supplies https://www.competitionsupplies.com/ over at Silverstone circuit. I can highly recommend them for brilliant service, and the fact that they actually stock Tilton stuff rather than just wait for you to order before they do. They sent my clutch out next day. They also offered some good advice. ![](/img/v6manta/manta0196.jpg) ![](/img/v6manta/manta0197.jpg) The only problem I had was that the flywheel is threaded M8. That is awkward because finding decent metric fasteners is a real pain. Finding decent UNF hardware is much easier because that's what the aerospace industry uses. I tried to find some studs (which is what's used in the photos above) but they are too short and I could not for the life of me find studs that were the right length. So in the end I bought some 50mm M8 cap heads and that'll have to do.","title":"2009 12 18 flywheel and clutch"},{"location":"v6manta/2009/2009-12-18-flywheel-and-clutch/#2009-12-18-2009-12-18-flywheel-and-clutch","text":"Well, I've sourced the flywheel and clutch that I want to run.","title":"2009-12-18 - 2009-12-18 Flywheel and Clutch"},{"location":"v6manta/2010/2010-01-23-done-the-handbrake--sliders/","text":"v6manta 2010-01-23 - 2010-01-23 Done the Handbrake + Sliders \u00b6 I got the handbrake lever finished finally, probably using too many bearings and what not. It didn't start too well, when I tried to make a 14mm hole in the handrake lever to mount the bearings in, but accidently made a 16mm hole. So a while later having spent \u00a315 on a 14mm drill from B&Q and having turned up a sleeve on the lathe I could install the bearings and fit the handbrake lever. It came out ok in the end though. I also bought a slider kit for the perspex windows to make it easier to get my 'ring tickets at the nurburgring this year! lol. I made a template in a peice of perspex so that I could use the router to cut the actual hole in the perspex. They fitted pretty easily and are a pretty good kit. \u00a350 the pair from Demon Tweeks.","title":"2010 01 23 done the handbrake  sliders"},{"location":"v6manta/2010/2010-01-23-done-the-handbrake--sliders/#2010-01-23-2010-01-23-done-the-handbrake-sliders","text":"I got the handbrake lever finished finally, probably using too many bearings and what not. It didn't start too well, when I tried to make a 14mm hole in the handrake lever to mount the bearings in, but accidently made a 16mm hole. So a while later having spent \u00a315 on a 14mm drill from B&Q and having turned up a sleeve on the lathe I could install the bearings and fit the handbrake lever. It came out ok in the end though. I also bought a slider kit for the perspex windows to make it easier to get my 'ring tickets at the nurburgring this year! lol. I made a template in a peice of perspex so that I could use the router to cut the actual hole in the perspex. They fitted pretty easily and are a pretty good kit. \u00a350 the pair from Demon Tweeks.","title":"2010-01-23 - 2010-01-23 Done the Handbrake + Sliders"},{"location":"v6manta/2010/2010-01-27-started-building-the-v6-heads-up/","text":"v6manta 2010-01-27 - 2010-01-27 Started building the V6 Heads up \u00b6 I started building up the heads for the V6, although it was freezing cold up the garage so I mainly drank tea. I did manage to lap in 24 valves though. The exhaust valves could do with a bit more lapping because they have a wider seat contact to help cool them a bit and I ran out of muscle power! The V6 isn't the best cooled engine in the world so there's no point in going too thin on the exhaust valve seat. I don't like 3-angle valve cuts, I don't see the point of them on a properly ported head. There is a lot to gain by the valve seat, and to then cut it back to just three angles seems a bit strange. There are still a lot of people quoting 3-angle seats as some sort of upgrade though, even though virtually every head I've looked at since the 90's has that from the factory as a minimum! Anyway enough rambling, this is what I think a valve seat should look like (Actually a bit better radiusing would be nice, but who's perfect eh?) I radis around the seat area, trying to blend into the seat face without removing too much of the valve face or sinking any areas of it because otherwise you will need a big cut to get a sealing face. Then, you can just ask the machine shop for a light cut (about 1.5mm wide seat contact for the inlets) and once lapped in, the job's a good 'un. You can see a bit of paint from where I was matching the inlet to the manifolds, I'll clean the rest of that out at the weekend with some thinners. I went to Ring Engineering in Hayes, Middx to get the valve seats cut for a couple of reasons, and I can recommend them. Lapping the valves in has been easy, there aren't any bad cuts or nightmare seats. The reasons I went to Ring: When you ask for a light cut, the do what you ask and understand that they shouldn't cut out all your hard work! They can cut seats concentric with the valve guide, even when you have cutback the valve guild in the port. Some people can't do this because of how their seat cutting tools align with the guide. They need a flat surface on the end of the guide nearest the valve seat to align properly.","title":"2010 01 27 started building the v6 heads up"},{"location":"v6manta/2010/2010-01-27-started-building-the-v6-heads-up/#2010-01-27-2010-01-27-started-building-the-v6-heads-up","text":"I started building up the heads for the V6, although it was freezing cold up the garage so I mainly drank tea. I did manage to lap in 24 valves though. The exhaust valves could do with a bit more lapping because they have a wider seat contact to help cool them a bit and I ran out of muscle power! The V6 isn't the best cooled engine in the world so there's no point in going too thin on the exhaust valve seat. I don't like 3-angle valve cuts, I don't see the point of them on a properly ported head. There is a lot to gain by the valve seat, and to then cut it back to just three angles seems a bit strange. There are still a lot of people quoting 3-angle seats as some sort of upgrade though, even though virtually every head I've looked at since the 90's has that from the factory as a minimum! Anyway enough rambling, this is what I think a valve seat should look like (Actually a bit better radiusing would be nice, but who's perfect eh?) I radis around the seat area, trying to blend into the seat face without removing too much of the valve face or sinking any areas of it because otherwise you will need a big cut to get a sealing face. Then, you can just ask the machine shop for a light cut (about 1.5mm wide seat contact for the inlets) and once lapped in, the job's a good 'un. You can see a bit of paint from where I was matching the inlet to the manifolds, I'll clean the rest of that out at the weekend with some thinners. I went to Ring Engineering in Hayes, Middx to get the valve seats cut for a couple of reasons, and I can recommend them. Lapping the valves in has been easy, there aren't any bad cuts or nightmare seats. The reasons I went to Ring: When you ask for a light cut, the do what you ask and understand that they shouldn't cut out all your hard work! They can cut seats concentric with the valve guide, even when you have cutback the valve guild in the port. Some people can't do this because of how their seat cutting tools align with the guide. They need a flat surface on the end of the guide nearest the valve seat to align properly.","title":"2010-01-27 - 2010-01-27 Started building the V6 Heads up"},{"location":"v6manta/2010/2010-01-30-picked-up-another-v6/","text":"v6manta 2010-01-30 - 2010-01-30 Picked up another V6 \u00b6 Yep, me and Lee went on an eventful road trip today to pick up another V6 which I grabbed off of eBay for \u00a3100. I've stripped it down so that it is a short block, and the bottom end looks in good enough condition to use as the basis for my V6 engine in the Manta. I will bolt my ported heads + throttle bodies on to this engine and that will be the engine I use to get me to Germany. I cuts out a lot of hassle, and get's me a sealed engine quickly. I will be up the garage tomorrow cleaning + building the ported heads, I'll try and take a few photos. I've ordered the bits to make my manifolds too, from a company in the states. When that lot arrives I can use the block that currently sat in the engine bay along with the other pair of heads to build the manifolds up with.","title":"2010 01 30 picked up another v6"},{"location":"v6manta/2010/2010-01-30-picked-up-another-v6/#2010-01-30-2010-01-30-picked-up-another-v6","text":"Yep, me and Lee went on an eventful road trip today to pick up another V6 which I grabbed off of eBay for \u00a3100. I've stripped it down so that it is a short block, and the bottom end looks in good enough condition to use as the basis for my V6 engine in the Manta. I will bolt my ported heads + throttle bodies on to this engine and that will be the engine I use to get me to Germany. I cuts out a lot of hassle, and get's me a sealed engine quickly. I will be up the garage tomorrow cleaning + building the ported heads, I'll try and take a few photos. I've ordered the bits to make my manifolds too, from a company in the states. When that lot arrives I can use the block that currently sat in the engine bay along with the other pair of heads to build the manifolds up with.","title":"2010-01-30 - 2010-01-30 Picked up another V6"},{"location":"v6manta/2010/2010-02-01-exhaust-manifolds/","text":"v6manta 2010-02-01 - 2010-02-01 Exhaust Manifolds \u00b6 I've ordered all the tubes + bends I think I'll need to make the exhaust manifolds for the V6 in the manta. But, I need to order the manifold flanges. Previously I designed some manifold flanges to suit 1 \u00be\" primaries. However, having consulted the book Four Stroke Performance tuning and going through some sums it looks like I need to go a bit smaller on the primaries. The American company that I ordered the tube through does 1 \u215d\" tubing and that works out pretty much spot on, so I ordered stainless tubing, mandrel bends and collectors in that size. The collectors are 3:1 and 1 \u215d\" inlets and 2\" outlet. So, I need to work out the external circumference of the tube + make this the circumference of the holes in the exhaust flange (Plus some clearance!) The od of the tube is: <div style='width:90%'> <table cellpadding='0' cellspacing='0' style='width:100%;border:0px'> <td class='photo_tl'> <td class='photo_t'> <td class='photo_tr'> <td class='photo_l'> <td align='left' class='photo_m' style='padding:2px'><tt>1 5/8&quot; * Pi = (1.625 * 25.4) * Pi = 129.7mm</tt> <td class='photo_r'> <td class='photo_bl'> <td class='photo_b'> <td class='photo_br'> The current cutouts in the exhaust flange are obrounds with a radius of 15mm and an external horizontal measurement of 55.5mm. Thus the circumference of that cutout is: <div style='width:90%'> <table cellpadding='0' cellspacing='0' style='width:100%;border:0px'> <td class='photo_tl'> <td class='photo_t'> <td class='photo_tr'> <td class='photo_l'> <td align='left' class='photo_m' style='padding:2px'><tt>((15 * 2) * Pi) + ((55.5-30) * 2) = 94.25 + 51 = 145.25mm </tt> <td class='photo_r'> <td class='photo_bl'> <td class='photo_b'> <td class='photo_br'> (I never remember the order of precedence for operations so I've just parenthesised it well) I need a couple of mm of clearance, but not 15mm! So I will instead use an obround with an overall horizontal dim of 50mm and a radius of 13.75mm <div style='width:90%'> <table cellpadding='0' cellspacing='0' style='width:100%;border:0px'> <td class='photo_tl'> <td class='photo_t'> <td class='photo_tr'> <td class='photo_l'> <td align='left' class='photo_m' style='padding:2px'><tt>((13.75 * 2) * Pi) + ((50-27.5) * 2) = 86.4 + 45 = 131.4mm</tt> <td class='photo_r'> <td class='photo_bl'> <td class='photo_b'> <td class='photo_br'> I've uploaded a quick reference drawing of the design. I should upload a DXF too as this makes life a lot easier. It's too complex to fully dimension the PDF!","title":"2010 02 01 exhaust manifolds"},{"location":"v6manta/2010/2010-02-01-exhaust-manifolds/#2010-02-01-2010-02-01-exhaust-manifolds","text":"I've ordered all the tubes + bends I think I'll need to make the exhaust manifolds for the V6 in the manta. But, I need to order the manifold flanges. Previously I designed some manifold flanges to suit 1 \u00be\" primaries. However, having consulted the book Four Stroke Performance tuning and going through some sums it looks like I need to go a bit smaller on the primaries. The American company that I ordered the tube through does 1 \u215d\" tubing and that works out pretty much spot on, so I ordered stainless tubing, mandrel bends and collectors in that size. The collectors are 3:1 and 1 \u215d\" inlets and 2\" outlet. So, I need to work out the external circumference of the tube + make this the circumference of the holes in the exhaust flange (Plus some clearance!) The od of the tube is: <div style='width:90%'> <table cellpadding='0' cellspacing='0' style='width:100%;border:0px'> <td class='photo_tl'> <td class='photo_t'> <td class='photo_tr'> <td class='photo_l'> <td align='left' class='photo_m' style='padding:2px'><tt>1 5/8&quot; * Pi = (1.625 * 25.4) * Pi = 129.7mm</tt> <td class='photo_r'> <td class='photo_bl'> <td class='photo_b'> <td class='photo_br'> The current cutouts in the exhaust flange are obrounds with a radius of 15mm and an external horizontal measurement of 55.5mm. Thus the circumference of that cutout is: <div style='width:90%'> <table cellpadding='0' cellspacing='0' style='width:100%;border:0px'> <td class='photo_tl'> <td class='photo_t'> <td class='photo_tr'> <td class='photo_l'> <td align='left' class='photo_m' style='padding:2px'><tt>((15 * 2) * Pi) + ((55.5-30) * 2) = 94.25 + 51 = 145.25mm </tt> <td class='photo_r'> <td class='photo_bl'> <td class='photo_b'> <td class='photo_br'> (I never remember the order of precedence for operations so I've just parenthesised it well) I need a couple of mm of clearance, but not 15mm! So I will instead use an obround with an overall horizontal dim of 50mm and a radius of 13.75mm <div style='width:90%'> <table cellpadding='0' cellspacing='0' style='width:100%;border:0px'> <td class='photo_tl'> <td class='photo_t'> <td class='photo_tr'> <td class='photo_l'> <td align='left' class='photo_m' style='padding:2px'><tt>((13.75 * 2) * Pi) + ((50-27.5) * 2) = 86.4 + 45 = 131.4mm</tt> <td class='photo_r'> <td class='photo_bl'> <td class='photo_b'> <td class='photo_br'> I've uploaded a quick reference drawing of the design. I should upload a DXF too as this makes life a lot easier. It's too complex to fully dimension the PDF!","title":"2010-02-01 - 2010-02-01 Exhaust Manifolds"},{"location":"v6manta/2010/2010-02-02-starting-the-v6-build/","text":"v6manta 2010-02-02 - 2010-02-02 Starting the V6 Build \u00b6 Well, the bottom end from the new engine looks really good. So I've started building the engine. Woooo! Hopefully shouldn't take too long to build. I have a few more bits to get though. The water pump on these engines can only be described as extremely poor. Just about up to cooling a standard engine, //maybe.// So I need to get an electric water pump to feed the engine. Feeding the engine is really easy though. In at the back of the block, block off the front of the block and then out of the thermostat housing (there will not be a thermostat in the engine). Hopefully it will get up to temperature in a reasonable time and be able to regulate the temperature okay. This reminds me to get an expansion bottle too. Things that I need to remember for the weekend: Brake Cleaner Exhaust Manifold Flanges (Send modified drawing off!!) Measure propshaft + speak to recoprop A few brake line fittings V6 cam belt","title":"2010 02 02 starting the v6 build"},{"location":"v6manta/2010/2010-02-02-starting-the-v6-build/#2010-02-02-2010-02-02-starting-the-v6-build","text":"Well, the bottom end from the new engine looks really good. So I've started building the engine. Woooo! Hopefully shouldn't take too long to build. I have a few more bits to get though. The water pump on these engines can only be described as extremely poor. Just about up to cooling a standard engine, //maybe.// So I need to get an electric water pump to feed the engine. Feeding the engine is really easy though. In at the back of the block, block off the front of the block and then out of the thermostat housing (there will not be a thermostat in the engine). Hopefully it will get up to temperature in a reasonable time and be able to regulate the temperature okay. This reminds me to get an expansion bottle too. Things that I need to remember for the weekend: Brake Cleaner Exhaust Manifold Flanges (Send modified drawing off!!) Measure propshaft + speak to recoprop A few brake line fittings V6 cam belt","title":"2010-02-02 - 2010-02-02 Starting the V6 Build"},{"location":"v6manta/2010/2010-02-03-cylinder-head-bolts-torque/","text":"v6manta 2010-02-03 - 2010-02-03 Cylinder Head Bolts Torque \u00b6 I went to bolt the heads on and realised I didn't have a haynes or anything covering the X25XE. D'oh! So I'll note a few torque settings here along with an X25XE service manual. X25XE Torque Settings Cylinder Head bolts Stage 1 - 18 lb. ft. Stage 2 - 90 Deg Stage 3 - 90 Deg Stage 4 - 90 Deg Stage 5 - 15 Deg Crank Sprocket Bolt Stage 1 - 185 lb. ft. Stage 2 - 45 Deg Stage 3 - 15 Deg NOTE: Need something good to lock the flywheel!!","title":"2010 02 03 cylinder head bolts torque"},{"location":"v6manta/2010/2010-02-03-cylinder-head-bolts-torque/#2010-02-03-2010-02-03-cylinder-head-bolts-torque","text":"I went to bolt the heads on and realised I didn't have a haynes or anything covering the X25XE. D'oh! So I'll note a few torque settings here along with an X25XE service manual.","title":"2010-02-03 - 2010-02-03 Cylinder Head Bolts Torque"},{"location":"v6manta/2010/2010-02-03-ordered-the-exhaust-manifold-flanges/","text":"v6manta 2010-02-03 - 2010-02-03 Ordered the Exhaust Manifold Flanges \u00b6 Picked up a cam belt so that I can bolt the heads on and fit the cams + do the timing. Also got to do the important part - painting the block! lol Exhaust manifold flanges are on order. I'm getting them made out of 8mm 304L Stainless. They aren't exactly cheap, but as the rest of the kit is stainless, it makes sense to make the whole lot out of stainless.","title":"2010 02 03 ordered the exhaust manifold flanges"},{"location":"v6manta/2010/2010-02-03-ordered-the-exhaust-manifold-flanges/#2010-02-03-2010-02-03-ordered-the-exhaust-manifold-flanges","text":"Picked up a cam belt so that I can bolt the heads on and fit the cams + do the timing. Also got to do the important part - painting the block! lol Exhaust manifold flanges are on order. I'm getting them made out of 8mm 304L Stainless. They aren't exactly cheap, but as the rest of the kit is stainless, it makes sense to make the whole lot out of stainless.","title":"2010-02-03 - 2010-02-03 Ordered the Exhaust Manifold Flanges"},{"location":"v6manta/2010/2010-02-06-building-the-v6/","text":"v6manta 2010-02-06 - 2010-02-06 Building the V6 \u00b6 Carried on building the V6 up today. Bolted the heads down. Put the cams in (put the cam caps on twice, once on the wrong heads, and then once on the right heads! lol) I also modified the oil pump. I removed both pump gears because I am running an external dry sump setup which has a pressure stage. The V6 can have both gears removed, the thrust washer behind the crank pulley sits against the drive for the oil pump inner gear so it all fits back together fine without the pump gears in. I had to modify the oil pump housing slightly to accept the poly-v alternator belt pulley that I'm using as it is off of a 20XE engine instead of the 25XE. I also noticed that the two blocks I have are slightly different and have the lower cam belt tensioner in a different place. Weird! The engine is now ready to time up, I forgot to take the XE25XE manual with me though, so tomorrow I'll time it up, paint the block and hopefully get the throttle bodies bolted on. The inlet manifolds from Jenvey are a pain because of how I ported the inlet ports. I made them BIG compared to stock, and Jenvy compromised their manifold design so that it fits the std inlet system, and has room for a vacuum takeoff on every cylinder. Talk about over the top, unless you are using a truely pony brake setup. Anyhoo, that means that I have to build up some aluminium or chemical metal so that I can port the manifolds properly to match the heads. One of Lee's mates very kindly bought up some aluminium brazing rods for me to use, so that will be tomorrows first mission. Here's a YouTube video demonstrating how they work:","title":"2010 02 06 building the v6"},{"location":"v6manta/2010/2010-02-06-building-the-v6/#2010-02-06-2010-02-06-building-the-v6","text":"Carried on building the V6 up today. Bolted the heads down. Put the cams in (put the cam caps on twice, once on the wrong heads, and then once on the right heads! lol) I also modified the oil pump. I removed both pump gears because I am running an external dry sump setup which has a pressure stage. The V6 can have both gears removed, the thrust washer behind the crank pulley sits against the drive for the oil pump inner gear so it all fits back together fine without the pump gears in. I had to modify the oil pump housing slightly to accept the poly-v alternator belt pulley that I'm using as it is off of a 20XE engine instead of the 25XE. I also noticed that the two blocks I have are slightly different and have the lower cam belt tensioner in a different place. Weird! The engine is now ready to time up, I forgot to take the XE25XE manual with me though, so tomorrow I'll time it up, paint the block and hopefully get the throttle bodies bolted on. The inlet manifolds from Jenvey are a pain because of how I ported the inlet ports. I made them BIG compared to stock, and Jenvy compromised their manifold design so that it fits the std inlet system, and has room for a vacuum takeoff on every cylinder. Talk about over the top, unless you are using a truely pony brake setup. Anyhoo, that means that I have to build up some aluminium or chemical metal so that I can port the manifolds properly to match the heads. One of Lee's mates very kindly bought up some aluminium brazing rods for me to use, so that will be tomorrows first mission. Here's a YouTube video demonstrating how they work:","title":"2010-02-06 - 2010-02-06 Building the V6"},{"location":"v6manta/2010/2010-02-07-building-the-v6/","text":"v6manta 2010-02-07 - 2010-02-07 Building the V6 \u00b6 I finally got round to sorting the manifolds out to match them to the headwork I did for the V6. I first tried out some aluminium brazing rods. They worked really well once I'd got the manifold up to temperature, but it is a bit like soldering and so building up enough depth was tricky, and then a huge blob of molten brazing rod slipped off and fell on the floor. So it was on to plan B (Not the singer!) - chemical metal. This is a lot quicker and easier to apply and is fine for supporting the very thin wall that will be left after the porting, and fix the holes where I broke though the manifold wall. The engine is coming along, I left a cover over it for now and this week after work I'll fit the manifolds and throttle bodies. I plan to use instant gasket rather than use the gaskets from Jenvey because of the porting work. There is very little surface area at the top of the port on the manifold, but instant gasket should seal this fine.","title":"2010 02 07 building the v6"},{"location":"v6manta/2010/2010-02-07-building-the-v6/#2010-02-07-2010-02-07-building-the-v6","text":"I finally got round to sorting the manifolds out to match them to the headwork I did for the V6. I first tried out some aluminium brazing rods. They worked really well once I'd got the manifold up to temperature, but it is a bit like soldering and so building up enough depth was tricky, and then a huge blob of molten brazing rod slipped off and fell on the floor. So it was on to plan B (Not the singer!) - chemical metal. This is a lot quicker and easier to apply and is fine for supporting the very thin wall that will be left after the porting, and fix the holes where I broke though the manifold wall. The engine is coming along, I left a cover over it for now and this week after work I'll fit the manifolds and throttle bodies. I plan to use instant gasket rather than use the gaskets from Jenvey because of the porting work. There is very little surface area at the top of the port on the manifold, but instant gasket should seal this fine.","title":"2010-02-07 - 2010-02-07 Building the V6"},{"location":"v6manta/2010/2010-02-14-building-the-v6/","text":"v6manta 2010-02-14 - 2010-02-14 Building the V6 \u00b6 Still bolting bits and peices to the V6. The manifold kit has turned up, just waiting for the laser cutter to get the flanges sorted and then next week I can start making the manifolds. Nothing like a new challenge! lol First problems are: The Jenvey kit doesn't actually quite fit right, the bodies interfere with the rocker covers. I've ordered an electric water pump, the Davies Craig EWP115 version. The reason being that below is what the V6 runs as a standard water pump. It's a complete pile of tosh and is probably the reason that so many V6's suffer heat problems. The EGR isn't used either, so both the waterpump and EGR system will be blanked off by using a milled down version of the part, which I'll weld shut. It saves having to make blanking plates that fit, and both have sealing that is at least better than just a flat plate. Next up, I'm using a 20XE poly-v pulley. It almost fits, but requires some modifications. The first was to cut back the cam belt guard around the bottom pulley. Be careful with a standard engine, this is where the bottom pulley TDC mark is! Also though, the pulley hits the tensioner, if you have the pump + block which has the tensioner in this position. There is another tensioner + block setup where this tensioner is further up the block. I am using one of the ultra-light Denso alternators, which is essentially a Brise in disguise. It mounts on the V6 block very easily to line up with the 20XE pulley with just a simple 4mm thick washer. I used serated nuts to get a good earth through the top mounting bolt to the block, but I'll probably put a cable jumper to the block too. I also made a quick bracket for the fuel regulator to mount to, and it sits neatly in a spare bit of space in the V. The dry sump oil system bits fit okay, I never did test a crank sensor with the oil filter replacement screwed on, but it fits lovely jubly. A goooooood while ago, when I was building a 20XE I decided to use R1 coils for a few reasons. I am very keen to run plug on coil to get rid of HT leads. There are a few pains associated with the R1 coils, they require the \"bike\" screw fixing instead of the standard nipple fixing found on 95% of cars, so the plugs can be a little troublesome to get hold of. But, I've got them, so I'll be using them so long as when I ring Steve Greenald from Track and Road who'll be mapping the car says that they'll be okay. Next week I have to remember to do a few things: Take my propshaft to recoprop along with the measurement (67cm) to see if they can get that sorted for me Get hold of another two Peco yellow injectors Start getting the electrical bits and peices for building the loom Get hold of another set of plugs (Need another 8) Get hold of another set of R1 coils, the same F6 Mitsibushi that I have already Hassle laser cutter","title":"2010 02 14 building the v6"},{"location":"v6manta/2010/2010-02-14-building-the-v6/#2010-02-14-2010-02-14-building-the-v6","text":"Still bolting bits and peices to the V6. The manifold kit has turned up, just waiting for the laser cutter to get the flanges sorted and then next week I can start making the manifolds. Nothing like a new challenge! lol First problems are: The Jenvey kit doesn't actually quite fit right, the bodies interfere with the rocker covers. I've ordered an electric water pump, the Davies Craig EWP115 version. The reason being that below is what the V6 runs as a standard water pump. It's a complete pile of tosh and is probably the reason that so many V6's suffer heat problems. The EGR isn't used either, so both the waterpump and EGR system will be blanked off by using a milled down version of the part, which I'll weld shut. It saves having to make blanking plates that fit, and both have sealing that is at least better than just a flat plate. Next up, I'm using a 20XE poly-v pulley. It almost fits, but requires some modifications. The first was to cut back the cam belt guard around the bottom pulley. Be careful with a standard engine, this is where the bottom pulley TDC mark is! Also though, the pulley hits the tensioner, if you have the pump + block which has the tensioner in this position. There is another tensioner + block setup where this tensioner is further up the block. I am using one of the ultra-light Denso alternators, which is essentially a Brise in disguise. It mounts on the V6 block very easily to line up with the 20XE pulley with just a simple 4mm thick washer. I used serated nuts to get a good earth through the top mounting bolt to the block, but I'll probably put a cable jumper to the block too. I also made a quick bracket for the fuel regulator to mount to, and it sits neatly in a spare bit of space in the V. The dry sump oil system bits fit okay, I never did test a crank sensor with the oil filter replacement screwed on, but it fits lovely jubly. A goooooood while ago, when I was building a 20XE I decided to use R1 coils for a few reasons. I am very keen to run plug on coil to get rid of HT leads. There are a few pains associated with the R1 coils, they require the \"bike\" screw fixing instead of the standard nipple fixing found on 95% of cars, so the plugs can be a little troublesome to get hold of. But, I've got them, so I'll be using them so long as when I ring Steve Greenald from Track and Road who'll be mapping the car says that they'll be okay. Next week I have to remember to do a few things: Take my propshaft to recoprop along with the measurement (67cm) to see if they can get that sorted for me Get hold of another two Peco yellow injectors Start getting the electrical bits and peices for building the loom Get hold of another set of plugs (Need another 8) Get hold of another set of R1 coils, the same F6 Mitsibushi that I have already Hassle laser cutter","title":"2010-02-14 - 2010-02-14 Building the V6"},{"location":"v6manta/2010/2010-03-22-gearbox-sealed-and-release-bearing-fitted/","text":"v6manta 2010-03-22 - 2010-03-22 Gearbox Sealed and Release Bearing Fitted \u00b6 I've done a few quick jobs. Namely mounted the Tilton release bearing in the bellhousing. I mounted it with 4mm clearance which is pretty much what Tilton recommend, I'll add a positive pedal stop to prevent the bearing from over-extending. I simply printed out the Tilton spacings and Ford registration diameter and then cutout the registration circle. Then used the template to centre punch the bell housing and then drilled the mounting holes from them. It worked pretty good, the bearing seems pretty well aligned with the input shaft. All I needed to do was turn up some spacers on the lathe to get the bearing sat at the right height, and hey presto. Just a few bits left to get the plumbing in done. I've also ordered a couple of 15mm needle bearings to use as spigot bearings in the end of the V6 crank for the end of the T5 input shaft. I made a plug on the lathe to seal up the hole that used to mount the speedo sensor in the gearbox as I didn't get one with the box. I was going to use an o-ring on it, but it press fitted really well, so it's gone in dry and hopefully won't leak!","title":"2010 03 22 gearbox sealed and release bearing fitted"},{"location":"v6manta/2010/2010-03-22-gearbox-sealed-and-release-bearing-fitted/#2010-03-22-2010-03-22-gearbox-sealed-and-release-bearing-fitted","text":"I've done a few quick jobs. Namely mounted the Tilton release bearing in the bellhousing. I mounted it with 4mm clearance which is pretty much what Tilton recommend, I'll add a positive pedal stop to prevent the bearing from over-extending. I simply printed out the Tilton spacings and Ford registration diameter and then cutout the registration circle. Then used the template to centre punch the bell housing and then drilled the mounting holes from them. It worked pretty good, the bearing seems pretty well aligned with the input shaft. All I needed to do was turn up some spacers on the lathe to get the bearing sat at the right height, and hey presto. Just a few bits left to get the plumbing in done. I've also ordered a couple of 15mm needle bearings to use as spigot bearings in the end of the V6 crank for the end of the T5 input shaft. I made a plug on the lathe to seal up the hole that used to mount the speedo sensor in the gearbox as I didn't get one with the box. I was going to use an o-ring on it, but it press fitted really well, so it's gone in dry and hopefully won't leak!","title":"2010-03-22 - 2010-03-22 Gearbox Sealed and Release Bearing Fitted"},{"location":"v6manta/2010/2010-04-03-started-on-the-manifolds/","text":"v6manta 2010-04-03 - 2010-04-03 Started on the manifolds \u00b6 I've made a start on the manifolds. They could do with a lot of work doing to them, i.e. they could really do with slip jointing so that they can easily fit on and come off the car when the engine is in place, but the slip joints did not arrive in time, so I'm just getting it on with building them in a single piece: Also, I wanted to change the calipers at the front as the ones I originally had on there were a bit woeful. So I stuck some 44mm piston Wilwood 4-pots on there. At the moment, I just measured up for the bracket by making a temporary one: I ran out of Argon gas for the TIG welder and failed to get the bottle filled by BOC today. What a mission that turned out to be!! Anyway, I have probably managed to sort something out so hopefully I'll be back up and running with the TIG welder tomorrow!","title":"2010 04 03 started on the manifolds"},{"location":"v6manta/2010/2010-04-03-started-on-the-manifolds/#2010-04-03-2010-04-03-started-on-the-manifolds","text":"I've made a start on the manifolds. They could do with a lot of work doing to them, i.e. they could really do with slip jointing so that they can easily fit on and come off the car when the engine is in place, but the slip joints did not arrive in time, so I'm just getting it on with building them in a single piece: Also, I wanted to change the calipers at the front as the ones I originally had on there were a bit woeful. So I stuck some 44mm piston Wilwood 4-pots on there. At the moment, I just measured up for the bracket by making a temporary one: I ran out of Argon gas for the TIG welder and failed to get the bottle filled by BOC today. What a mission that turned out to be!! Anyway, I have probably managed to sort something out so hopefully I'll be back up and running with the TIG welder tomorrow!","title":"2010-04-03 - 2010-04-03 Started on the manifolds"},{"location":"v6manta/2010/2010-04-05-finished-a-manifold/","text":"v6manta 2010-04-05 - 2010-04-05 Finished a manifold! \u00b6 After many shenanigans after running out of Argon for the TIG welder I finally managed to get a bottle from Brian at Arcoe Metal Products on a Bank Holiday Sunday. THANKS BRIAN!! Lifesaver! So after managing to get some more gas I managed to at least finish off one of the manifolds for the V6. It came out great, I hope it lasts at least past the MOT and whilst I'm out in Germany. I really quite enjoyed making the manifold and the only welds that really went a bit 'pete tong' were the ones where I had gaps between the pipes I was welding together. Many welds didn't even need filler rod, and it's strangely satisfying to do those welds. I did not purge the inside of the pipes whilst welding them, so they are not totally smooth on the inside. I also didn't bother making the pipes equal length as this is not a maximum effort engine and the difference it would make would be negligable. (Don't forget you can click on the pictures to see larger versions of them. Hide them again using the close icon at the top right of the photo)","title":"2010 04 05 finished a manifold"},{"location":"v6manta/2010/2010-04-05-finished-a-manifold/#2010-04-05-2010-04-05-finished-a-manifold","text":"After many shenanigans after running out of Argon for the TIG welder I finally managed to get a bottle from Brian at Arcoe Metal Products on a Bank Holiday Sunday. THANKS BRIAN!! Lifesaver! So after managing to get some more gas I managed to at least finish off one of the manifolds for the V6. It came out great, I hope it lasts at least past the MOT and whilst I'm out in Germany. I really quite enjoyed making the manifold and the only welds that really went a bit 'pete tong' were the ones where I had gaps between the pipes I was welding together. Many welds didn't even need filler rod, and it's strangely satisfying to do those welds. I did not purge the inside of the pipes whilst welding them, so they are not totally smooth on the inside. I also didn't bother making the pipes equal length as this is not a maximum effort engine and the difference it would make would be negligable. (Don't forget you can click on the pictures to see larger versions of them. Hide them again using the close icon at the top right of the photo)","title":"2010-04-05 - 2010-04-05 Finished a manifold!"},{"location":"v6manta/2010/2010-04-07-started-the-second-manifold/","text":"v6manta 2010-04-07 - 2010-04-07 Started the second manifold \u00b6 Went up tonight and started on the second manifold. This side of the engine is more cluttered because of the starter motor and steering column. The steering column and subframe this side basically make things more interesting...","title":"2010 04 07 started the second manifold"},{"location":"v6manta/2010/2010-04-07-started-the-second-manifold/#2010-04-07-2010-04-07-started-the-second-manifold","text":"Went up tonight and started on the second manifold. This side of the engine is more cluttered because of the starter motor and steering column. The steering column and subframe this side basically make things more interesting...","title":"2010-04-07 - 2010-04-07 Started the second manifold"},{"location":"v6manta/2010/2010-04-11-need-a-todo-list/","text":"v6manta 2010-04-11 - 2010-04-11 Need a TODO List \u00b6 Got some more done at the weekend. Finished off 90% of the second manifold, but I didn't manage to get any photos as I forgot to take my camera up the garage. I also removed the spare engine block + the gearbox from the car whilst it's still on the subframe. I can then build everything up on the subframe and do a bolt check and then bolt the subframe back on the car. I need to bolt it all back in to modify the engine mounts though before I can do that. That's a complete PITA, but it needs to be done. I need a TODO list too, so here it is: TODO Possible at Work M18x1.5mm Wideband bungs Ring Jenvey V6 fuel rail for peco's (Need to email Simon a photo of the fuel rail!? Ring Reco-prop to chase up the prop and to see if it's possible to pick it up this Saturday Ring Think! Auto -6 90Deg (Lee) -6 Bulkhead Fittings (x2) + Nuts -10 90Deg (x2) Pick-up the SBD order from Royal Mail depo. Things TODO On the car Adjust manifolds to finish Finish exhaust system Mount oil system Chassis wiring Fit rear perspex screen Fit front + rear calipers Plumb in brakes Plumb in (and test) clutch Things TODO before Germany Trip Get engine mapped Join ADAC Insure Manta MOT Manta Lift Prohibition notice on Manta","title":"2010 04 11 need a todo list"},{"location":"v6manta/2010/2010-04-11-need-a-todo-list/#2010-04-11-2010-04-11-need-a-todo-list","text":"Got some more done at the weekend. Finished off 90% of the second manifold, but I didn't manage to get any photos as I forgot to take my camera up the garage. I also removed the spare engine block + the gearbox from the car whilst it's still on the subframe. I can then build everything up on the subframe and do a bolt check and then bolt the subframe back on the car. I need to bolt it all back in to modify the engine mounts though before I can do that. That's a complete PITA, but it needs to be done. I need a TODO list too, so here it is:","title":"2010-04-11 - 2010-04-11 Need a TODO List"},{"location":"v6manta/2010/2010-04-21-ticking-off-the-boxes/","text":"v6manta 2010-04-21 - 2010-04-21 Ticking off the boxes \u00b6 Getting there, but seemingly slowly! Tested the dry sump system and fixed a tiny leak in the sump pan tonight. Forgot to get some fittings for the brake plumbing - The outputs of the Wilwood master cylinders are \u215cin so I need to grab some fittings from Rally Design to get the plumbing complete. Also need a fitting to put the brake light switch into. I decided to get a pressure switch instead of a mechanical switch on the pedal. Also forgot that I don't have an accelerator pedal as yet! Must tackle that at the weekend when I've got more time up the garage. Spoke to Steve today at Track and Road and he's ordered the ECU + connectors for me so they should be with me pretty soon (hopefully by the weekend, that would be best scenario) Emailed a photo of the fuel rail to Jenvey so that they can make me a new one to fit the Peco injectors. The one I have now was for bosch injectors and the angles are just too wrong to bodge. It just doesn't fit quite right, and the last thing I want to fuel spurting everywhere because the o-rings don't seal properly. They can turn it around pretty quickly and can get it to me pretty fast if I don't get it plated as plating takes about a week.","title":"2010 04 21 ticking off the boxes"},{"location":"v6manta/2010/2010-04-21-ticking-off-the-boxes/#2010-04-21-2010-04-21-ticking-off-the-boxes","text":"Getting there, but seemingly slowly! Tested the dry sump system and fixed a tiny leak in the sump pan tonight. Forgot to get some fittings for the brake plumbing - The outputs of the Wilwood master cylinders are \u215cin so I need to grab some fittings from Rally Design to get the plumbing complete. Also need a fitting to put the brake light switch into. I decided to get a pressure switch instead of a mechanical switch on the pedal. Also forgot that I don't have an accelerator pedal as yet! Must tackle that at the weekend when I've got more time up the garage. Spoke to Steve today at Track and Road and he's ordered the ECU + connectors for me so they should be with me pretty soon (hopefully by the weekend, that would be best scenario) Emailed a photo of the fuel rail to Jenvey so that they can make me a new one to fit the Peco injectors. The one I have now was for bosch injectors and the angles are just too wrong to bodge. It just doesn't fit quite right, and the last thing I want to fuel spurting everywhere because the o-rings don't seal properly. They can turn it around pretty quickly and can get it to me pretty fast if I don't get it plated as plating takes about a week.","title":"2010-04-21 - 2010-04-21 Ticking off the boxes"},{"location":"v6manta/2010/2010-04-26-nearly-finished-the-second-manifold/","text":"v6manta 2010-04-26 - 2010-04-26 Nearly finished the second manifold \u00b6 Nearly finished the second manifold. Tomorrow night I just need to trim the pipe lengths and add on the collector. I also need to finish sealing up the other collector and add a small piece of 2\" tube onto the end of the collectors which will form a slip joint for the secondaries to fit on to. Then another couple of slip joints on the 2.5\" section and the rest of the system can be built. Hopefully, tomorrow night will see the complete engine + gearbox and prop shaft installed. I picked up the prop last Saturday from reco-prop. Scott is a top guy who sorted me out as promised. Clearing the sub frame whilst dodging the starter motor and more importantly the steering column made this manifold a bit more challenging. I'm glad I didn't bother trying to make these manifolds with equal length pipes!! At the weekend it was concluded that aiming to have the Manta MOT'd and roadworthy for the engine mapping session is a bit ambitious now as things have slipped a bit (everything takes longer than you estimate!). So now I am going to hire a trailer and hopefully Matt will be able to pick it up and tow the manta to Track and Road on Thursday, May 6 th to get the engine mapped. Then I have a couple of weeks to get it MOT'd, the prohibition notice lifted, insured and what-not. Fingers crossed...","title":"2010 04 26 nearly finished the second manifold"},{"location":"v6manta/2010/2010-04-26-nearly-finished-the-second-manifold/#2010-04-26-2010-04-26-nearly-finished-the-second-manifold","text":"Nearly finished the second manifold. Tomorrow night I just need to trim the pipe lengths and add on the collector. I also need to finish sealing up the other collector and add a small piece of 2\" tube onto the end of the collectors which will form a slip joint for the secondaries to fit on to. Then another couple of slip joints on the 2.5\" section and the rest of the system can be built. Hopefully, tomorrow night will see the complete engine + gearbox and prop shaft installed. I picked up the prop last Saturday from reco-prop. Scott is a top guy who sorted me out as promised. Clearing the sub frame whilst dodging the starter motor and more importantly the steering column made this manifold a bit more challenging. I'm glad I didn't bother trying to make these manifolds with equal length pipes!! At the weekend it was concluded that aiming to have the Manta MOT'd and roadworthy for the engine mapping session is a bit ambitious now as things have slipped a bit (everything takes longer than you estimate!). So now I am going to hire a trailer and hopefully Matt will be able to pick it up and tow the manta to Track and Road on Thursday, May 6 th to get the engine mapped. Then I have a couple of weeks to get it MOT'd, the prohibition notice lifted, insured and what-not. Fingers crossed...","title":"2010-04-26 - 2010-04-26 Nearly finished the second manifold"},{"location":"v6manta/2010/2010-05-09-got-the-car-rolling/","text":"v6manta 2010-05-09 - 2010-05-09 Got the car rolling!! \u00b6 Over the past couple of weeks, with a lot of help, the car finally hit the road and made it down to the rolling road for mapping. During mapping we discovered no diff oil seal, so had to fit one of them, then we blew a water hose, and then finally we blew the rear crank main seal which was a pain because it could be fixed. So the engine was only just into the actual mapping session when the seal failed. Steve G and Steve P of Track and Road are angel's and never gave up, giving us all the room we needed to fix the various problems we had and they never gave up, but in the end there was no way we could fix the crank oil seal on the rollers! So it will need to be fixed and then we can go back. At least now it can be fixed and made reliable by getting it up to temperature and setting the oil pressure properly, etc. It was a very exciting day at the rollers, although also very tiring! There were quite a few photos taken over the last bit of the build + getting it to the rollers, so I'll let the photos do the talking: V6 Build Manta Build A very happy Brian! :D","title":"2010 05 09 got the car rolling"},{"location":"v6manta/2010/2010-05-09-got-the-car-rolling/#2010-05-09-2010-05-09-got-the-car-rolling","text":"Over the past couple of weeks, with a lot of help, the car finally hit the road and made it down to the rolling road for mapping. During mapping we discovered no diff oil seal, so had to fit one of them, then we blew a water hose, and then finally we blew the rear crank main seal which was a pain because it could be fixed. So the engine was only just into the actual mapping session when the seal failed. Steve G and Steve P of Track and Road are angel's and never gave up, giving us all the room we needed to fix the various problems we had and they never gave up, but in the end there was no way we could fix the crank oil seal on the rollers! So it will need to be fixed and then we can go back. At least now it can be fixed and made reliable by getting it up to temperature and setting the oil pressure properly, etc. It was a very exciting day at the rollers, although also very tiring! There were quite a few photos taken over the last bit of the build + getting it to the rollers, so I'll let the photos do the talking:","title":"2010-05-09 - 2010-05-09 Got the car rolling!!"},{"location":"v6manta/2010/2010-05-11-rolling-road-day/","text":"v6manta 2010-05-11 - 2010-05-11 Rolling Road Day! \u00b6 At the Rolling Road Day I only took a couple of photo's because it was such a busy day (Fixing things! lol) It was fun, and I guess it went as well as expected with a few things to fix, one of which couldn't be repaired at the RR. So now I am jumping in Lee's nova to get to Germany and am looking forward to a rest, some good food and having a laugh in Germany instead of driving the Manta. It's a shame, but the Manta is nearly ready for the road now, all it needs is a few things being fixed and tested to make it reliable and then it can go back to the RR for a final mapping session. Once that is done, I can get it to some track days to see how well it goes! Can't wait! :D","title":"2010 05 11 rolling road day"},{"location":"v6manta/2010/2010-05-11-rolling-road-day/#2010-05-11-2010-05-11-rolling-road-day","text":"At the Rolling Road Day I only took a couple of photo's because it was such a busy day (Fixing things! lol) It was fun, and I guess it went as well as expected with a few things to fix, one of which couldn't be repaired at the RR. So now I am jumping in Lee's nova to get to Germany and am looking forward to a rest, some good food and having a laugh in Germany instead of driving the Manta. It's a shame, but the Manta is nearly ready for the road now, all it needs is a few things being fixed and tested to make it reliable and then it can go back to the RR for a final mapping session. Once that is done, I can get it to some track days to see how well it goes! Can't wait! :D","title":"2010-05-11 - 2010-05-11 Rolling Road Day!"},{"location":"v6manta/2010/2010-05-31-back-from-germany/","text":"v6manta 2010-05-31 - 2010-05-31 Back from Germany \u00b6 Righty, been on holiday in Germany at the Nordshleife. It was a bloody great holiday, some good meals and plenty of petrol. I was starting to pine a bit for the Manta though. So back now that I'm back in Blighty I've removed the engine + subframe from the car again having diagnosed the oil leak problem as the sump pan. Time to get the various bits and peices sorted that I want to now whilst it's all out again and fix the sump, then stuff it all back in again. Also found a bent clutch plate, so I ordered another whilst I was in Germany and I also ordered a proper alignment tool too for the twin plates. I'm also going to chop some more out of the bulkhead and weld it up so that the engine can be inserted a lot easier! I had to cut a clearance hole for the coil pack anyway, so I'll just continue that along.","title":"2010 05 31 back from germany"},{"location":"v6manta/2010/2010-05-31-back-from-germany/#2010-05-31-2010-05-31-back-from-germany","text":"Righty, been on holiday in Germany at the Nordshleife. It was a bloody great holiday, some good meals and plenty of petrol. I was starting to pine a bit for the Manta though. So back now that I'm back in Blighty I've removed the engine + subframe from the car again having diagnosed the oil leak problem as the sump pan. Time to get the various bits and peices sorted that I want to now whilst it's all out again and fix the sump, then stuff it all back in again. Also found a bent clutch plate, so I ordered another whilst I was in Germany and I also ordered a proper alignment tool too for the twin plates. I'm also going to chop some more out of the bulkhead and weld it up so that the engine can be inserted a lot easier! I had to cut a clearance hole for the coil pack anyway, so I'll just continue that along.","title":"2010-05-31 - 2010-05-31 Back from Germany"},{"location":"v6manta/2010/2010-06-01-sumps-off/","text":"v6manta 2010-06-01 - 2010-06-01 Sumps off \u00b6 Righty, got up the garage and got the engine off the subframe and whipped the sump off. Where it is leaking is basically where the weld has not sealed, it's actually pretty obviously looking closely with the sump off!! So the sump's cleaned up and ready to seal up. I'll also change the scavenge pump pick-up pipes to vacuum rated pipe instead of standard stuff, and modify the subframe a bit. There is a good bit of heat protection and manifold wrapping to do too. It can all probably be done in a weekend. Then I just want to modify the bulkhead to give better clearance when inserting and removing the engine; It will help a lot. Soon be back on the road hopefully. Can't wait to start it up again!","title":"2010 06 01 sumps off"},{"location":"v6manta/2010/2010-06-01-sumps-off/#2010-06-01-2010-06-01-sumps-off","text":"Righty, got up the garage and got the engine off the subframe and whipped the sump off. Where it is leaking is basically where the weld has not sealed, it's actually pretty obviously looking closely with the sump off!! So the sump's cleaned up and ready to seal up. I'll also change the scavenge pump pick-up pipes to vacuum rated pipe instead of standard stuff, and modify the subframe a bit. There is a good bit of heat protection and manifold wrapping to do too. It can all probably be done in a weekend. Then I just want to modify the bulkhead to give better clearance when inserting and removing the engine; It will help a lot. Soon be back on the road hopefully. Can't wait to start it up again!","title":"2010-06-01 - 2010-06-01 Sumps off"},{"location":"v6manta/2010/2010-06-06-done-most-of-the-bits-on-the-v6/","text":"v6manta 2010-06-06 - 2010-06-06 Done most of the bits on the V6 \u00b6 One of the cam belt tensioners was making a bit of noise so I decided to chuck on a new set of tensionsers and a new cam belt. I fixed the bad weld in the sump, and decided to go over the whole lot internally with chemical metal to make sure I didn't miss anything else. I wish I had welded it inside and out to begin with, but I didn't, so hey ho. I'll probably get hold of another sump pan and make a new sump that is welded inside and out and then replace it when it's ready. I welded the dry sump tank back up too, after having damaged it whilst taking the engine + subframe out. Jacking up the car with the sump tank bolted on whilst it is still connected to the oil pump by the bottom hose is not recommended! lmao Wrapped all of the primaries too whilst the engine was out. I already had a few heat witness marks on the oil pressure sensor which was close to an un-wrapped primary! So I'll move that sensor anyway. Used vacuum rated hose for the scavenge pipes this time as it didn't arrive in time before we went down to the rollers, so that's another thing ticked off the list. Might replace this -10 90deg as it is now about 110deg as it was the one still connected to the dry sump tank when I jacked the car up! Got one up the garage and even if this doesn't leak as it's likely to be a vacuum most of the time, it might well suck in a bit of air and aireate the oil. Not worth the risk I guess, just swap it over for a new one. So there's a bit of subframe + bulkhead modifying to do, and a few bolts to torque up and then the engine can get plumbed back in. Wooo!","title":"2010 06 06 done most of the bits on the v6"},{"location":"v6manta/2010/2010-06-06-done-most-of-the-bits-on-the-v6/#2010-06-06-2010-06-06-done-most-of-the-bits-on-the-v6","text":"One of the cam belt tensioners was making a bit of noise so I decided to chuck on a new set of tensionsers and a new cam belt. I fixed the bad weld in the sump, and decided to go over the whole lot internally with chemical metal to make sure I didn't miss anything else. I wish I had welded it inside and out to begin with, but I didn't, so hey ho. I'll probably get hold of another sump pan and make a new sump that is welded inside and out and then replace it when it's ready. I welded the dry sump tank back up too, after having damaged it whilst taking the engine + subframe out. Jacking up the car with the sump tank bolted on whilst it is still connected to the oil pump by the bottom hose is not recommended! lmao Wrapped all of the primaries too whilst the engine was out. I already had a few heat witness marks on the oil pressure sensor which was close to an un-wrapped primary! So I'll move that sensor anyway. Used vacuum rated hose for the scavenge pipes this time as it didn't arrive in time before we went down to the rollers, so that's another thing ticked off the list. Might replace this -10 90deg as it is now about 110deg as it was the one still connected to the dry sump tank when I jacked the car up! Got one up the garage and even if this doesn't leak as it's likely to be a vacuum most of the time, it might well suck in a bit of air and aireate the oil. Not worth the risk I guess, just swap it over for a new one. So there's a bit of subframe + bulkhead modifying to do, and a few bolts to torque up and then the engine can get plumbed back in. Wooo!","title":"2010-06-06 - 2010-06-06 Done most of the bits on the V6"},{"location":"v6manta/2010/2010-06-12-getting-ready-to-bolt-it-back-in/","text":"v6manta 2010-06-12 - 2010-06-12 Getting ready to bolt it back in \u00b6 Righty, had a day tinkering on the engine for the manta. Bolted the flywheel and clutch back on. A new spigot bearing was fitted because I completely mullered the last one - probably due to not aligning the clutch properly. Once there's a spigot bearing in, and especially with the twin plate clutch it really needs a decent alignment tool to be able to line up the input shaft. I also wanted to re-loom the engine, and now is really the ideal time to do it, whilst the engine is completely out of the car. The car loom can be re-done at some point in the future, but for now I wanted to get the engine loom done so that I can put the engine back in and not think that I'll have to take it out again soon to do the loom again. I had a couple of solder joints that would have been dry in a few hundred miles - a sign of the late nights of loom making to get the car to the rolling road, so I'm really glad I did it. I don't want to break down on the rollers again!! I had some heat damaged on the terminals of the oil pressure sensor, so I decided to remote mount it so that it wouldn't get damaged from the exhaust. It was only a few mm away from an unwrapped manifold pipe in all fairness!! When we went to bolt the gearbox on, it didn't want to sit flat against the engine block, the bell housing was raised on one side. After a few trial and error fittings we checked with a straight edge and the bellhousing has warped a bit due to the welding I did to close over the release arm opening and to move the cutout for the starter motor. We fixed this with a few M14 washers under the side of the bellhousing that has been welded. This should do the job. Need to get a few bits: 1/8 NPT female -3 fitting (or some way of converting to a -3 hose for the remote oil pressure sensor M12 x 35 or 40mm cap heads for bolting the bellhousing to the block More exhaust wrap 4-Way mini-timer connector for the coil pack probably other stuff that I've forgotten already!","title":"2010 06 12 getting ready to bolt it back in"},{"location":"v6manta/2010/2010-06-12-getting-ready-to-bolt-it-back-in/#2010-06-12-2010-06-12-getting-ready-to-bolt-it-back-in","text":"Righty, had a day tinkering on the engine for the manta. Bolted the flywheel and clutch back on. A new spigot bearing was fitted because I completely mullered the last one - probably due to not aligning the clutch properly. Once there's a spigot bearing in, and especially with the twin plate clutch it really needs a decent alignment tool to be able to line up the input shaft. I also wanted to re-loom the engine, and now is really the ideal time to do it, whilst the engine is completely out of the car. The car loom can be re-done at some point in the future, but for now I wanted to get the engine loom done so that I can put the engine back in and not think that I'll have to take it out again soon to do the loom again. I had a couple of solder joints that would have been dry in a few hundred miles - a sign of the late nights of loom making to get the car to the rolling road, so I'm really glad I did it. I don't want to break down on the rollers again!! I had some heat damaged on the terminals of the oil pressure sensor, so I decided to remote mount it so that it wouldn't get damaged from the exhaust. It was only a few mm away from an unwrapped manifold pipe in all fairness!! When we went to bolt the gearbox on, it didn't want to sit flat against the engine block, the bell housing was raised on one side. After a few trial and error fittings we checked with a straight edge and the bellhousing has warped a bit due to the welding I did to close over the release arm opening and to move the cutout for the starter motor. We fixed this with a few M14 washers under the side of the bellhousing that has been welded. This should do the job. Need to get a few bits: 1/8 NPT female -3 fitting (or some way of converting to a -3 hose for the remote oil pressure sensor M12 x 35 or 40mm cap heads for bolting the bellhousing to the block More exhaust wrap 4-Way mini-timer connector for the coil pack probably other stuff that I've forgotten already!","title":"2010-06-12 - 2010-06-12 Getting ready to bolt it back in"},{"location":"v6manta/2010/2010-06-19-almost-ready-to-go-back-in/","text":"v6manta 2010-06-19 - 2010-06-19 Almost ready to go back in \u00b6 Right, I think I've done most of the mods and prep I wanted to do before the engine and gearbox goes back in the car. I've modified the bulkhead to make it easier to get the engine in and out on the subframe. Mainly so that I don't have to remove the coilpack every time. The mounts for the subframe got abused and I ended up stripping the threads on the captive screws which position the subframe onto the chassis legs. So, I had to replace the bolts with new ones. The standard manta bushes here are rubber, but I made up some custom solid mount versions as otherwise the whole suspension (and geometry) moves around all over the place. I made a fitting up for the oil pressure sensor and repositioned it, as well as adding fittings to the clutch hydraulics so that I don't have to cut the hydraulics every time I want to remove the engine + gearbox and so that the bleed for the clutch is much easier to get at!! ...and th, th, th, th, that's all folks.","title":"2010 06 19 almost ready to go back in"},{"location":"v6manta/2010/2010-06-19-almost-ready-to-go-back-in/#2010-06-19-2010-06-19-almost-ready-to-go-back-in","text":"Right, I think I've done most of the mods and prep I wanted to do before the engine and gearbox goes back in the car. I've modified the bulkhead to make it easier to get the engine in and out on the subframe. Mainly so that I don't have to remove the coilpack every time. The mounts for the subframe got abused and I ended up stripping the threads on the captive screws which position the subframe onto the chassis legs. So, I had to replace the bolts with new ones. The standard manta bushes here are rubber, but I made up some custom solid mount versions as otherwise the whole suspension (and geometry) moves around all over the place. I made a fitting up for the oil pressure sensor and repositioned it, as well as adding fittings to the clutch hydraulics so that I don't have to cut the hydraulics every time I want to remove the engine + gearbox and so that the bleed for the clutch is much easier to get at!! ...and th, th, th, th, that's all folks.","title":"2010-06-19 - 2010-06-19 Almost ready to go back in"},{"location":"v6manta/2010/2010-09-22-lack-of-updates/","text":"v6manta 2010-09-22 - 2010-09-22 Lack of updates \u00b6 Sorry for the lack of updates! I've just been really busy attempting to get the manta ready for a trip to the ring. In the end, the Manta didn't make it as the engine got through two sets of big end bearings before I managed to get it mapped! So I had to borrow a mates track day car to go and do Spa and the Nurburgring. What an awesome holiday that was! Absolutely amazing, Spa is a brilliant track, Eau Rouge, Pouon, and Bruxell's are brilliant corners. The TV always makes these tracks look so easy, but they are extremely challenging. Really enjoyed this trip. So hopefully soon, the Manta will be up and running again. It ran for a bit and I went up and down the lane by the garage a few times to make sure it worked! ;) Some photos from when it was running! Some photos from the trip to Spa + the ring Couple of shots of the Astra going round the ring Roll on getting the Manta out there! :D","title":"2010 09 22 lack of updates"},{"location":"v6manta/2010/2010-09-22-lack-of-updates/#2010-09-22-2010-09-22-lack-of-updates","text":"Sorry for the lack of updates! I've just been really busy attempting to get the manta ready for a trip to the ring. In the end, the Manta didn't make it as the engine got through two sets of big end bearings before I managed to get it mapped! So I had to borrow a mates track day car to go and do Spa and the Nurburgring. What an awesome holiday that was! Absolutely amazing, Spa is a brilliant track, Eau Rouge, Pouon, and Bruxell's are brilliant corners. The TV always makes these tracks look so easy, but they are extremely challenging. Really enjoyed this trip. So hopefully soon, the Manta will be up and running again. It ran for a bit and I went up and down the lane by the garage a few times to make sure it worked! ;)","title":"2010-09-22 - 2010-09-22 Lack of updates"},{"location":"v6manta/2010/2010-09-26-few-little-bits/","text":"v6manta 2010-09-26 - 2010-09-26 Few little bits \u00b6 Didn't really do much this weekend, apart from have a tidy up, recover from going to Spa + the Ring and having an awesome bbq! Bored out the -12 oil return fitting, which had a big reduction in it. Here's a comparison of the bored out one, and the original: A big difference! Also a big difference is the -12 inlet to the pump instead of the -10 inlet: The only other thing I did was make some new spacers for the oil pump to get a little bit more belt tension, and to make the pump sit parallel. Also to use the lathe which I haven't used in a while! ;) It's better than jacking the car up and getting oily changing the big ends again, which is what I really need to do next.","title":"2010 09 26 few little bits"},{"location":"v6manta/2010/2010-09-26-few-little-bits/#2010-09-26-2010-09-26-few-little-bits","text":"Didn't really do much this weekend, apart from have a tidy up, recover from going to Spa + the Ring and having an awesome bbq! Bored out the -12 oil return fitting, which had a big reduction in it. Here's a comparison of the bored out one, and the original: A big difference! Also a big difference is the -12 inlet to the pump instead of the -10 inlet: The only other thing I did was make some new spacers for the oil pump to get a little bit more belt tension, and to make the pump sit parallel. Also to use the lathe which I haven't used in a while! ;) It's better than jacking the car up and getting oily changing the big ends again, which is what I really need to do next.","title":"2010-09-26 - 2010-09-26 Few little bits"},{"location":"v6manta/2010/2010-10-09-v6-oil-problems..../","text":"v6manta 2010-10-09 - 2010-10-09 V6 Oil problems.... \u00b6 Got the sump off the engine today as I have another set of big ends to go in. If this doesn't work, then it'll have to be engine out for a strip down. However, I did find something a bit more fundamental today. I had the oil stat for the oil cooler fitted to a remote filter head. These must be aligned properly in order for oil to flow correctly, but I had chucked mine on perpendicular to the remote filter head. Thus, the oil out of the remote filter head had to squeeze through a 2-3mm gap (opening is about 1cm^2). This is a big issue!! There's no way a V6 is going to get enough oil after that sort of restriction. I have proof! lol Bottom of the sump... Worst bearing What the oil filter had caught... So with all the changes now to the oil system, I'm a lot more confident in it actually holding together this time (so long as the rest of the engine has survived the oil starvation!). Good job I'm testing this oil system on a \u00a350 engine! I'm looking forward to getting this thing back together ASAP and getting it up and running again! :D","title":"2010 10 09 v6 oil problems...."},{"location":"v6manta/2010/2010-10-09-v6-oil-problems..../#2010-10-09-2010-10-09-v6-oil-problems","text":"Got the sump off the engine today as I have another set of big ends to go in. If this doesn't work, then it'll have to be engine out for a strip down. However, I did find something a bit more fundamental today. I had the oil stat for the oil cooler fitted to a remote filter head. These must be aligned properly in order for oil to flow correctly, but I had chucked mine on perpendicular to the remote filter head. Thus, the oil out of the remote filter head had to squeeze through a 2-3mm gap (opening is about 1cm^2). This is a big issue!! There's no way a V6 is going to get enough oil after that sort of restriction. I have proof! lol","title":"2010-10-09 - 2010-10-09 V6 Oil problems...."},{"location":"v6manta/2010/2010-10-12-starting-putting-the-engine-back-together/","text":"v6manta 2010-10-12 - 2010-10-12 Starting putting the engine back together \u00b6 Got a bit done up the garage tonight, but mainly drinking tea. Fitted the oil pump housing back onto the block: Didn't really do much else tbh! lmao I will put the bottom end back together at the weekend. But here are a couple of good photos that show one of the problems with the oil system. The first shows the remote filter housing next to the oil stat cooler take-off, aligned as they were when fitted on the car. The second photo is a composite of the two showing how the feed would have aligned mainly with a flat section of the oil cooler stat take-off. There is really not much room for oil to get through to the engine!! So I think my plan is to run without the oil stat to begin with. That coupled with the JIC-12 inlet to get more oil flow to the pump and measuring pressure in a sane place should make the difference the engine has been crying out for! We'll see at the weekend I guess...","title":"2010 10 12 starting putting the engine back together"},{"location":"v6manta/2010/2010-10-12-starting-putting-the-engine-back-together/#2010-10-12-2010-10-12-starting-putting-the-engine-back-together","text":"Got a bit done up the garage tonight, but mainly drinking tea. Fitted the oil pump housing back onto the block: Didn't really do much else tbh! lmao I will put the bottom end back together at the weekend. But here are a couple of good photos that show one of the problems with the oil system. The first shows the remote filter housing next to the oil stat cooler take-off, aligned as they were when fitted on the car. The second photo is a composite of the two showing how the feed would have aligned mainly with a flat section of the oil cooler stat take-off. There is really not much room for oil to get through to the engine!! So I think my plan is to run without the oil stat to begin with. That coupled with the JIC-12 inlet to get more oil flow to the pump and measuring pressure in a sane place should make the difference the engine has been crying out for! We'll see at the weekend I guess...","title":"2010-10-12 - 2010-10-12 Starting putting the engine back together"},{"location":"v6manta/2010/2010-10-23-v6-is-broke/","text":"v6manta 2010-10-23 - 2010-10-23 V6 is broke \u00b6 Pah! The engine is broke, boooo! So now it's back out for diagnosis. The original oil starvation must've damaged more than just the big ends. I have a feeling the first main is fubar and is blocking the oil supply to the first big end. I'll just build another fresh engine... Poo! LOL","title":"2010 10 23 v6 is broke"},{"location":"v6manta/2010/2010-10-23-v6-is-broke/#2010-10-23-2010-10-23-v6-is-broke","text":"Pah! The engine is broke, boooo! So now it's back out for diagnosis. The original oil starvation must've damaged more than just the big ends. I have a feeling the first main is fubar and is blocking the oil supply to the first big end. I'll just build another fresh engine... Poo! LOL","title":"2010-10-23 - 2010-10-23 V6 is broke"},{"location":"v6manta/2010/2010-10-24-stripping-the-v6/","text":"v6manta 2010-10-24 - 2010-10-24 Stripping the V6 \u00b6 Started stripping the V6, but snapped the only \u00bc\" drive up the garage that fits into the inlet enough to get at the bolts, the inlet manifolds are a complete pain! So anyway, will carry on stripping it down tomorrow night. The cam journals look alright up the top end though, so that's good news hopefully. I'll have a good look to see if I can keep running these heads as I did a lot of head work on them. Next weekend I'll go and pick up another engine, and this week get the bits to do an engine refresh on it. That way I can get one back together pretty quickly and get it back in the car. Don't want to hang about! Sorry, the photos are crap, I forgot to take my camera up the garage so had to take some photos with my phone instead:","title":"2010 10 24 stripping the v6"},{"location":"v6manta/2010/2010-10-24-stripping-the-v6/#2010-10-24-2010-10-24-stripping-the-v6","text":"Started stripping the V6, but snapped the only \u00bc\" drive up the garage that fits into the inlet enough to get at the bolts, the inlet manifolds are a complete pain! So anyway, will carry on stripping it down tomorrow night. The cam journals look alright up the top end though, so that's good news hopefully. I'll have a good look to see if I can keep running these heads as I did a lot of head work on them. Next weekend I'll go and pick up another engine, and this week get the bits to do an engine refresh on it. That way I can get one back together pretty quickly and get it back in the car. Don't want to hang about! Sorry, the photos are crap, I forgot to take my camera up the garage so had to take some photos with my phone instead:","title":"2010-10-24 - 2010-10-24 Stripping the V6"},{"location":"v6manta/2010/2010-10-25-v6-problem/","text":"v6manta 2010-10-25 - 2010-10-25 V6 problem \u00b6 Well, the problem is pretty terminal and obvious! Yep, the rod cap is totally out of round! The original damage is quite bad. Pretty good bit of damage for oil starvation. The heads look OK though, so that really is a bonus. The engine is completely stripped now and so hopefully I'll manage to get a replacement for the weekend. Need to make a phone call tomorrow and hopefully I can arrange to pick it up at the weekend. Glad to have found an obvious problem after all this faffing around though. I guess the oil stat problem I found was the reason for the original oil failure, so hopefully I can bolt something back together that is going to have a good chance of working! lol","title":"2010 10 25 v6 problem"},{"location":"v6manta/2010/2010-10-25-v6-problem/#2010-10-25-2010-10-25-v6-problem","text":"Well, the problem is pretty terminal and obvious! Yep, the rod cap is totally out of round! The original damage is quite bad. Pretty good bit of damage for oil starvation. The heads look OK though, so that really is a bonus. The engine is completely stripped now and so hopefully I'll manage to get a replacement for the weekend. Need to make a phone call tomorrow and hopefully I can arrange to pick it up at the weekend. Glad to have found an obvious problem after all this faffing around though. I guess the oil stat problem I found was the reason for the original oil failure, so hopefully I can bolt something back together that is going to have a good chance of working! lol","title":"2010-10-25 - 2010-10-25 V6 problem"},{"location":"v6manta/2010/2010-11-03-picked-up-a-replacement-v6/","text":"v6manta 2010-11-03 - 2010-11-03 Picked up a replacement V6 \u00b6 Just got back from picking up the replacement V6. Looks in pretty good nick, but will get stripped down and a quick rebuild before it's ready to go in.","title":"2010 11 03 picked up a replacement v6"},{"location":"v6manta/2010/2010-11-03-picked-up-a-replacement-v6/#2010-11-03-2010-11-03-picked-up-a-replacement-v6","text":"Just got back from picking up the replacement V6. Looks in pretty good nick, but will get stripped down and a quick rebuild before it's ready to go in.","title":"2010-11-03 - 2010-11-03 Picked up a replacement V6"},{"location":"v6manta/2010/2010-12-12-been-busy-building/","text":"v6manta 2010-12-12 - 2010-12-12 Been busy building \u00b6 I have been doing stuff, even though it's a while since I updated the project. I have built up and fitted the new V6. Here's some pretty photos of that: I started the new engine up and it made good oil pressure, but I started it when it was the coldest day of the year to date, and with the oil pressure valve screwed to maximum it still only managed about 70psi which started to tail off when the oil started to warm (and I mean warm! Not Hot!). So I rang Titan Motorsport (The manufacturer of the oil pump) and they confirmed via the serial number that the pump has a \u215d\" pressure stage - good for a 2ltr 4-pot, but not big enough for a V6! So a new pump is on order, 0.8\" pressure and twin 0.9\" scavenges. But while I'm bored waiting for that to arrive I decided to get the handbrake cables fitted so the car has a working cable handbrake and also to improve the efficiency of the rad by ducting the front end. I think that'll do a much better job of getting air through the rad, as the rad is sat so far back from the front of the car compared to std I was pretty sure the air through the rad would be pretty minimal. Plus when I was at the rollers last time, we struggled to get the thing cooling properly. So hopefully that'll be another disaster that won't happen when the engine gets mapped!","title":"2010 12 12 been busy building"},{"location":"v6manta/2010/2010-12-12-been-busy-building/#2010-12-12-2010-12-12-been-busy-building","text":"I have been doing stuff, even though it's a while since I updated the project. I have built up and fitted the new V6. Here's some pretty photos of that: I started the new engine up and it made good oil pressure, but I started it when it was the coldest day of the year to date, and with the oil pressure valve screwed to maximum it still only managed about 70psi which started to tail off when the oil started to warm (and I mean warm! Not Hot!). So I rang Titan Motorsport (The manufacturer of the oil pump) and they confirmed via the serial number that the pump has a \u215d\" pressure stage - good for a 2ltr 4-pot, but not big enough for a V6! So a new pump is on order, 0.8\" pressure and twin 0.9\" scavenges. But while I'm bored waiting for that to arrive I decided to get the handbrake cables fitted so the car has a working cable handbrake and also to improve the efficiency of the rad by ducting the front end. I think that'll do a much better job of getting air through the rad, as the rad is sat so far back from the front of the car compared to std I was pretty sure the air through the rad would be pretty minimal. Plus when I was at the rollers last time, we struggled to get the thing cooling properly. So hopefully that'll be another disaster that won't happen when the engine gets mapped!","title":"2010-12-12 - 2010-12-12 Been busy building"},{"location":"v6manta/2011/2011-01-01-finally-driven-the-manta-again-today/","text":"v6manta 2011-01-01 - 2011-01-01 Finally driven the manta again today \u00b6 Yay!! That was fun! Looks good, good oil pressure even when the oil was a good temperature.","title":"2011 01 01 finally driven the manta again today"},{"location":"v6manta/2011/2011-01-01-finally-driven-the-manta-again-today/#2011-01-01-2011-01-01-finally-driven-the-manta-again-today","text":"Yay!! That was fun! Looks good, good oil pressure even when the oil was a good temperature.","title":"2011-01-01 - 2011-01-01 Finally driven the manta again today"},{"location":"v6manta/2011/2011-03-13-fitting-some-new-seats/","text":"v6manta 2011-03-13 - 2011-03-13 Fitting some new seats! \u00b6 Got some new Corbeau Revolution seats now that I'm getting ready for strutineering. Turned out that it's a bit of a pain to fit them right, but I want to make sure the MSA regs were going to bite me in the ass, so I made sure all the dimensions and mountings were suitable for scrutineering. Only done the drivers side so far, will spend this week finishing off the passenger side! There is something like 100mm between the top of my crash hat and the top of the roll cage tube, so that will easily pass MSA regs :) Before, with the old Magnum seat, it never felt like I was going to pass that test, and anyway - it just felt plain wrong!","title":"2011 03 13 fitting some new seats"},{"location":"v6manta/2011/2011-03-13-fitting-some-new-seats/#2011-03-13-2011-03-13-fitting-some-new-seats","text":"Got some new Corbeau Revolution seats now that I'm getting ready for strutineering. Turned out that it's a bit of a pain to fit them right, but I want to make sure the MSA regs were going to bite me in the ass, so I made sure all the dimensions and mountings were suitable for scrutineering. Only done the drivers side so far, will spend this week finishing off the passenger side! There is something like 100mm between the top of my crash hat and the top of the roll cage tube, so that will easily pass MSA regs :) Before, with the old Magnum seat, it never felt like I was going to pass that test, and anyway - it just felt plain wrong!","title":"2011-03-13 - 2011-03-13 Fitting some new seats!"},{"location":"v6manta/2011/2011-03-13-the-manta-got-mapped/","text":"v6manta 2011-03-13 - 2011-03-13 The Manta got mapped! \u00b6 Didn't put an entry in for it, but the Manta successfully completed five hours on the rollers at Track and Road, where Steve, Steve and Andy did a marvelous job for me! :D Here are a couple of video's of the Manta being tested after mapping: Just waiting for Brands Hatch now on the 22 nd March, can't wait! It's going to be awesome fun!","title":"2011 03 13 the manta got mapped"},{"location":"v6manta/2011/2011-03-13-the-manta-got-mapped/#2011-03-13-2011-03-13-the-manta-got-mapped","text":"Didn't put an entry in for it, but the Manta successfully completed five hours on the rollers at Track and Road, where Steve, Steve and Andy did a marvelous job for me! :D Here are a couple of video's of the Manta being tested after mapping: Just waiting for Brands Hatch now on the 22 nd March, can't wait! It's going to be awesome fun!","title":"2011-03-13 - 2011-03-13 The Manta got mapped!"},{"location":"v6manta/2011/2011-03-25-went-to-brands-hatch/","text":"v6manta 2011-03-25 - 2011-03-25 Went to Brands Hatch \u00b6 The Manta had it's first successful outing at Brands Hatch, I'll just let the videos and photos do the talking. However, the car performed perfectly for it's first outing and didn't give me any troubles all day long.I've got a long list of bits and peices to sort out, but they are all niggling little things! Some in-car videos from the day The rest of the photos from Brands That was an awesome day! :-)","title":"2011 03 25 went to brands hatch"},{"location":"v6manta/2011/2011-03-25-went-to-brands-hatch/#2011-03-25-2011-03-25-went-to-brands-hatch","text":"The Manta had it's first successful outing at Brands Hatch, I'll just let the videos and photos do the talking. However, the car performed perfectly for it's first outing and didn't give me any troubles all day long.I've got a long list of bits and peices to sort out, but they are all niggling little things!","title":"2011-03-25 - 2011-03-25 Went to Brands Hatch"},{"location":"v6manta/2011/2011-09-04-started-work-on-the-2011-rebuild/","text":"v6manta 2011-09-04 - 2011-09-04 Started work on the 2011 Rebuild! \u00b6 I did some more on the front end that will get put on the Manta. It should work out okay as this can bolt on and off easily and fixes most things around the engine to the car. I started making the frame with a 1 \u00bd\" tube that will be welded in between the chassis legs at the front, with the rest of the frame held on by a couple of bolts: I put the bearings on with the tube that will house my ARB: ...and mounted that to the frame: Welded on some lower rad mounts (I want the rad to be mounted to the frame, not to the chassis - so it's easy to remove: Mounted the dry sump tank and catch tank: ...and then thought it best to make sure that it actually fits the car! lol. ARB is pretty much in the standard position relative to the ARB links. Just need to mount the water pump and oil filter and maybe an oil cooler too actually. Really need to get the engine and gearbox back in next though, just need to get the bellhousing skimmed.","title":"2011 09 04 started work on the 2011 rebuild"},{"location":"v6manta/2011/2011-09-04-started-work-on-the-2011-rebuild/#2011-09-04-2011-09-04-started-work-on-the-2011-rebuild","text":"I did some more on the front end that will get put on the Manta. It should work out okay as this can bolt on and off easily and fixes most things around the engine to the car. I started making the frame with a 1 \u00bd\" tube that will be welded in between the chassis legs at the front, with the rest of the frame held on by a couple of bolts: I put the bearings on with the tube that will house my ARB: ...and mounted that to the frame: Welded on some lower rad mounts (I want the rad to be mounted to the frame, not to the chassis - so it's easy to remove: Mounted the dry sump tank and catch tank: ...and then thought it best to make sure that it actually fits the car! lol. ARB is pretty much in the standard position relative to the ARB links. Just need to mount the water pump and oil filter and maybe an oil cooler too actually. Really need to get the engine and gearbox back in next though, just need to get the bellhousing skimmed.","title":"2011-09-04 - 2011-09-04 Started work on the 2011 Rebuild!"},{"location":"v6manta/2011/2011-09-10-built-some-more-of-the-frame/","text":"v6manta 2011-09-10 - 2011-09-10 Built some more of the frame \u00b6 I started feeling a bit better today after being all snotty yesterday, and I also got bored and so went up the garage and did a few bits on the Manta. I carried on making the frame for the front of the car. I made some M12 threaded inserts from some nuts, which actually turned out really well. Just need to get a couple of M12 rose joints for the rear mounting of the frame. I also need some more \u00be\" tube to finish it off too. It's a lot lighter than the 1\" tube. It's not like the frame has to be that strong tbh. Picked up my faced bellhousing too. The only ball-ache job I've got left to do is to make a new sump pan for the engine (One that doesn't leak for example!!)","title":"2011 09 10 built some more of the frame"},{"location":"v6manta/2011/2011-09-10-built-some-more-of-the-frame/#2011-09-10-2011-09-10-built-some-more-of-the-frame","text":"I started feeling a bit better today after being all snotty yesterday, and I also got bored and so went up the garage and did a few bits on the Manta. I carried on making the frame for the front of the car. I made some M12 threaded inserts from some nuts, which actually turned out really well. Just need to get a couple of M12 rose joints for the rear mounting of the frame. I also need some more \u00be\" tube to finish it off too. It's a lot lighter than the 1\" tube. It's not like the frame has to be that strong tbh. Picked up my faced bellhousing too. The only ball-ache job I've got left to do is to make a new sump pan for the engine (One that doesn't leak for example!!)","title":"2011-09-10 - 2011-09-10 Built some more of the frame"},{"location":"v6manta/2011/2011-09-14-started-work-on-the-new-sump-pan/","text":"v6manta 2011-09-14 - 2011-09-14 Started work on the new sump pan \u00b6 I started milling down a new sump pan to replace the old dry sump pan, which always leaked! This time around I am thinking of making the scavenge channel out of solid ali and machining it out. The previous pan was made of folded ali and was never really the right size. Both scavenge fittings leaked in the old pan - no matter how much sealant I used!","title":"2011 09 14 started work on the new sump pan"},{"location":"v6manta/2011/2011-09-14-started-work-on-the-new-sump-pan/#2011-09-14-2011-09-14-started-work-on-the-new-sump-pan","text":"I started milling down a new sump pan to replace the old dry sump pan, which always leaked! This time around I am thinking of making the scavenge channel out of solid ali and machining it out. The previous pan was made of folded ali and was never really the right size. Both scavenge fittings leaked in the old pan - no matter how much sealant I used!","title":"2011-09-14 - 2011-09-14 Started work on the new sump pan"},{"location":"v6manta/2011/2011-09-15-more-subframe-work/","text":"v6manta 2011-09-15 - 2011-09-15 More subframe work \u00b6 Did some more: Tested it again in the engine bay. Next I'm going to have to sort the engine bay out and put the engine back in to be able to do any more work on this frame. I was looking at it, thinking \"I'm sure the oil pump is meant to be there..., and I'm sure the alternator should be there along with the front pulley!\". So chances are it'll need modifying quite a lot when I have the engine in place! lmao Doh!","title":"2011 09 15 more subframe work"},{"location":"v6manta/2011/2011-09-15-more-subframe-work/#2011-09-15-2011-09-15-more-subframe-work","text":"Did some more: Tested it again in the engine bay. Next I'm going to have to sort the engine bay out and put the engine back in to be able to do any more work on this frame. I was looking at it, thinking \"I'm sure the oil pump is meant to be there..., and I'm sure the alternator should be there along with the front pulley!\". So chances are it'll need modifying quite a lot when I have the engine in place! lmao Doh!","title":"2011-09-15 - 2011-09-15 More subframe work"},{"location":"v6manta/2011/2011-09-17-gearbox-back-together/","text":"v6manta 2011-09-17 - 2011-09-17 Gearbox back together \u00b6 I should have been painting the engine bay, but I couldn't be arsed to go up the garage and do the messy work, so instead I'll just put the engine and box back in without painting to enable me to finish off the frame and mounting of everything and then take it back out to finish everything off and re-do the sump.So today I put the gearbox back together properly and put the now-flat bellhousing back on along with the clutch release bearing. So tomorrow I'll try and get the clutch on, and the engine and box back in place to finish re-mounting everything.","title":"2011 09 17 gearbox back together"},{"location":"v6manta/2011/2011-09-17-gearbox-back-together/#2011-09-17-2011-09-17-gearbox-back-together","text":"I should have been painting the engine bay, but I couldn't be arsed to go up the garage and do the messy work, so instead I'll just put the engine and box back in without painting to enable me to finish off the frame and mounting of everything and then take it back out to finish everything off and re-do the sump.So today I put the gearbox back together properly and put the now-flat bellhousing back on along with the clutch release bearing. So tomorrow I'll try and get the clutch on, and the engine and box back in place to finish re-mounting everything.","title":"2011-09-17 - 2011-09-17 Gearbox back together"},{"location":"v6manta/2011/2011-09-25-getting-ready-to-spray-the-engine-bay-again.../","text":"v6manta 2011-09-25 - 2011-09-25 Getting ready to spray the engine bay again... \u00b6 So I had the engine in for a bit to make sure the sump fits as it is now 5mm deeper to get some more space between the crank scraper and the main sump plate. The frame did fit, but some things were in the wrong place and the cross bar was very close to the crank alternator pulley So I put a whoop in the cross bar to get some more clearance, and moved the dry sump tank (to get it higher). I've also moved the dry sump pump about an inch and a half lower to help the gravity feed from the tank Then I took the engine back out so I can start prepping the engine bay Then, the backstreet garage touch-up spray prep begins...","title":"2011 09 25 getting ready to spray the engine bay again..."},{"location":"v6manta/2011/2011-09-25-getting-ready-to-spray-the-engine-bay-again.../#2011-09-25-2011-09-25-getting-ready-to-spray-the-engine-bay-again","text":"So I had the engine in for a bit to make sure the sump fits as it is now 5mm deeper to get some more space between the crank scraper and the main sump plate. The frame did fit, but some things were in the wrong place and the cross bar was very close to the crank alternator pulley So I put a whoop in the cross bar to get some more clearance, and moved the dry sump tank (to get it higher). I've also moved the dry sump pump about an inch and a half lower to help the gravity feed from the tank Then I took the engine back out so I can start prepping the engine bay Then, the backstreet garage touch-up spray prep begins...","title":"2011-09-25 - 2011-09-25 Getting ready to spray the engine bay again..."},{"location":"v6manta/2011/2011-10-16-moving-along-with-the-rebuild/","text":"v6manta 2011-10-16 - 2011-10-16 Moving along with the rebuild \u00b6 I started painting the engine bay, but I mucked up the paint mix so it's a miracle it didn't go completely wrong. All I need to do is another mix and another load of paint and give the bay one more coat, then all should be fine! I also started work on the new dry sump setup, which hopefully will be leak-free! The old sump pan always leaked a bit. Well, weeped really, but it's still annoying! I milled out the main scavenge channel, which took a while to do manually! Oh how I wish for a CNC mill! But the result is pretty good. All I have to do now is machine off some excess from the bottom (under the channel) and the holes needed for the scavenge pipes.","title":"2011 10 16 moving along with the rebuild"},{"location":"v6manta/2011/2011-10-16-moving-along-with-the-rebuild/#2011-10-16-2011-10-16-moving-along-with-the-rebuild","text":"I started painting the engine bay, but I mucked up the paint mix so it's a miracle it didn't go completely wrong. All I need to do is another mix and another load of paint and give the bay one more coat, then all should be fine! I also started work on the new dry sump setup, which hopefully will be leak-free! The old sump pan always leaked a bit. Well, weeped really, but it's still annoying! I milled out the main scavenge channel, which took a while to do manually! Oh how I wish for a CNC mill! But the result is pretty good. All I have to do now is machine off some excess from the bottom (under the channel) and the holes needed for the scavenge pipes.","title":"2011-10-16 - 2011-10-16 Moving along with the rebuild"},{"location":"v6manta/2011/2011-10-18-painted-the-engine-bay/","text":"v6manta 2011-10-18 - 2011-10-18 Painted the engine bay \u00b6 Finally got round to painting the engine bay. This time it went a bit more successfully!","title":"2011 10 18 painted the engine bay"},{"location":"v6manta/2011/2011-10-18-painted-the-engine-bay/#2011-10-18-2011-10-18-painted-the-engine-bay","text":"Finally got round to painting the engine bay. This time it went a bit more successfully!","title":"2011-10-18 - 2011-10-18 Painted the engine bay"},{"location":"v6manta/2011/2011-11-15-dry-sump-work.../","text":"v6manta 2011-11-15 - 2011-11-15 Dry sump work... \u00b6 I have been working a bit on the new sump. This time round I gave the sump a bloody good de-greasing and the final stage will be an acid dip before welding. I bought some 4mm aluminium plate to weld on as the base, so I started profiling it so that it'll fit. I'm leaving the material in place this time which sits in front of the flywheel. It'll offer it some protection. Previously the flywheel was easily visible and could easily take a battering! On the bottom of the sump will be the channel that I milled out to perform the scavenging... So really the next step is a bit more profiling of the plate, maybe a bit of bending too in order to get a slope into the scavenge channel (I didn't have that in the last sump) and then it's just a case of weld, weld, weld...","title":"2011 11 15 dry sump work..."},{"location":"v6manta/2011/2011-11-15-dry-sump-work.../#2011-11-15-2011-11-15-dry-sump-work","text":"I have been working a bit on the new sump. This time round I gave the sump a bloody good de-greasing and the final stage will be an acid dip before welding. I bought some 4mm aluminium plate to weld on as the base, so I started profiling it so that it'll fit. I'm leaving the material in place this time which sits in front of the flywheel. It'll offer it some protection. Previously the flywheel was easily visible and could easily take a battering! On the bottom of the sump will be the channel that I milled out to perform the scavenging... So really the next step is a bit more profiling of the plate, maybe a bit of bending too in order to get a slope into the scavenge channel (I didn't have that in the last sump) and then it's just a case of weld, weld, weld...","title":"2011-11-15 - 2011-11-15 Dry sump work..."},{"location":"v6manta/2012/2012-01-09-dry-sump-pan-is-welded/","text":"v6manta 2012-01-09 - 2012-01-09 Dry sump pan is welded \u00b6 The dry sump pan main section is now fully welded. All I need to do now is test for leaks in this part of the welding, and then I can weld the scavenge channel on and machine the pan so that the scavenge channel will actually receive oil!!","title":"2012 01 09 dry sump pan is welded"},{"location":"v6manta/2012/2012-01-09-dry-sump-pan-is-welded/#2012-01-09-2012-01-09-dry-sump-pan-is-welded","text":"The dry sump pan main section is now fully welded. All I need to do now is test for leaks in this part of the welding, and then I can weld the scavenge channel on and machine the pan so that the scavenge channel will actually receive oil!!","title":"2012-01-09 - 2012-01-09 Dry sump pan is welded"},{"location":"v6manta/2012/2012-01-27-more-dry-sump-work/","text":"v6manta 2012-01-27 - More Dry Sump Work \u00b6 Been doing some more work on the new dry sump pan. Namely, I welded on the scavenge channel, which went pretty well. It's definitely sealed! The welding went really well Machining \u00b6 I machined the scavenge channel out of the flat plate: Also changed the scavenge fittings from hose + jubilee fittings over to be -10 JIC/AN fittings: :D","title":"2012 01 27 more dry sump work"},{"location":"v6manta/2012/2012-01-27-more-dry-sump-work/#2012-01-27-more-dry-sump-work","text":"Been doing some more work on the new dry sump pan. Namely, I welded on the scavenge channel, which went pretty well. It's definitely sealed! The welding went really well","title":"2012-01-27 - More Dry Sump Work"},{"location":"v6manta/2012/2012-01-27-more-dry-sump-work/#machining","text":"I machined the scavenge channel out of the flat plate: Also changed the scavenge fittings from hose + jubilee fittings over to be -10 JIC/AN fittings: :D","title":"Machining"},{"location":"v6manta/2012/2012-02-21-engine-is-back-in.../","text":"v6manta 2012-02-21 - Engine is back in... \u00b6 Got the engine back in with the sump finally fitted. So hopefully everything else can be fitted back together pretty quickly and the car prepped for Germany. I leak tested the sump with some screen wash. I mainly just wanted to leak test the hose fittings which are an O-Ring seal. They are the weakest point really. The leak test was a go - no problems with the sump. In fact, nothing at all leaked, so hopefully this sump will actually be dry!! ;) No problems with leaking here! So after the leak test I made the hoses up. It surprising how much room JIC hoses can take as the minimum bend radius is quite large and the fittings are huge. But after a while I came up with this: So long as the sump misses the cross member and steering rack, and the hoses miss the cross member, and engine mounts it should be good. They only way to find out is to fit everything onto the actual engine and get it in position to find out if anything interfere's... et Voila! Nothing appears to be interference fit. It is also pretty close though! I call it precision engineering, but other's might refer to it as luck! ;) Anyway, the engine mounts are fitted and it appears to all line up okay. Just got to fit the spherical joint spacers in the mounts and I can start fitted everything else that was removed for re-painting the engine bay. Seems like there is quite a lot left to get done before Germany!!! Got to get this thing MOT'd again soon.","title":"2012 02 21 engine is back in..."},{"location":"v6manta/2012/2012-02-21-engine-is-back-in.../#2012-02-21-engine-is-back-in","text":"Got the engine back in with the sump finally fitted. So hopefully everything else can be fitted back together pretty quickly and the car prepped for Germany. I leak tested the sump with some screen wash. I mainly just wanted to leak test the hose fittings which are an O-Ring seal. They are the weakest point really. The leak test was a go - no problems with the sump. In fact, nothing at all leaked, so hopefully this sump will actually be dry!! ;) No problems with leaking here! So after the leak test I made the hoses up. It surprising how much room JIC hoses can take as the minimum bend radius is quite large and the fittings are huge. But after a while I came up with this: So long as the sump misses the cross member and steering rack, and the hoses miss the cross member, and engine mounts it should be good. They only way to find out is to fit everything onto the actual engine and get it in position to find out if anything interfere's... et Voila! Nothing appears to be interference fit. It is also pretty close though! I call it precision engineering, but other's might refer to it as luck! ;) Anyway, the engine mounts are fitted and it appears to all line up okay. Just got to fit the spherical joint spacers in the mounts and I can start fitted everything else that was removed for re-painting the engine bay. Seems like there is quite a lot left to get done before Germany!!! Got to get this thing MOT'd again soon.","title":"2012-02-21 - Engine is back in..."},{"location":"v6manta/2012/2012-02-24-took-the-engine-back-out-again/","text":"v6manta 2012-02-24 - Took the engine back out again! \u00b6 Whilst trying to get the last bolt in the engine mounts and wondering why everything was a bit too solid to let me get it in, I noticed that the new JIC hose on the sump was interfering with the subframe: So I had to remove the engine again to modify the subframe to clear the hose. But at least it'll give me the chance to re-wrap the exhaust manifolds properly before I put it in again at the weekend.","title":"2012 02 24 took the engine back out again"},{"location":"v6manta/2012/2012-02-24-took-the-engine-back-out-again/#2012-02-24-took-the-engine-back-out-again","text":"Whilst trying to get the last bolt in the engine mounts and wondering why everything was a bit too solid to let me get it in, I noticed that the new JIC hose on the sump was interfering with the subframe: So I had to remove the engine again to modify the subframe to clear the hose. But at least it'll give me the chance to re-wrap the exhaust manifolds properly before I put it in again at the weekend.","title":"2012-02-24 - Took the engine back out again!"},{"location":"v6manta/2012/2012-02-27-engine-back-in-again/","text":"v6manta 2012-02-27 - Engine back in (again!) \u00b6 Having now modified the subframe to clear the sump fittings (just!) I managed to get the engine back in, and looking a bit better too. The exhaust manifold's wrapping was looking a little past it's best: So I decided to wrap both manifolds again with some new wrap... I also decided that the hose that interfered with the subframe was too risky to use and it had got a proper beating. So I decided to remake it with some new hose just to make sure: I also remembered that I had bent a rose joint on one of the engine mounts when I took the engine out after Germany last year, and so I replaced it. I tested to see if it would bend back straight: I refitted the exhaust manifolds. The manifolds had been blowing a bit at the manifold flanges, so I decided to give a bit more sealing with some assembly putty this time round and see if it made any difference: Then it was time to get the engine back in place: Et voila! Now to start hooking everything back up and get her started up again. Can't wait to get to drive it again! Woooooo! :D","title":"2012 02 27 engine back in again"},{"location":"v6manta/2012/2012-02-27-engine-back-in-again/#2012-02-27-engine-back-in-again","text":"Having now modified the subframe to clear the sump fittings (just!) I managed to get the engine back in, and looking a bit better too. The exhaust manifold's wrapping was looking a little past it's best: So I decided to wrap both manifolds again with some new wrap... I also decided that the hose that interfered with the subframe was too risky to use and it had got a proper beating. So I decided to remake it with some new hose just to make sure: I also remembered that I had bent a rose joint on one of the engine mounts when I took the engine out after Germany last year, and so I replaced it. I tested to see if it would bend back straight: I refitted the exhaust manifolds. The manifolds had been blowing a bit at the manifold flanges, so I decided to give a bit more sealing with some assembly putty this time round and see if it made any difference: Then it was time to get the engine back in place: Et voila! Now to start hooking everything back up and get her started up again. Can't wait to get to drive it again! Woooooo! :D","title":"2012-02-27 - Engine back in (again!)"},{"location":"v6manta/2012/2012-03-14-mostly-plumbed-back-in/","text":"v6manta 2012-03-14 - Mostly plumbed back in \u00b6 I've been putting it all together, it's coming along! :D","title":"2012 03 14 mostly plumbed back in"},{"location":"v6manta/2012/2012-03-14-mostly-plumbed-back-in/#2012-03-14-mostly-plumbed-back-in","text":"I've been putting it all together, it's coming along! :D","title":"2012-03-14 - Mostly plumbed back in"},{"location":"v6manta/2012/2012-04-04-started-her-up-again/","text":"v6manta 2012-04-04 - Started her up again! \u00b6 I finished bolting everything back on the engine, and started with a few extras like a cold air feed and exhaust manifold shields as the under bonnet temperatures last year were a bit keen! After checking everything over it was time to start her up again. First checked fuel pressure - all was good and no leaks. Then checked oil pressure with a drill on the dry sump pump while the belt was removed, again all was good and no leaks. The coolant system was quickly filled and bled, and AGAIN no leaks! Very unusual! lol Started up using the fuel that's sat in the tank for the best part of a year and she burst into life. Missing quite a bit, but pretty responsive and definitely working okay whilst not chucking oil, fuel or coolant all over the place so I'll class that as a win! So now it needs some fresh fuel, and a new set of plugs and we should be all good. The rest of the exhaust needs fitting as does the prop and some gearbox oil would be nice too! Then it's just mechanical handbrake and the final checks for MOT things that need to be done before I can drive it down to the MOT station to get a ticket. :D Can't wait!","title":"2012 04 04 started her up again"},{"location":"v6manta/2012/2012-04-04-started-her-up-again/#2012-04-04-started-her-up-again","text":"I finished bolting everything back on the engine, and started with a few extras like a cold air feed and exhaust manifold shields as the under bonnet temperatures last year were a bit keen! After checking everything over it was time to start her up again. First checked fuel pressure - all was good and no leaks. Then checked oil pressure with a drill on the dry sump pump while the belt was removed, again all was good and no leaks. The coolant system was quickly filled and bled, and AGAIN no leaks! Very unusual! lol Started up using the fuel that's sat in the tank for the best part of a year and she burst into life. Missing quite a bit, but pretty responsive and definitely working okay whilst not chucking oil, fuel or coolant all over the place so I'll class that as a win! So now it needs some fresh fuel, and a new set of plugs and we should be all good. The rest of the exhaust needs fitting as does the prop and some gearbox oil would be nice too! Then it's just mechanical handbrake and the final checks for MOT things that need to be done before I can drive it down to the MOT station to get a ticket. :D Can't wait!","title":"2012-04-04 - Started her up again!"},{"location":"v6manta/2012/2012-04-16-ready-for-a-test-drive/","text":"v6manta 2012-04-16 - Ready for a test drive \u00b6 The Manta is once again ready for a test drive. Everything is together and working okay. No oil leaks, and nothing getting too smokey. I warmed it up with some fresh petrol to check everything and waited for the cooling fan to kick in. Everything seems perfect, so hopefully that's how it'll drive! :D Broom, Broom! :-D EDIT: Chris, The coolant system is using a Davies Craig EWP115 electric water pump. The coolant system is arranged as below. I will get a few photos for you in the next post. Thanks for your interest! \u00ac","title":"2012 04 16 ready for a test drive"},{"location":"v6manta/2012/2012-04-16-ready-for-a-test-drive/#2012-04-16-ready-for-a-test-drive","text":"The Manta is once again ready for a test drive. Everything is together and working okay. No oil leaks, and nothing getting too smokey. I warmed it up with some fresh petrol to check everything and waited for the cooling fan to kick in. Everything seems perfect, so hopefully that's how it'll drive! :D Broom, Broom! :-D EDIT: Chris, The coolant system is using a Davies Craig EWP115 electric water pump. The coolant system is arranged as below. I will get a few photos for you in the next post. Thanks for your interest! \u00ac","title":"2012-04-16 - Ready for a test drive"},{"location":"v6manta/2012/2012-05-09-clutch-release-bearing-failure/","text":"v6manta 2012-05-09 - Clutch Release Bearing Failure \u00b6 Well, really user error! I've never put a stop on the clutch pedal to limit the throw of the hydraulic release bearing, and now it's come to bite me in the ass! The bearing over-stroked and was crooked in it's bore and so was very tight. It couldn't be moved by hand at all! Oh well. Had to take it apart to find out that this had happened, and the bearing piston was solid in its bore! Sigh - Won't be going to Germany in it in a few weeks now! :(","title":"2012 05 09 clutch release bearing failure"},{"location":"v6manta/2012/2012-05-09-clutch-release-bearing-failure/#2012-05-09-clutch-release-bearing-failure","text":"Well, really user error! I've never put a stop on the clutch pedal to limit the throw of the hydraulic release bearing, and now it's come to bite me in the ass! The bearing over-stroked and was crooked in it's bore and so was very tight. It couldn't be moved by hand at all! Oh well. Had to take it apart to find out that this had happened, and the bearing piston was solid in its bore! Sigh - Won't be going to Germany in it in a few weeks now! :(","title":"2012-05-09 - Clutch Release Bearing Failure"},{"location":"v6manta/2012/2012-05-17-stripping-the-t5-gearbox/","text":"v6manta 2012-05-17 - Stripping the T5 Gearbox \u00b6 I've started stripping the Cosworth T5 gearbox as it had play in the input shaft (even though it didn't when it went in a few miles ago!) and a very noisy fifth gear. Likely it's just bearings that need replacing. One of the bearings is a Timken 28577 / 25821 - the rest I'll have to look up. The input shaft bearing is new anyway, I changed that when I replaced the input shaft. EDIT: The SKF Part number for this bearing is 25877/2/25821/2/Q Anyway, the gearbox is partially apart. Next week I'm off work, so I'm probably going to get on with it then - I really want the car back together! :( Only getting to drive it a few miles sucks!!!!","title":"2012 05 17 stripping the t5 gearbox"},{"location":"v6manta/2012/2012-05-17-stripping-the-t5-gearbox/#2012-05-17-stripping-the-t5-gearbox","text":"I've started stripping the Cosworth T5 gearbox as it had play in the input shaft (even though it didn't when it went in a few miles ago!) and a very noisy fifth gear. Likely it's just bearings that need replacing. One of the bearings is a Timken 28577 / 25821 - the rest I'll have to look up. The input shaft bearing is new anyway, I changed that when I replaced the input shaft. EDIT: The SKF Part number for this bearing is 25877/2/25821/2/Q Anyway, the gearbox is partially apart. Next week I'm off work, so I'm probably going to get on with it then - I really want the car back together! :( Only getting to drive it a few miles sucks!!!!","title":"2012-05-17 - Stripping the T5 Gearbox"},{"location":"v6manta/2012/2012-10-13-rebuilt-the-gearbox/","text":"v6manta 2012-10-13 - Rebuilt The Gearbox \u00b6 So, finally got the last of the bits needed and the time needed to rebuild the gearbox! After ages of tinkering with the gearset to try and shoehorn it into the case, it turned out a misaligned sleeve meant the gears were around 3-4mm spread out, resulting in it not going in! So now it's back together and shimmed up, hopefully it won't make god awful noises in 5 th gear!","title":"2012 10 13 rebuilt the gearbox"},{"location":"v6manta/2012/2012-10-13-rebuilt-the-gearbox/#2012-10-13-rebuilt-the-gearbox","text":"So, finally got the last of the bits needed and the time needed to rebuild the gearbox! After ages of tinkering with the gearset to try and shoehorn it into the case, it turned out a misaligned sleeve meant the gears were around 3-4mm spread out, resulting in it not going in! So now it's back together and shimmed up, hopefully it won't make god awful noises in 5 th gear!","title":"2012-10-13 - Rebuilt The Gearbox"},{"location":"v6manta/2012/2012-11-11-finally-the-engines-back-in/","text":"v6manta 2012-11-11 - Finally the engine's back in! \u00b6 Finally got round to fitting the gearbox on the engine and fitting the lot back into the car. It feels great to get it back in one piece at last! So now just plumbing and what-not to do before I can start it up and go for a 'spin' again! Woohoo! :D","title":"2012 11 11 finally the engines back in"},{"location":"v6manta/2012/2012-11-11-finally-the-engines-back-in/#2012-11-11-finally-the-engines-back-in","text":"Finally got round to fitting the gearbox on the engine and fitting the lot back into the car. It feels great to get it back in one piece at last! So now just plumbing and what-not to do before I can start it up and go for a 'spin' again! Woohoo! :D","title":"2012-11-11 - Finally the engine's back in!"},{"location":"v6manta/2012/2012-11-14-nearly-back-together/","text":"v6manta 2012-11-14 - Nearly back together \u00b6 Nearly finished putting the Manta back together last night. Just the prop, exhaust and a few hose clips + electrical connections to do and then we're ready to go for a test drive again! Woohoo! :D Had to repair a hose that I damaged when removing the engine! It's best to always remember when hoses wrap around the subframe so that you at undo one end before trying to pull the engine out! Luckily the damaged hose was more than long enough to suffer the lost length. That's certainly not true for any other hose on the oil system! Nearly there!","title":"2012 11 14 nearly back together"},{"location":"v6manta/2012/2012-11-14-nearly-back-together/#2012-11-14-nearly-back-together","text":"Nearly finished putting the Manta back together last night. Just the prop, exhaust and a few hose clips + electrical connections to do and then we're ready to go for a test drive again! Woohoo! :D Had to repair a hose that I damaged when removing the engine! It's best to always remember when hoses wrap around the subframe so that you at undo one end before trying to pull the engine out! Luckily the damaged hose was more than long enough to suffer the lost length. That's certainly not true for any other hose on the oil system! Nearly there!","title":"2012-11-14 - Nearly back together"},{"location":"v6manta/2012/2012-11-25-the-finishing-touches/","text":"v6manta 2012-11-25 - The finishing touches \u00b6 Just doing some finishing touches to the Manta before I can take it for a test drive now. Need to get some coolant as I forgot to pick any up before the weekend! The prop and the exhaust are now back on - the battery is on charge. I thought I best do something though, so I fitted some brake ducts that I've had lying around for an age! They came out alright. I'm not entirely sure they're really needed, but I have the discs shielded with an air duct inlet so I might as well at least fit them! So nearly there! Next time I'm up I can get it all up and running again. Need to get the dash connected again and I need to make a cowling for the dash too - I have one designed, just need to make the thing! Then after it's on the road I need to get the front ARB finished. Will be good to get it that done! I've yet to drive it with a front AND rear anti-roll bar!","title":"2012 11 25 the finishing touches"},{"location":"v6manta/2012/2012-11-25-the-finishing-touches/#2012-11-25-the-finishing-touches","text":"Just doing some finishing touches to the Manta before I can take it for a test drive now. Need to get some coolant as I forgot to pick any up before the weekend! The prop and the exhaust are now back on - the battery is on charge. I thought I best do something though, so I fitted some brake ducts that I've had lying around for an age! They came out alright. I'm not entirely sure they're really needed, but I have the discs shielded with an air duct inlet so I might as well at least fit them! So nearly there! Next time I'm up I can get it all up and running again. Need to get the dash connected again and I need to make a cowling for the dash too - I have one designed, just need to make the thing! Then after it's on the road I need to get the front ARB finished. Will be good to get it that done! I've yet to drive it with a front AND rear anti-roll bar!","title":"2012-11-25 - The finishing touches"},{"location":"v6manta/2012/2012-11-28-finally-the-v6-manta-up-a-running-again/","text":"v6manta 2012-11-28 - Finally the V6 Manta up a running again! \u00b6 After what seems like an eternity I have the V6 manta up and running again! Thank the lord for that! It's taken ages to get back on the road again. This time hopefully we'll keep it on the road for more than a few miles and manage to do a few trackdays in it! That would be nice tbh! Here's a quick proof video, that it does run! (Nothing more though, don't get too excited! lol) ..and here's a few photos of how it's looking with the brake ducts now fitted too:","title":"2012 11 28 finally the v6 manta up a running again"},{"location":"v6manta/2012/2012-11-28-finally-the-v6-manta-up-a-running-again/#2012-11-28-finally-the-v6-manta-up-a-running-again","text":"After what seems like an eternity I have the V6 manta up and running again! Thank the lord for that! It's taken ages to get back on the road again. This time hopefully we'll keep it on the road for more than a few miles and manage to do a few trackdays in it! That would be nice tbh! Here's a quick proof video, that it does run! (Nothing more though, don't get too excited! lol) ..and here's a few photos of how it's looking with the brake ducts now fitted too:","title":"2012-11-28 - Finally the V6 Manta up a running again!"},{"location":"v6manta/2012/2012-12-30-virtually-back-on-the-road/","text":"v6manta 2012-12-30 - Virtually back on the road \u00b6 The manta is now practically back on the road. I just need to sort out the dash now. Two tiny jobs to do - remount the oil pump in the right place as it's slightly on the wonk and re-connect the steering column at the correct angle! The dash then needs re-fitting and then there's a lot of tidying up to do, but only after it has an MOT. I made a clutch stop to stop me from over-stroking the clutch. It's a pretty simple, but adjustable affair that I simply welded in place on the bulkhead - a bit of white paint will make it look like a bit of a better job tbh!","title":"2012 12 30 virtually back on the road"},{"location":"v6manta/2012/2012-12-30-virtually-back-on-the-road/#2012-12-30-virtually-back-on-the-road","text":"The manta is now practically back on the road. I just need to sort out the dash now. Two tiny jobs to do - remount the oil pump in the right place as it's slightly on the wonk and re-connect the steering column at the correct angle! The dash then needs re-fitting and then there's a lot of tidying up to do, but only after it has an MOT. I made a clutch stop to stop me from over-stroking the clutch. It's a pretty simple, but adjustable affair that I simply welded in place on the bulkhead - a bit of white paint will make it look like a bit of a better job tbh!","title":"2012-12-30 - Virtually back on the road"},{"location":"v6manta/2013/2013-01-10-driven-the-manta-again/","text":"v6manta 2013-01-10 - Driven the Manta again! \u00b6 Finally I got to have a blast in the Manta! It didn't fall apart or break, or anything! Anyway, here's a quick vid which shows just one thing: I need to sort out the headlights! They are and always have been bloody awful. So, I got myself on eBay and bought a H4-3 35W dual xenon Hi/Lo HID set. They are cheaper than a set of good standard H4 bulbs. I suppose we'll have to wait and see if they are any good though. For \u00a330 it's worth a punt. While I'm at it, I could do with getting some LED lights for the rest of the car: Front Sidelights and Side Repeaters - Bosch 233 Fitting: BA9s (4W) Indicator lights - Bosch 382 (Also know as type 1156) Fitting: BA15s (21W) Rear stop/Brake lights - Bosch 380 (Also known as type 1157) Fitting: BAY15d (21W/5W) There's one slight oil leak to fix at the oil filter and the rest looks A-Okay. Will be good to get some more information on the dash too so that it's easier to keep an eye on what's going on - oh and getting the speedo to work too would be nice!","title":"2013 01 10 driven the manta again"},{"location":"v6manta/2013/2013-01-10-driven-the-manta-again/#2013-01-10-driven-the-manta-again","text":"Finally I got to have a blast in the Manta! It didn't fall apart or break, or anything! Anyway, here's a quick vid which shows just one thing: I need to sort out the headlights! They are and always have been bloody awful. So, I got myself on eBay and bought a H4-3 35W dual xenon Hi/Lo HID set. They are cheaper than a set of good standard H4 bulbs. I suppose we'll have to wait and see if they are any good though. For \u00a330 it's worth a punt. While I'm at it, I could do with getting some LED lights for the rest of the car: Front Sidelights and Side Repeaters - Bosch 233 Fitting: BA9s (4W) Indicator lights - Bosch 382 (Also know as type 1156) Fitting: BA15s (21W) Rear stop/Brake lights - Bosch 380 (Also known as type 1157) Fitting: BAY15d (21W/5W) There's one slight oil leak to fix at the oil filter and the rest looks A-Okay. Will be good to get some more information on the dash too so that it's easier to keep an eye on what's going on - oh and getting the speedo to work too would be nice!","title":"2013-01-10 - Driven the Manta again!"},{"location":"v6manta/2013/2013-01-15-had-a-great-blast-in-the-manta/","text":"v6manta 2013-01-15 - Had a great blast in the Manta \u00b6 Finally the day came where I could have a good blast in the Manta. We tooled up with camera's and started her up. That was such a fun morning! Nice to get up the garage, blast around in the car and have some fun and then head home without having to do anything messy or annoying! :D WooHoo! Nothing fell off or blew up either, so that's a bonus! The first video is my favourite, I'm guessing we'll remember that day for a long time as it was just so much fun!","title":"2013 01 15 had a great blast in the manta"},{"location":"v6manta/2013/2013-01-15-had-a-great-blast-in-the-manta/#2013-01-15-had-a-great-blast-in-the-manta","text":"Finally the day came where I could have a good blast in the Manta. We tooled up with camera's and started her up. That was such a fun morning! Nice to get up the garage, blast around in the car and have some fun and then head home without having to do anything messy or annoying! :D WooHoo! Nothing fell off or blew up either, so that's a bonus! The first video is my favourite, I'm guessing we'll remember that day for a long time as it was just so much fun!","title":"2013-01-15 - Had a great blast in the Manta"}]}